components:
  parameters:
    PaginationPage:
      description: The page of results to fetch
      in: query
      name: page
      schema:
        default: 1
        type: integer
    PaginationPerPage:
      description: The number of results per page
      in: query
      name: perPage
      schema:
        default: 50
        type: integer
  responses:
    Conflict:
      content:
        application/json:
          schema:
            properties:
              message:
                example:
                  Cannot delete pool "Example", currently used in template(s)
                  Example
                type: string
            type: object
      description: There was a conflict performing the request.
    NotFound:
      content:
        application/json:
          schema:
            properties:
              message:
                example: Not Found
                type: string
            type: object
      description: The resource requested could not be found.
    Unauthorized:
      content:
        application/json:
          schema:
            properties:
              message:
                example: Unauthorized
                type: string
            type: object
      description:
        The request is not authorized or authorization is invalid. You
        must supply the API key in `Authorization` header.
    UnprocessableEntity:
      content:
        application/json:
          schema:
            properties:
              errors:
                description:
                  An object containing the errors for each field in the
                  input
                example:
                  hostname:
                    - the hostname field is required
                  name:
                    - The name field is required
                    - The name field must be more than 8 characters
                type: object
              message:
                example: The given data was invalid.
                type: string
            type: object
      description:
        The request could not be processed. You should check the body of
        the error for more details.
  schemas:
    ListMetadata:
      description: Metadata for list responses
      properties:
        links:
          description: Relevant links for this list
          properties:
            first:
              example: https://api.dns.constellix.com/v4/domains?page=1
              format: url
              type: string
            last:
              example: https://api.dns.constellix.com/v4/domains?page=5
              format: url
              type: string
            next:
              example: https://api.dns.constellix.com/v4/domains?page=4
              format: url
              type: string
            previous:
              example: https://api.dns.constellix.com/v4/domains?page=2
              format: url
              type: string
            self:
              example: https://api.dns.constellix.com/v4/domains?page=3
              format: url
              type: string
          type: object
        pagination:
          description: Pagination details
          properties:
            count:
              description: The number of items in this page of the response
              example: 3
              type: integer
            currentPage:
              description: The current results page
              example: 1
              type: integer
            perPage:
              description: The number of items per page
              example: 50
              type: integer
            total:
              description: The total number of objects matching the query
              example: 23
              type: integer
            totalPages:
              description: The total number of pages
              example: 1
              type: integer
          type: object
      type: object
    a:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - description: A Record
          properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                failover:
                  description: The previous values in failover mode
                  properties:
                    mode:
                      description: The failover mode
                      enum:
                        - normal
                        - "off"
                        - one-way
                      type: string
                    values:
                      items:
                        allOf:
                          - $ref: "#/components/schemas/failoverrecordvalue"
                          - properties:
                              value:
                                example: 198.51.100.42
                                format: ipv4
                                type: string
                            type: object
                      type: array
                  type: object
                pools:
                  description: The previous values in Pools mode
                  items:
                    $ref: "#/components/schemas/simple-pool"
                  type: array
                roundRobinFailover:
                  description: The previous values in Round-Robin Failover mode
                  items:
                    allOf:
                      - $ref: "#/components/schemas/failoverrecordvalue"
                      - properties:
                          value:
                            example: 198.51.100.42
                            format: ipv4
                            type: string
                        type: object
                  type: array
                standard:
                  description: The previous values in standard mode
                  items:
                    properties:
                      enabled:
                        description:
                          Whether the entry is enabled or not. Disabled entries
                          will not be included in a response
                        type: boolean
                      value:
                        example: 198.51.100.42
                        format: ipv4
                        type: string
                    type: object
                  type: array
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
                - failover
                - pools
                - roundRobinFailover
              type: string
          type: object
        - $ref: "#/components/schemas/value-a"
      title: A
      type: object
    aaaa:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                failover:
                  description: The previous values in failover mode
                  properties:
                    mode:
                      description: The failover mode
                      enum:
                        - normal
                        - "off"
                        - one-way
                      type: string
                    values:
                      items:
                        allOf:
                          - $ref: "#/components/schemas/failoverrecordvalue"
                          - properties:
                              value:
                                example: 2001:db8::1
                                format: ipv6
                                type: string
                            type: object
                      type: array
                  type: object
                pools:
                  description: The previous values in Pools mode
                  items:
                    $ref: "#/components/schemas/simple-pool"
                  type: array
                roundRobinFailover:
                  description: The previous values in Round-Robin Failover mode
                  items:
                    allOf:
                      - $ref: "#/components/schemas/failoverrecordvalue"
                      - properties:
                          value:
                            example: 2001:db8::1
                            format: ipv6
                            type: string
                        type: object
                  type: array
                standard:
                  description: The previous values in standard mode
                  items:
                    properties:
                      enabled:
                        description:
                          Whether the entry is enabled or not. Disabled entries
                          will not be included in a response
                        type: boolean
                      value:
                        example: 2001:db8::1
                        format: ipv6
                        type: string
                    type: object
                  type: array
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
                - failover
                - pools
                - roundrobin-failover
              type: string
            type:
              description: The type of record
              enum:
                - AAAA
              type: string
          type: object
        - $ref: "#/components/schemas/value-aaaa"
      title: AAAA
      type: object
    analytics:
      description: Analytics for your account
      properties:
        end:
          description: The end date for the analytics
          example: "2022-01-24T00:00:00+00:00"
          format: date-time
          type: string
        interval:
          description: Details about the interval between time periods in the analytics
          properties:
            max:
              description: The maximum number of seconds between time periods
              example: 86400
              type: integer
            mean:
              description: The mean average number of seconds between time periods
              example: 86400
              type: number
            min:
              description: The minimum number of seconds between time periods
              example: 86400
              type: integer
          type: object
        links:
          properties:
            self:
              description: The URL for these analytics
              example: https://api.dns.constellix.com/v4/analytics?start=20220110&end=20220124
              type: string
          type: object
        start:
          description: The start date for the analytics
          example: "2022-01-10T00:00:00+00:00"
          format: date-time
          type: string
        stats:
          description: Some statistics for these analytics
          properties:
            count:
              description: The number of time periods
              example: 14
              type: integer
            max:
              description: The maximum number of queries for one time period
              example: 201
              type: integer
            mean:
              description: The mean average number of queries per time period
              example: 105.7143
              type: number
            min:
              description: The minimum number of queries for one time period
              example: 50
              type: integer
            sum:
              description: The sum of queries for this date range
              example: 1480
              type: integer
          type: object
        values:
          description: Query counts for all dates within the requested range
          items:
            description: Query count for a particular date
            properties:
              date:
                example: "2022-01-10T00:00:00+00:00"
                format: date-time
                type: string
              value:
                example: 342
                type: integer
            type: object
          type: array
      type: object
    aname:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                failover:
                  description: The previous values in failover mode
                  properties:
                    mode:
                      description: The failover mode
                      enum:
                        - normal
                        - "off"
                        - one-way
                      type: string
                    values:
                      items:
                        allOf:
                          - $ref: "#/components/schemas/failoverrecordvalue"
                          - properties:
                              value:
                                example: myrecord.example.com
                                type: string
                            type: object
                      type: array
                  type: object
                pools:
                  description: The previous values in Pools mode
                  items:
                    $ref: "#/components/schemas/simple-pool"
                  type: array
                standard:
                  description: The previous values in standard mode
                  items:
                    properties:
                      enabled:
                        description:
                          Whether the entry is enabled or not. Disabled entries
                          will not be included in a response
                        type: boolean
                      value:
                        example: myrecord.example.com
                        type: string
                    type: object
                  type: array
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
                - failover
                - pools
              type: string
          type: object
        - $ref: "#/components/schemas/value-aname"
      title: ANAME
      type: object
    announcement:
      properties:
        id:
          description: A numeric ID for the Announcement
          example: 2666
          type: integer
        link:
          description: A link for the announcement
          example: https://www.example.com
          type: string
        links:
          description: Links for announcements
          properties:
            self:
              example: https://api.dns.constellix.com/v4/announcements/2666
              format: url
              type: string
          type: object
        title:
          description: The announcement
          example: This is a test announcement
          type: string
        type:
          description: The type of Announcement
          enum:
            - DashboardLinks
          example: DashboardLinks
          type: string
      type: object
    caa:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - description: CAA Record
          properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                standard:
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/items"
                  type: array
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
              type: string
          type: object
        - $ref: "#/components/schemas/value-caa"
      title: CAA
      type: object
    cert:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - description: CAA Record
          properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                standard:
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-items"
                  type: array
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
              type: string
            type:
              description: The type of record
              enum:
                - CAA
              type: string
          type: object
        - $ref: "#/components/schemas/value-cert"
      title: CERT
      type: object
    cname:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - description: CNAME Record
          properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                failover:
                  description: The previous values in failover mode
                  properties:
                    mode:
                      description: The failover mode
                      enum:
                        - normal
                        - "off"
                        - one-way
                      type: string
                    values:
                      items:
                        allOf:
                          - $ref: "#/components/schemas/failoverrecordvalue"
                          - properties:
                              value:
                                example: myrecord.example.com
                                type: string
                            type: object
                      type: array
                  type: object
                pools:
                  description: The previous values in Pools mode
                  items:
                    $ref: "#/components/schemas/simple-pool"
                  type: array
                standard:
                  description: The previous values in standard mode
                  items:
                    properties:
                      enabled:
                        description:
                          Whether the entry is enabled or not. Disabled entries
                          will not be included in a response
                        type: boolean
                      value:
                        example: myrecord.example.com
                        type: string
                    type: object
                  type: array
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
                - failover
                - pools
              type: string
          type: object
        - $ref: "#/components/schemas/value-cname"
      title: CNAME
      type: object
    contactlist:
      description:
        Lists of email addresses used for notifications and messages about
        domains and records.
      properties:
        emailCount:
          description: The number of emails in this contact list
          example: 2
          type: integer
        emails:
          description: The emails in this list
          items:
            description: An object for a single email in the contact list
            properties:
              address:
                example: bob@example.com
                format: email
                type: string
              verified:
                description: Has the email been verified or not
                example: true
                type: boolean
            type: object
          type: array
        id:
          description: Unique ID for the contact list
          example: 2668228
          type: integer
        links:
          description: Links for the object
          properties:
            self:
              example: https://api.dns.constellix.com/v4/contactlists/2668228
              format: url
              type: string
          type: object
        name:
          description: A name for this contact list
          example: My Contact List
          type: string
      type: object
    contactlist-createupdate:
      description:
        Lists of email addresses used for notifications and messages about
        domains and records.
      properties:
        emails:
          description: The emails in this list
          example:
            - bob@example.com
            - alice@example.com
          items:
            format: email
            type: string
          type: array
        name:
          description: A name for this contact list
          example: My Contact List
          type: string
      type: object
    contactlist-email-createupdate:
      properties:
        address:
          description: The email address
          example: bob@example.com
          format: email
          type: string
      type: object
    contactlist-slack-createupdate:
      properties:
        channel:
          description: Slack channel to send notifications to
          example: dnsalerts
          type: string
        webhook:
          description: Incoming Webhook URL
          example: https://hooks.slack.com/services/T1234/B4321/ABCD1234
          format: url
          type: string
      type: object
    contactlist-teams-createupdate:
      properties:
        channel:
          description: Teams channel to send notifications to
          example: dnsalerts
          type: string
        webhook:
          description: Incoming Webhook URL
          example: https://outlook.office.com/webhook/123456789
          format: url
          type: string
      type: object
    contactlist_email:
      properties:
        address:
          example: bob@example.com
          format: email
          type: string
        contactlist:
          properties:
            id:
              description: Unique ID for the contact list
              example: 2668228
              type: integer
            links:
              description: Links for the contact list
              properties:
                self:
                  example: https://api.dns.constellix.com/v4/contactlists/2668228
                  format: url
                  type: string
              type: object
          type: object
        id:
          example: 36245
          type: integer
        links:
          description: Links for the email address
          properties:
            self:
              example: https://api.dns.constellix.com/v4/contactlists/2668228/emails/36245
              format: url
              type: string
          type: object
        verified:
          description: Has the email been verified or not
          example: true
          type: boolean
      type: object
    contactlist_slack:
      properties:
        channel:
          description: The channel to send the message to
          example: dnsalerts
          type: string
        contactlist:
          properties:
            id:
              description: Unique ID for the contact list
              example: 2668228
              type: integer
            links:
              description: Links for the contact list
              properties:
                self:
                  example: https://api.dns.constellix.com/v4/contactlists/2668228
                  format: url
                  type: string
              type: object
          type: object
        id:
          example: 75225
          type: integer
        links:
          description: Links for the Slack webhook
          properties:
            self:
              example: https://api.dns.constellix.com/v4/contactlists/2668228/slack/75225
              format: url
              type: string
          type: object
        webhook:
          description: The inbound webhook URL for Slack
          example: https://hooks.slack.com/services/T1234/B4321/ABCD1234
          format: url
          type: string
      type: object
    contactlist_teams:
      properties:
        channel:
          description: The channel to send the message to
          example: dnsalerts
          type: string
        contactlist:
          properties:
            id:
              description: Unique ID for the contact list
              example: 2668228
              type: integer
            links:
              description: Links for the contact list
              properties:
                self:
                  example: https://api.dns.constellix.com/v4/contactlists/2668228
                  format: url
                  type: string
              type: object
          type: object
        id:
          example: 75225
          type: integer
        links:
          description: Links for the MS Teams Webhook
          properties:
            self:
              example: https://api.dns.constellix.com/v4/contactlists/2668228/teams/83267
              format: url
              type: string
          type: object
        webhook:
          description: The inbound webhook URL for MS Teams
          example: https://outlook.office.com/webhook/123456789
          format: url
          type: string
      type: object
    contactlistwithoutemails:
      description:
        Lists of email addresses used for notifications and messages about
        domains and records.
      properties:
        emailCount:
          description: The number of emails in this contact list
          example: 2
          type: integer
        id:
          description: Unique ID for the contact list
          example: 2668228
          type: integer
        links:
          description: Links for the object
          properties:
            self:
              example: https://api.dns.constellix.com/v4/contactlists/2668228
              format: url
              type: string
          type: object
        name:
          description: A name for this contact list
          example: My Contact List
          type: string
      type: object
    domain:
      properties:
        contacts:
          description:
            An array of contact lists that will be notified when records
            in this domain change.
          items:
            $ref: "#/components/schemas/simple-contactlist"
          type: array
        createdAt:
          format: date-time
          type: string
        enabled:
          description: Is the domain enabled
          example: true
          type: boolean
        geoip:
          description: Is GeoIP functionality enabled for the domain
          example: true
          type: boolean
        gtd:
          description: Is Global Traffic Director enabled for the domain
          example: true
          type: boolean
        id:
          description: A unique numeric ID for this domain
          example: 366246
          type: integer
        links:
          description: Links for domain objects
          properties:
            records:
              example: https://api.dns.constellix.com/v4/domains/366246/records
              format: url
              type: string
            self:
              example: https://api.dns.constellix.com/v4/domains/366246
              format: url
              type: string
          type: object
        name:
          description: The name of the domain
          example: example.com
          type: string
        nameservers:
          description: The nameservers for the domain
          example:
            - ns11.constellix.com
            - ns21.constellix.com
            - ns31.constellix.com
          items:
            type: string
          type: array
        note:
          description: A note for the domain
          example: My Domain
          type: string
        soa:
          $ref: "#/components/schemas/soa"
        status:
          enum:
            - ACTIVE
            - SUSPENDED
            - TERMINATED
          type: string
        tags:
          description: An array of tags for this domain.
          items:
            $ref: "#/components/schemas/tag"
          type: array
        template:
          $ref: "#/components/schemas/simple-template"
        updatedAt:
          format: date-time
          type: string
        vanityNameserver:
          $ref: "#/components/schemas/simple-vanitynameserver"
        version:
          description: The version of the domain resource
          example: 3
          type: integer
      type: object
    domain-create:
      properties:
        contacts:
          description: Contactlists to be notified if the domain is updated
          example:
            - 2668228
            - 2668242
          items:
            type: integer
          type: array
        enabled:
          description: Is the domain enabled
          example: true
          type: boolean
        geoip:
          description: Is GeoIP functionality enabled for the domain
          example: true
          type: boolean
        gtd:
          description: Is Global Traffic Director enabled for the domain
          example: true
          type: boolean
        name:
          description: The name of the domain
          example: example.com
          type: string
        note:
          description: A note for the domain
          example: My Domain
          type: string
        soa:
          description: The SOA details for the domain
          properties:
            email:
              description:
                Email of the administrator for the domain. @ should be
                replaced with .
              example: admin.example.com
              type: string
            expire:
              description:
                Number of seconds after which secondary nameservers should
                stop responding to queries, if the master does not respond
              example: 3600000
              type: integer
            negativeCache:
              description: How long NXDOMAIN responses should be cached for
              example: 180
              type: integer
            primaryNameserver:
              description: Primary master nameserver for the domain
              example: ns11.constellix.com
              type: string
            refresh:
              description:
                The interval for secondary nameservers should query for
                the SOA record
              example: 86400
              type: integer
            retry:
              description:
                The number of seconds after which secondary servers should
                retry to request the serial number if the master does not respond
              example: 7200
              type: integer
            ttl:
              description: The Time To Live (TTL) in seconds for the SOA record
              example: 86400
              type: integer
          type: object
        tags:
          description: The numeric IDs of tags you want to apply to this domain
          example:
            - 824
            - 842
          items:
            type: integer
          type: array
        template:
          description:
            The template to use for creating this domain. It will be linked
            to this template so any changes made to the template will apply to this
            domain.
          example: 83675283
          type: integer
        vanityNameserver:
          description: The vanity nameserver to use for this domain.
          example: 82648967
          type: integer
      type: object
    domain-update:
      properties:
        contacts:
          description: Contactlists to be notified if the domain is updated
          example:
            - 2668228
            - 2668242
          items:
            type: integer
          type: array
        enabled:
          description: Is the domain enabled
          example: true
          type: boolean
        geoip:
          description: Is GeoIP functionality enabled for the domain
          example: true
          type: boolean
        gtd:
          description: Is Global Traffic Director enabled for the domain
          example: true
          type: boolean
        note:
          description: A note for the domain
          example: My Domain
          type: string
        soa:
          description: The SOA details for the domain
          properties:
            email:
              description:
                Email of the administrator for the domain. @ should be
                replaced with .
              example: admin.example.com
              type: string
            expire:
              description:
                Number of seconds after which secondary nameservers should
                stop responding to queries, if the master does not respond
              example: 3600000
              type: integer
            negativeCache:
              description: How long NXDOMAIN responses should be cached for
              example: 180
              type: integer
            primaryNameserver:
              description: Primary master nameserver for the domain
              example: ns11.constellix.com
              type: string
            refresh:
              description:
                The interval for secondary nameservers should query for
                the SOA record
              example: 86400
              type: integer
            retry:
              description:
                The number of seconds after which secondary servers should
                retry to request the serial number if the master does not respond
              example: 7200
              type: integer
            ttl:
              description: The Time To Live (TTL) in seconds for the SOA record
              example: 86400
              type: integer
          type: object
        tags:
          description: The numeric IDs of tags you want to apply to this domain
          example:
            - 824
            - 842
          items:
            type: integer
          type: array
        template:
          description:
            The template to use for creating this domain. It will be linked
            to this template so any changes made to the template will apply to this
            domain.
          example: 83675283
          type: integer
        vanityNameserver:
          description: The vanity nameserver to use for this domain.
          example: 82648967
          type: integer
      type: object
    domainanalytics:
      description: Analytics for a specific domain
      properties:
        domain:
          $ref: "#/components/schemas/simple-domain"
        end:
          description: The end date for the analytics
          example: "2022-01-24T00:00:00+00:00"
          format: date-time
          type: string
        interval:
          description: Details about the interval between time periods in the analytics
          properties:
            max:
              description: The maximum number of seconds between time periods
              example: 86400
              type: integer
            mean:
              description: The mean average number of seconds between time periods
              example: 86400
              type: number
            min:
              description: The minimum number of seconds between time periods
              example: 86400
              type: integer
          type: object
        links:
          properties:
            domain:
              description: The URL for the domain
              example: https://api.dns.constellix.com/v4/domains/366246
              type: string
            self:
              description: The URL for these analytics
              example: https://api.dns.constellix.com/v4/domains/366246/analytics?start=20220110&end=20220124
              type: string
          type: object
        queries:
          description: An array of analytics data for different types of query
          items:
            description: Analytics for a particular query type
            properties:
              stats:
                description: Some statistics for these analytics
                properties:
                  count:
                    description: The number of time periods
                    example: 14
                    type: integer
                  max:
                    description: The maximum number of queries for one time period
                    example: 201
                    type: integer
                  mean:
                    description: The mean average number of queries per time period
                    example: 105.7143
                    type: number
                  min:
                    description: The minimum number of queries for one time period
                    example: 50
                    type: integer
                  sum:
                    description: The sum of queries for this date range
                    example: 1480
                    type: integer
                type: object
              type:
                description: The type of query the analytics are for
                enum:
                  - geo_proximity
                  - standard
                  - geo_filter
                example: standard
                type: string
              values:
                description: Query counts for all dates within the requested range
                items:
                  description: Query count for a particular date
                  properties:
                    date:
                      example: "2022-01-10T00:00:00+00:00"
                      format: date-time
                      type: string
                    value:
                      example: 342
                      type: integer
                  type: object
                type: array
            type: object
          type: array
        start:
          description: The start date for the analytics
          example: "2022-01-10T00:00:00+00:00"
          format: date-time
          type: string
        stats:
          description: Some statistics for these analytics
          properties:
            count:
              description: The number of time periods
              example: 14
              type: integer
            max:
              description: The maximum number of queries for one time period
              example: 201
              type: integer
            mean:
              description: The mean average number of queries per time period
              example: 105.7143
              type: number
            min:
              description: The minimum number of queries for one time period
              example: 50
              type: integer
            sum:
              description: The sum of queries for this date range
              example: 1480
              type: integer
          type: object
      type: object
    domainhistory:
      properties:
        domain:
          $ref: "#/components/schemas/simple-domain"
        name:
          description: The name of the domain
          example: example.com
          type: string
        updatedAt:
          format: date-time
          type: string
        version:
          description: The version of the domain resource
          example: 3
          type: integer
      type: object
    domainsearchresult:
      description: Represents a search result when searching for domains
      properties:
        id:
          description: The ID for the domain name
          example: 366246
          type: integer
        links:
          description: Links for domain search results
          properties:
            domain:
              example: https://api.dns.constellix.com/v4/domains/366246
              format: url
              type: string
          type: object
        name:
          description: The name of the domain
          example: example.com
          type: string
      type: object
    domainsnapshot:
      properties:
        domain:
          $ref: "#/components/schemas/simple-domain"
        name:
          description: The name of the domain
          example: example.com
          type: string
        updatedAt:
          format: date-time
          type: string
        version:
          description: The version of the domain resource
          example: 3
          type: integer
      type: object
    failoverrecordvalue:
      properties:
        active:
          description: Whether this entry is considered active or not
          example: true
          type: boolean
        enabled:
          description:
            Whether the failover entry is enabled or not. Disabled entries
            will not be included in a response
          type: boolean
        failed:
          description: Does sonar consider this entry to be failed
          example: false
          type: boolean
        order:
          description:
            The sort order of the entry. Lower order entries are preferred
            over higher order entries
          example: 1
          type: integer
        sonarCheckId:
          description:
            The ID in Sonar to use for checking if the record should be
            used
          example: 76627
          type: integer
        status:
          description: The status of the value in Sonar
          example: N/A
          type: string
      type: object
    geoproximity:
      description: Geo Proximity Location
      properties:
        city:
          description: ID of the city
          example: 58898
          type: integer
        country:
          description: 2 digit ISO country code
          example: GB
          type: string
        id:
          description: The unique ID for the Geo Proximity location
          example: 4367769
          type: integer
        latitude:
          description: Latitude of the location
          example: 51.5033
          type: number
        links:
          description: Links for domain objects
          properties:
            self:
              example: https://api.dns.constellix.com/v4/geoproximities/4367769
              format: url
              type: string
          type: object
        longitude:
          description: Longitude of the location
          example: -0.1275
          type: number
        name:
          description: The name of the Geo Proximity location
          example: My Geo Proximity Location
          type: string
        region:
          description: Region, state or province code
          example: Greater London
          type: string
      type: object
    geoproximity-createupdate:
      description: Geo Proximity Location
      properties:
        city:
          description: The numeric ID for a city
          example: 1
          type: integer
        country:
          description: 2 digit ISO country code
          example: GB
          type: string
        latitude:
          description: Latitude of the location
          example: 51.5033
          type: number
        longitude:
          description: Longitude of the location
          example: -0.1275
          type: number
        name:
          description: The name of the Geo Proximity location
          example: My Geo Proximity Location
          type: string
        region:
          description: Region, state or province code
          example: London
          type: string
      type: object
    hinfo:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - description: HINFO Record
          properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                standard:
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/properties-value-items"
                  type: array
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
              type: string
            type:
              description: The type of record
              enum:
                - HINFO
              type: string
          type: object
        - $ref: "#/components/schemas/value-hinfo"
      title: HINFO
      type: object
    http:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - description: HTTP Redirection Record
          properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                standard:
                  $ref: "#/components/schemas/value"
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
              type: string
            type:
              description: The type of record
              enum:
                - HTTP
              type: string
          type: object
        - $ref: "#/components/schemas/value-http"
      title: Http
      type: object
    ipfilter:
      properties:
        asn:
          description:
            AS Numbers that this rule applies to. Values must be between
            0 and 4,294,967,295
          example:
            - 64496
            - 64499
          items:
            type: integer
          type: array
        continents:
          description: A list of continents in this filter
          example:
            - EU
            - NA
          items:
            enum:
              - AF
              - AN
              - AS
              - EU
              - NA
              - OC
              - SA
            type: string
          type: array
        countries:
          description: 2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
          example:
            - GB
            - DE
          items:
            type: string
          type: array
        id:
          description: The unique ID for this IP filter
          example: 47345837
          type: integer
        ipv4:
          description: IPv4 addresses and CIDRs that this filter applies to
          example:
            - 198.51.100.0/24
            - 203.0.113.42
          items:
            type: string
          type: array
        ipv6:
          description: IPv6 addresses and CIDRs that this filter applies to
          example:
            - 2001:db8:200::/64
            - "2001:db8:200:42::"
          items:
            type: string
          type: array
        links:
          description: Links for domain objects
          properties:
            self:
              example: https://api.dns.constellix.com/v4/ipfilters/47345837
              format: url
              type: string
          type: object
        name:
          description: The name for this IP filter
          example: My IP filter
          type: string
        regions:
          description: Regions for this IP filter.
          items:
            $ref: "#/components/schemas/region"
          type: array
        rulesLimit:
          description:
            Values should be multiples of 100. Upper limit is the quota
            assigned to the account.
          example: 100
          type: integer
      type: object
    ipfilter-createupdate:
      properties:
        asn:
          description:
            AS Numbers that this rule applies to. Values must be between
            0 and 4,294,967,295
          example:
            - 64496
            - 64499
          items:
            type: integer
          type: array
        continents:
          description: A list of continents in this filter
          example:
            - EU
            - NA
          items:
            enum:
              - world
              - AF
              - AN
              - AS
              - EU
              - NA
              - OC
              - SA
            type: string
          type: array
        countries:
          description: 2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
          example:
            - GB
            - FR
            - DE
          items:
            type: string
          type: array
        ipv4:
          description: IPv4 addresses and CIDRs that this filter applies to
          example:
            - 198.51.100.0/24
            - 203.0.113.42
          items:
            type: string
          type: array
        ipv6:
          description: IPv6 addresses and CIDRs that this filter applies to
          example:
            - 2001:db8:200::/64
            - "2001:db8:200:42::"
          items:
            type: string
          type: array
        name:
          description: The name for this IP filter
          example: My IP filter
          type: string
        regions:
          description:
            Combinations of Regions, Countries, Continents and optionally
            ASNs.
          items:
            properties:
              asn:
                description:
                  Optional AS Number that this rule applies to. Values
                  must be between 0 and 4,294,967,295
                example: 64499
                type: integer
              continent:
                description: The continent for this region
                enum:
                  - world
                  - AF
                  - AN
                  - AS
                  - EU
                  - NA
                  - OC
                  - SA
                example: EU
                type: string
              country:
                description: Optional 2 digit ISO code for the country - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
                example: GB
                type: string
              region:
                description: Optional 2 digit code for the region
                example: EN
                type: string
            type: object
          type: array
        rulesLimit:
          description:
            Values should be multiples of 100. Upper limit is the quota
            assigned to the account.
          example: 100
          type: integer
      type: object
    items:
      properties:
        data:
          description: The value for this tag
          example: digicert.com
          type: string
        enabled:
          description:
            Whether the entry is enabled or not. Disabled entries will
            not be included in a response
          type: boolean
        flags:
          description: A flag byte for any flags on the record.
          example: 0
          type: integer
        tag:
          description: Foo
          enum:
            - issue
            - issuewild
            - iodef
          example: issue
          type: string
      type: object
    mx:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - description: MX Record
          properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                standard:
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-mx_properties-value-items"
                  type: array
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
              type: string
            type:
              description: The type of record
              enum:
                - MX
              type: string
          type: object
        - $ref: "#/components/schemas/value-mx"
      title: MX
      type: object
    naptr:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - description: NAPTR Record
          properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                standard:
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-naptr_properties-value-items"
                  type: array
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
              type: string
            type:
              description: The type of record
              enum:
                - NAPTR
              type: string
          type: object
        - $ref: "#/components/schemas/value-naptr"
      title: NAPTR
      type: object
    ns:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - description: NS Record
          properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                standard:
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-ns_properties-value-items"
                  type: array
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
              type: string
            type:
              description: The type of record
              enum:
                - NS
              type: string
          type: object
        - $ref: "#/components/schemas/value-ns"
      title: NS
      type: object
    ping:
      properties:
        ip:
          example: 192.0.2.42
          type: string
        timestamp:
          format: date-time
          type: string
        version:
          example: 4.0.0
          type: string
      type: object
    pool:
      properties:
        contacts:
          description: Contactlists that will be notified when the pool is updated
          items:
            $ref: "#/components/schemas/simple-contactlist"
          type: array
        createdAt:
          example: "2020-10-14T18:30:36+00:00"
          format: date-time
          type: string
        domains:
          description: Domains that are using this pool
          items:
            $ref: "#/components/schemas/simple-domain"
          type: array
        enabled:
          description: Whether the pool is enabled or not
          example: true
          type: boolean
        failed:
          description: Whether the pool is considered failed or not
          example: false
          type: boolean
        id:
          example: 7665
          type: integer
        ito:
          $ref: "#/components/schemas/poolito"
        links:
          description: Links for the pool
          properties:
            self:
              example: https://api.dns.constellix.com/v4/pools/7665
              format: url
              type: string
          type: object
        minimumFailover:
          description:
            The number of records that must be available for this pool
            to be used for failover. Between 0 and 64.
          example: 1
          type: integer
        name:
          example: My Pool
          type: string
        return:
          description:
            The minimum number of entries from the pool to return when
            queried. Between 0 and 64.
          example: 1
          type: integer
        templates:
          description: Templates that are using this pool
          items:
            $ref: "#/components/schemas/simple-template"
          type: array
        type:
          description: The type of pool
          enum:
            - A
            - AAAA
            - CNAME
          example: A
          type: string
        updatedAt:
          example: "2020-10-14T18:30:36+00:00"
          format: date-time
          type: string
        values:
          description: The values for this pool
          items:
            description: A possible value for the pool. Depends on the type of pool.
            properties:
              activated:
                description: Is the value active or not?
                example: true
                type: boolean
              enabled:
                description: Is this value enabled or not?
                example: true
                type: boolean
              failed:
                description: Is this value considered failed by monitoring
                example: true
                type: boolean
              handicap:
                description: A handicap for this value
                example: 5
                type: number
              policy:
                description: The failover/check policy for this value
                enum:
                  - follow_sonar
                  - always_off
                  - always_on
                  - off_on_failure
                type: string
              sonarCheckId:
                description: The ID of the check to use from Sonar
                example: 76627
                type: integer
              speed:
                description: The response time in the last check
                example: 5.2
                type: number
              value:
                oneOf:
                  - example: 198.51.100.42
                    format: ipv4
                    type: string
                  - example: 2001:db8::1
                    format: ipv6
                    type: string
                  - example: www.example.com
                    format: hostname
                    type: string
              weight:
                description: A weight for the value. Must be between 1 and 1000000
                example: 1000
                type: integer
            type: object
          type: array
      type: object
    pool-createupdate:
      properties:
        contacts:
          description: Contact lists to be emailed when this pool changes
          example:
            - 2668228
            - 2668242
          items:
            type: integer
          type: array
        enabled:
          description: Whether the pool is enabled or not
          example: true
          type: boolean
        ito:
          $ref: "#/components/schemas/poolito"
        minimumFailover:
          description:
            The number of records that must be available for this pool
            to be used for failover. Between 0 and 64.
          example: 1
          type: integer
        name:
          description: A name for the pool
          example: My Pool
          type: string
        return:
          description:
            The minimum number of entries from the pool to return when
            queried. Between 0 and 64.
          example: 1
          type: integer
        type:
          description: The type of pool, either A, AAAA or CNAME
          enum:
            - A
            - AAAA
            - CNAME
          example: A
          type: string
        values:
          description: The values for this pool
          items:
            description: A possible value for the pool. Depends on the type of pool.
            properties:
              enabled:
                description: Is this value enabled or not?
                example: true
                type: boolean
              handicap:
                description: A handicap for this value
                example: 10
                type: integer
              policy:
                description: The failover/check policy for this value
                enum:
                  - follow_sonar
                  - always_off
                  - always_on
                  - off_on_failure
                type: string
              sonarCheckId:
                description: The ID of the check to use from Sonar
                example: 76627
                type: integer
              value:
                oneOf:
                  - example: 198.51.100.42
                    format: ipv4
                    type: string
                  - example: 2001:db8::1
                    format: ipv6
                    type: string
                  - example: www.example.com
                    format: hostname
                    type: string
              weight:
                description: A weight for the value. Must be between 1 and 1000000
                example: 1000
                type: integer
            type: object
          type: array
      type: object
    poolindex:
      properties:
        contacts:
          description: Contactlists that will be notified when the pool is updated
          items:
            $ref: "#/components/schemas/simple-contactlist"
          type: array
        createdAt:
          example: "2020-10-14T18:30:36+00:00"
          format: date-time
          type: string
        domains:
          description: Domains that are using this pool
          items:
            $ref: "#/components/schemas/simple-domain"
          type: array
        enabled:
          description: Whether the pool is enabled or not
          example: true
          type: boolean
        failed:
          description: Whether the pool is considered failed or not
          example: false
          type: boolean
        id:
          example: 7665
          type: integer
        ito:
          $ref: "#/components/schemas/poolito"
        links:
          description: Links for the pool
          properties:
            self:
              example: https://api.dns.constellix.com/v4/pools/7665
              format: url
              type: string
          type: object
        minimumFailover:
          description:
            The number of records that must be available for this pool
            to be used for failover. Between 0 and 64.
          example: 1
          type: integer
        name:
          example: My Pool
          type: string
        return:
          description:
            The minimum number of entries from the pool to return when
            queried. Between 0 and 64.
          example: 1
          type: integer
        templates:
          description: Templates that are using this pool
          items:
            $ref: "#/components/schemas/simple-template"
          type: array
        type:
          description: The type of pool
          enum:
            - A
            - AAAA
            - CNAME
          example: A
          type: string
        updatedAt:
          example: "2020-10-14T18:30:36+00:00"
          format: date-time
          type: string
        values:
          description: The values for this pool
          items:
            description: A possible value for the pool. Depends on the type of pool.
            properties:
              value:
                oneOf:
                  - example: 198.51.100.42
                    format: ipv4
                    type: string
                  - example: 2001:db8::1
                    format: ipv6
                    type: string
                  - example: www.example.com
                    format: hostname
                    type: string
              weight:
                description: A weight for the value. Must be between 1 amd 1000000
                example: 1000
                type: integer
            type: object
          type: array
      type: object
    poolito:
      properties:
        config:
          description: The Ito configuration
          properties:
            deviationAllowance:
              description:
                Percentage of how much is the response time allowed to
                deviate?
              enum:
                - 10
                - 20
                - 30
                - 40
                - 50
                - 60
                - 70
                - 80
                - 90
              example: 90
              type: integer
            handicapFactor:
              enum:
                - none
                - percent
                - speed
              example: percent
              type: string
            maximumNumberOfResults:
              description: The maximum number of results to return
              example: 1
              type: integer
            monitoringRegion:
              description: Where monitoring should be performed from
              enum:
                - world
                - asiapac
                - europe
                - nacentral
                - naeast
                - nawest
                - oceania
                - southamerica
              type: string
            period:
              description: The number of seconds between each check
              enum:
                - 30
                - 60
                - 120
                - 180
                - 240
                - 300
              example: 60
              type: integer
          type: object
        enabled:
          description: Is Ito enabled for this pool?
          example: true
          type: boolean
      type: object
    properties-value-items:
      properties:
        cpu:
          description: Text representing the CPU
          example: x86
          type: string
        enabled:
          description:
            Whether the entry is enabled or not. Disabled entries will
            not be included in a response
          type: boolean
        os:
          description: Text representing the OS
          example: Linux
          type: string
      type: object
    ptr:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - description: PTR Record
          properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                standard:
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-ptr_properties-value-items"
                  type: array
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
              type: string
            type:
              description: The type of record
              enum:
                - PTR
              type: string
          type: object
        - $ref: "#/components/schemas/value-ptr"
      title: PTR
      type: object
    domainrecord:
      properties:
        domain:
          $ref: "#/components/schemas/simple-domain"
        links:
          description: Links for the domain record
          properties:
            self:
              example: https://api.dns.constellix.com/v4/domains/366246/records/732673
              format: url
              type: string
          type: object
      type: object
    record:
      description: An object representing a DNS record
      properties:
        contacts:
          $ref: "#/components/schemas/simple-contactlist"
        enabled:
          description:
            Whether the record is enabled or not. A disabled record will
            return an NXDOMAIN response.
          type: boolean
        geoFailover:
          description:
            Disable the record if all hosts fail. If all hosts fail, another
            matching IP Filter, nearest Proximity or World (Default) record will be
            used instead.
          example: true
          type: boolean
        geoproximity:
          $ref: "#/components/schemas/simple-geoproximity"
        id:
          description: A unique ID for this domain record
          example: 732673
          type: integer
        ipfilter:
          $ref: "#/components/schemas/simple-ipfilter"
        ipfilterDrop:
          description:
            If the requesting IP matches the IP filter, don't return a
            response
          example: true
          type: boolean
        name:
          description: The name of the record
          example: www
          type: string
        notes:
          description: A note about the record. Max 512 characters.
          example: This is my DNS record
          type: string
        region:
          description: The region for this record
          enum:
            - default
            - europe
            - us-east
            - us-west
            - asia-pacific
            - oceania
            - south-america
          type: string
        skipLookup:
          description:
            Only used on POST or PATCH requests for ANAME records, used
            to specify whether the hostname should be looked up immediately. Will
            be null otherwise.
          example: null
          nullable: true
          type: boolean
        ttl:
          description:
            The time to live in seconds for this record. must be between
            0 and 2147483647
          example: 3600
          type: integer
      type: object
    record-create-details:
      type: object
      properties:
        contacts:
          description:
            Contact lists to be notified if a failover happens in a failover
            mode.
          items:
            description: Numeric ID for the contact list
            example: 2668228
            type: integer
          type: array
        enabled:
          description: Whether the record is enabled
          example: true
          type: boolean
        geoFailover:
          description: Disable the record if all hosts fail. If all hosts fail,
            another matching IP Filter, nearest Proximity or World (Default) record
            will be used instead.
          example: true
          type: boolean
        geoproximity:
          description: The integer ID of a GeoProximity to use for this record.
            Cannot be used with IP Filter.
          example: 4367769
          type: integer
        ipfilter:
          description:
            The integer ID of an IP Filter to use for this record. Cannot
            be used with GeoPeoximity.
          example: 47345837
          type: integer
        ipfilterDrop:
          description: If the requesting IP matches the IP filter, don't return
            a response
          example: true
          type: boolean
        name:
          description: The name for the record
          example: www
          type: string
        notes:
          description: A description of the record. It must be 512 characters or
            less.
          example: This is my A record
          type: string
        region:
          description: Optional region for this record. Will default to 'default'.
          enum:
            - default
            - europe
            - us-east
            - us-west
            - asia-pacific
            - oceania
            - south-america
          example: europe
          type: string
        skipLookup:
          description:
            Only used on POST or PATCH requests for ANAME records, used
            to specify whether the hostname should be looked up immediately. Will
            be null otherwise.
          example: true
          nullable: true
          type: boolean
        ttl:
          description: How long DNS servers should cache the record for
          example: 60
          type: integer
    record-create-update-a:
      type: object
      title: A
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
                - failover
                - roundrobin-failover
                - pools
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - A
              type: string
          type: object
        - $ref: "#/components/schemas/value-a-request"
    record-create-update-aaaa:
      type: object
      title: Aaaa
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
                - failover
                - roundrobin-failover
                - pools
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - AAAA
              type: string
          type: object
        - $ref: "#/components/schemas/value-aaaa-request"
    record-create-update-cname:
      type: object
      title: Cname
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
                - failover
                - pools
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - CNAME
              type: string
          type: object
        - $ref: "#/components/schemas/value-cname-request"
    record-create-update-aname:
      type: object
      title: Aname
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
                - failover
                - pools
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - ANAME
              type: string
          type: object
        - $ref: "#/components/schemas/value-aname-request"
    record-create-update-caa:
      type: object
      title: Caa
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - CAA
              type: string
          type: object
        - $ref: "#/components/schemas/value-caa"
    record-create-update-cert:
      type: object
      title: Cert
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - CERT
              type: string
          type: object
        - $ref: "#/components/schemas/value-cert"
    record-create-update-hinfo:
      type: object
      title: Hinfo
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - HINFO
              type: string
          type: object
        - $ref: "#/components/schemas/value-hinfo"
    record-create-update-mx:
      type: object
      title: Mx
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - MX
              type: string
          type: object
        - $ref: "#/components/schemas/value-mx"
    record-create-update-http:
      type: object
      title: Http
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - HTTP
              type: string
          type: object
        - $ref: "#/components/schemas/value-http"
    record-create-update-naptr:
      type: object
      title: Naptr
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - NAPTR
              type: string
          type: object
        - $ref: "#/components/schemas/value-naptr"
    record-create-update-ns:
      type: object
      title: Ns
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - NS
              type: string
          type: object
        - $ref: "#/components/schemas/value-ns"
    record-create-update-ptr:
      type: object
      title: Ptr
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - PTR
              type: string
          type: object
        - $ref: "#/components/schemas/value-ptr"
    record-create-update-rp:
      type: object
      title: Rp
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - RP
              type: string
          type: object
        - $ref: "#/components/schemas/value-rp"
    record-create-update-spf:
      type: object
      title: Spf
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - SPF
              type: string
          type: object
        - $ref: "#/components/schemas/value-spf"
    record-create-update-srv:
      type: object
      title: Srv
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - SRV
              type: string
          type: object
        - $ref: "#/components/schemas/value-srv"
    record-create-update-txt:
      type: object
      title: Txt
      allOf:
        - $ref: "#/components/schemas/record-create-details"
        - properties:
            mode:
              description: The current mode for this record
              enum:
                - standard
              example: standard
              type: string
            type:
              description: The type of record
              enum:
                - TXT
              type: string
          type: object
        - $ref: "#/components/schemas/value-txt"
    record-create:
      type: object
      discriminator:
        mapping:
          "a": "#/components/schemas/record-create-update-a"
          "aaaa": "#/components/schemas/record-create-update-aaaa"
          "cname": "#/components/schemas/record-create-update-cname"
          "aname": "#/components/schemas/record-create-update-aname"
          "caa": "#/components/schemas/record-create-update-caa"
          "cert": "#/components/schemas/record-create-update-cert"
          "hinfo": "#/components/schemas/record-create-update-hinfo"
          "mx": "#/components/schemas/record-create-update-mx"
          "http": "#/components/schemas/record-create-update-http"
          "naptr": "#/components/schemas/record-create-update-naptr"
          "ns": "#/components/schemas/record-create-update-ns"
          "ptr": "#/components/schemas/record-create-update-ptr"
          "rp": "#/components/schemas/record-create-update-rp"
          "spf": "#/components/schemas/record-create-update-spf"
          "srv": "#/components/schemas/record-create-update-srv"
          "txt": "#/components/schemas/record-create-update-txt"
        propertyName: type
      oneOf:
        - $ref: "#/components/schemas/record-create-update-a"
        - $ref: "#/components/schemas/record-create-update-aaaa"
        - $ref: "#/components/schemas/record-create-update-cname"
        - $ref: "#/components/schemas/record-create-update-aname"
        - $ref: "#/components/schemas/record-create-update-caa"
        - $ref: "#/components/schemas/record-create-update-cert"
        - $ref: "#/components/schemas/record-create-update-hinfo"
        - $ref: "#/components/schemas/record-create-update-mx"
        - $ref: "#/components/schemas/record-create-update-http"
        - $ref: "#/components/schemas/record-create-update-naptr"
        - $ref: "#/components/schemas/record-create-update-ptr"
        - $ref: "#/components/schemas/record-create-update-rp"
        - $ref: "#/components/schemas/record-create-update-spf"
        - $ref: "#/components/schemas/record-create-update-srv"
        - $ref: "#/components/schemas/record-create-update-txt"
    record-update:
      discriminator:
        mapping:
          "a": "#/components/schemas/record-create-update-a"
          "aaaa": "#/components/schemas/record-create-update-aaaa"
          "cname": "#/components/schemas/record-create-update-cname"
          "aname": "#/components/schemas/record-create-update-aname"
          "caa": "#/components/schemas/record-create-update-caa"
          "cert": "#/components/schemas/record-create-update-cert"
          "hinfo": "#/components/schemas/record-create-update-hinfo"
          "mx": "#/components/schemas/record-create-update-mx"
          "http": "#/components/schemas/record-create-update-http"
          "naptr": "#/components/schemas/record-create-update-naptr"
          "ns": "#/components/schemas/record-create-update-ns"
          "ptr": "#/components/schemas/record-create-update-ptr"
          "rp": "#/components/schemas/record-create-update-rp"
          "spf": "#/components/schemas/record-create-update-spf"
          "srv": "#/components/schemas/record-create-update-srv"
          "txt": "#/components/schemas/record-create-update-txt"
        propertyName: type
      oneOf:
        - $ref: "#/components/schemas/record-create-update-a"
        - $ref: "#/components/schemas/record-create-update-aaaa"
        - $ref: "#/components/schemas/record-create-update-cname"
        - $ref: "#/components/schemas/record-create-update-aname"
        - $ref: "#/components/schemas/record-create-update-caa"
        - $ref: "#/components/schemas/record-create-update-cert"
        - $ref: "#/components/schemas/record-create-update-hinfo"
        - $ref: "#/components/schemas/record-create-update-mx"
        - $ref: "#/components/schemas/record-create-update-http"
        - $ref: "#/components/schemas/record-create-update-naptr"
        - $ref: "#/components/schemas/record-create-update-ptr"
        - $ref: "#/components/schemas/record-create-update-rp"
        - $ref: "#/components/schemas/record-create-update-spf"
        - $ref: "#/components/schemas/record-create-update-srv"
        - $ref: "#/components/schemas/record-create-update-txt"
    region:
      description: IP Filter Region
      properties:
        asn:
          description: AS Number for this region
          example: 64496
          type: integer
        continent:
          description: The continent for this region
          example: NA
          type: string
        country:
          description: The country for the region
          example: US
          type: string
        region:
          description: The region code
          example: FL
          type: string
      type: object
    rp:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - description: RP Record
          properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                standard:
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-rp_properties-value-items"
                  type: array
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
              type: string
            type:
              description: The type of record
              enum:
                - RP
              type: string
          type: object
        - $ref: "#/components/schemas/value-rp"
      title: RP
      type: object
    simple-contactlist:
      description: A simple version of a contact list when inclued with other resources
      properties:
        id:
          description: Unique ID for the contact list
          example: 2668228
          type: integer
        links:
          description: Links for domain objects
          properties:
            self:
              example: https://api.dns.constellix.com/v4/contactlists/2668228
              format: url
              type: string
          type: object
      type: object
    simple-domain:
      properties:
        createdAt:
          format: date-time
          type: string
        enabled:
          description: Is the domain enabled
          example: true
          type: boolean
        geoip:
          description: Is GeoIP functionality enabled for the domain
          example: true
          type: boolean
        gtd:
          description: Is Global Traffic Director enabled for the domain
          example: true
          type: boolean
        id:
          description: A unique numeric ID for this domain
          example: 366246
          type: integer
        links:
          description: Links for domain objects
          properties:
            records:
              example: https://api.dns.constellix.com/v4/domains/366246/records
              format: url
              type: string
            self:
              example: https://api.dns.constellix.com/v4/domains/366246
              format: url
              type: string
          type: object
        name:
          description: The name of the domain
          example: example.com
          type: string
        note:
          description: A note for the domain
          example: My Domain
          type: string
        status:
          enum:
            - ACTIVE
            - SUSPENDED
            - TERMINATED
          type: string
        tags:
          description: An array of tags for this domain.
          items:
            $ref: "#/components/schemas/tag"
          type: array
        updatedAt:
          format: date-time
          type: string
        version:
          description: The version of the domain resource
          example: 3
          type: integer
      type: object
    simple-geoproximity:
      description: Geo Proximity Location
      properties:
        id:
          description: The unique ID for the Geo Proximity location
          example: 4367769
          type: integer
        links:
          description: Links for domain objects
          properties:
            self:
              example: https://api.dns.constellix.com/v4/geoproximities/4367769
              format: url
              type: string
          type: object
        name:
          description: The name of the Geo Proximity location
          example: My Geo Proximity Location
          type: string
      type: object
    simple-ipfilter:
      properties:
        id:
          description: The unique ID for this IP filter
          example: 47345837
          type: integer
        links:
          description: Links for domain objects
          properties:
            self:
              example: https://api.dns.constellix.com/v4/ipfilters/47345837
              format: url
              type: string
          type: object
        name:
          description: The name for this IP filter
          example: My IP filter
          type: string
      type: object
    simple-pool:
      properties:
        id:
          example: 7665
          type: integer
        links:
          description: Links for the pool
          properties:
            self:
              example: https://api.dns.constellix.com/v4/pools/7665
              format: url
              type: string
          type: object
      type: object
    simple-template:
      properties:
        id:
          description: The unique ID for this template
          example: 83675283
          type: integer
        links:
          description: Links for the template
          properties:
            records:
              example: https://api.dns.constellix.com/v4/records?template=83675283
              format: url
              type: string
            self:
              example: https://api.dns.constellix.com/v4/templates/83675283
              format: url
              type: string
          type: object
        name:
          description: The name for the template
          example: My Template
          type: string
        version:
          description: The version of the template resource
          example: 3
          type: integer
      type: object
    simple-vanitynameserver:
      description:
        A simplied version of a rebranded nameserver using your own domain
        name.
      properties:
        id:
          description: A unique ID for the vanity nameserver
          example: 82648967
          type: integer
        links:
          description: Links relevant to this object
          properties:
            self:
              example: https://api.dns.constellix.com/v4/vanitynameservers/82648967
              format: url
              type: string
          type: object
      type: object
    soa:
      description: SOA (Start of Authority) Record
      properties:
        email:
          description:
            Email of the administrator for the domain. @ should be replaced
            with .
          example: admin.example.com
          type: string
        expire:
          description:
            Number of seconds after which secondary nameservers should
            stop responding to queries, if the master does not respond
          example: 3600000
          type: integer
        negativeCache:
          description: How long NXDOMAIN responses should be cached for
          example: 180
          type: integer
        primaryNameserver:
          description: Primary master nameserver for the domain
          example: ns11.constellix.com
          type: string
        refresh:
          description:
            The interval for secondary nameservers should query for the
            SOA record
          example: 86400
          type: integer
        retry:
          description:
            The number of seconds after which secondary servers should
            retry to request the serial number if the master does not respond
          example: 7200
          type: integer
        serial:
          description: A serial number for this version of the records for this domain
          example: 2020061601
          type: integer
        ttl:
          description: The Time To Live (TTL) in seconds for the SOA record
          example: 86400
          type: integer
      type: object
    spf:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - description: SPF Record
          properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                standard:
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-spf_properties-value-items"
                  type: array
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
              type: string
            type:
              description: The type of record
              enum:
                - SPF
              type: string
          type: object
        - $ref: "#/components/schemas/value-spf"
      title: SPF
      type: object
    srv:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - description: SRV Record
          properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                standard:
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-srv_properties-value-items"
                  type: array
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
              type: string
            type:
              description: The type of record
              enum:
                - SRV
              type: string
          type: object
        - $ref: "#/components/schemas/value-srv"
      title: SRV
      type: object
    tag:
      description: A tag is used to group resources together
      properties:
        id:
          description: Unique ID for the tag
          example: 824
          type: integer
        links:
          description: Links for tags
          properties:
            self:
              example: https://api.dns.constellix.com/v4/tags/824
              format: url
              type: string
          type: object
        name:
          description: A name for this tag
          example: My Tag
          type: string
      type: object
    tag-createupdate:
      properties:
        name:
          description: A name for this tag
          example: My Tag
          type: string
      type: object
    template:
      description: A domain template
      properties:
        createdAt:
          format: date-time
          type: string
        geoip:
          description: Is GeoIP functionality enabled for the template
          example: true
          type: boolean
        gtd:
          description: Is Global Traffic Director enabled for the template
          example: true
          type: boolean
        id:
          description: The unique ID for this template
          example: 83675283
          type: integer
        links:
          description: Links for the template
          properties:
            records:
              example: https://api.dns.constellix.com/v4/templates/83675283/records
              format: url
              type: string
            self:
              example: https://api.dns.constellix.com/v4/templates/83675283
              format: url
              type: string
          type: object
        name:
          description: The name for the template
          example: My Template
          type: string
        updatedAt:
          format: date-time
          type: string
        version:
          description: The version of the template resource
          example: 3
          type: integer
      type: object
    template-createupdate:
      properties:
        geoip:
          description: Is GeoIP functionality enabled for the template
          example: true
          type: boolean
        gtd:
          description: Is Global Traffic Director enabled for the template
          example: true
          type: boolean
        name:
          description: The name of the template
          example: My New Template
          type: string
      type: object
    templaterecord:
      properties:
        links:
          description: Links for the domain record
          properties:
            self:
              example: https://api.dns.constellix.com/v4/templates/83675283/records/732673
              format: url
              type: string
          type: object
        template:
          $ref: "#/components/schemas/simple-template"
      type: object
    txt:
      allOf:
        - $ref: "#/components/schemas/record"
        - $ref: "#/components/schemas/domainrecord"
        - $ref: "#/components/schemas/templaterecord"
        - description: TXT Record
          properties:
            lastValues:
              description: The previous values of the record in the different modes
              properties:
                standard:
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-txt_properties-value-items"
                  type: array
              type: object
            mode:
              description: How the record should work
              enum:
                - standard
              type: string
            type:
              description: The type of record
              enum:
                - TXT
              type: string
          type: object
        - $ref: "#/components/schemas/value-txt"
      title: TXT
      type: object
    value:
      properties:
        description:
          description: The description to include in meta tags
          example: A website containing example data
          type: string
        hard:
          description:
            If this is a frame redirect, don't include the URL entered
            in the browser
          example: false
          type: boolean
        keywords:
          description: Meta keywords for the page containing the frame
          example: Example
          type: string
        redirectType:
          description: The type of redirect, either 301, 302 or frame.
          example: 302
          type: string
        title:
          description: The title of the page containing the redirect frame
          example: My Website
          type: string
        url:
          description: The URL to redirect to
          example: https://www.example.com
          format: url
          type: string
      type: object
    value-a:
      description: Values for an A record
      properties:
        type:
          description: The type of record
          enum:
            - A
          type: string
        value:
          allOf:
            - description: Standard record mode
              items:
                properties:
                  enabled:
                    description:
                      Whether the entry is enabled or not. Disabled entries
                      will not be included in a response
                    type: boolean
                  value:
                    example: 198.51.100.42
                    format: ipv4
                    type: string
                type: object
              title: Standard
              type: array
            - description: Failover record mode
              properties:
                mode:
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                  type: string
                values:
                  items:
                    allOf:
                      - $ref: "#/components/schemas/failoverrecordvalue"
                      - properties:
                          value:
                            example: 198.51.100.42
                            format: ipv4
                            type: string
                        type: object
                  type: array
              title: Failover
              type: object
            - description: Round robin failover mode
              items:
                allOf:
                  - $ref: "#/components/schemas/failoverrecordvalue"
                  - properties:
                      value:
                        example: 198.51.100.42
                        format: ipv4
                        type: string
                    type: object
              title: Round Robin Failover
              type: array
            - description: Pools
              items:
                $ref: "#/components/schemas/simple-pool"
              title: Pools
              type: array
      title: A
      type: object
    value-a-request:
      description: Values for an A record
      properties:
        value:
          oneOf:
            - description: Standard record mode
              items:
                properties:
                  enabled:
                    description:
                      Whether the entry is enabled or not. Disabled entries
                      will not be included in a response
                    type: boolean
                  value:
                    example: 198.51.100.42
                    format: ipv4
                    type: string
                type: object
              title: Standard
              type: array
            - description: Failover record mode
              properties:
                mode:
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                  type: string
                values:
                  items:
                    properties:
                      enabled:
                        description:
                          Whether the failover entry is enabled or not. Disabled
                          entries will not be included in a response
                        type: boolean
                      order:
                        description:
                          The sort order of the entry. Lower order entries
                          are preferred over higher order entries
                        example: 1
                        type: integer
                      sonarCheckId:
                        description:
                          The ID in Sonar to use for checking if the record
                          should be used
                        example: 76627
                        type: integer
                      value:
                        example: 198.51.100.42
                        format: ipv4
                        type: string
                    type: object
                  type: array
              title: Failover
              type: object
            - description: Round robin failover mode
              items:
                properties:
                  enabled:
                    description:
                      Whether the failover entry is enabled or not. Disabled
                      entries will not be included in a response
                    type: boolean
                  order:
                    description:
                      The sort order of the entry. Lower order entries are
                      preferred over higher order entries
                    example: 1
                    type: integer
                  sonarCheckId:
                    description:
                      The ID in Sonar to use for checking if the record should
                      be used
                    example: 76627
                    type: integer
                  value:
                    example: 198.51.100.42
                    format: ipv4
                    type: string
                type: object
              title: Round Robin Failover
              type: array
            - description: Pools
              items:
                properties:
                  id:
                    example: 7665
                    type: integer
                type: object
              title: Pools
              type: array
      title: A
      type: object
    value-aaaa:
      description: Values for an AAAA record
      properties:
        type:
          description: The type of record
          enum:
            - AAAA
          type: string
        value:
          allOf:
            - description: Standard record mode
              items:
                properties:
                  enabled:
                    description:
                      Whether the entry is enabled or not. Disabled entries
                      will not be included in a response
                    type: boolean
                  value:
                    example: 2001:db8::1
                    format: ipv6
                    type: string
                type: object
              title: Standard
              type: array
            - description: Failover record mode
              properties:
                enabled:
                  description: Whether this failover value is enabled or not
                  type: boolean
                mode:
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                  type: string
                values:
                  items:
                    allOf:
                      - $ref: "#/components/schemas/failoverrecordvalue"
                      - properties:
                          value:
                            example: 2001:db8::1
                            format: ipv6
                            type: string
                        type: object
                  type: array
              title: Failover
              type: object
            - description: Round robin failover mode
              items:
                allOf:
                  - $ref: "#/components/schemas/failoverrecordvalue"
                  - properties:
                      value:
                        example: 2001:db8::1
                        format: ipv6
                        type: string
                    type: object
              title: Round Robin Failover
              type: array
            - description: Pools
              items:
                $ref: "#/components/schemas/simple-pool"
              title: Pools
              type: array
      title: AAAA
      type: object
    value-aaaa-request:
      description: Values for an AAAA record
      properties:
        value:
          oneOf:
            - description: Standard record mode
              items:
                properties:
                  enabled:
                    description:
                      Whether the entry is enabled or not. Disabled entries
                      will not be included in a response
                    type: boolean
                  value:
                    example: 2001:db8::1
                    format: ipv6
                    type: string
                type: object
              title: Standard
              type: array
            - description: Failover record mode
              properties:
                enabled:
                  description: Whether this failover value is enabled or not
                  type: boolean
                mode:
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                  type: string
                values:
                  items:
                    properties:
                      active:
                        description: Whether this entry is considered active or not
                        example: true
                        type: boolean
                      enabled:
                        description:
                          Whether the failover entry is enabled or not. Disabled
                          entries will not be included in a response
                        type: boolean
                      order:
                        description:
                          The sort order of the entry. Lower order entries
                          are preferred over higher order entries
                        example: 1
                        type: integer
                      sonarCheckId:
                        description:
                          The ID in Sonar to use for checking if the record
                          should be used
                        example: 76627
                        type: integer
                      value:
                        example: 2001:db8::1
                        format: ipv6
                        type: string
                    type: object
                  type: array
              title: Failover
              type: object
            - description: Round robin failover mode
              items:
                properties:
                  active:
                    description: Whether this entry is considered active or not
                    example: true
                    type: boolean
                  enabled:
                    description:
                      Whether the failover entry is enabled or not. Disabled
                      entries will not be included in a response
                    type: boolean
                  order:
                    description:
                      The sort order of the entry. Lower order entries are
                      preferred over higher order entries
                    example: 1
                    type: integer
                  sonarCheckId:
                    description:
                      The ID in Sonar to use for checking if the record should
                      be used
                    example: 76627
                    type: integer
                  value:
                    example: 2001:db8::1
                    format: ipv6
                    type: string
                type: object
              title: Round Robin Failover
              type: array
            - description: Pools
              items:
                properties:
                  id:
                    example: 7665
                    type: integer
                type: object
              title: Pools
              type: array
      title: AAAA
      type: object
    value-aname:
      description: ANAME Record
      properties:
        type:
          description: The type of record
          enum:
            - ANAME
          type: string
        value:
          oneOf:
            - description: Standard record mode
              items:
                properties:
                  enabled:
                    description:
                      Whether the entry is enabled or not. Disabled entries
                      will not be included in a response
                    type: boolean
                  value:
                    example: myrecord.example.com
                    type: string
                type: object
              title: Standard
              type: array
            - description: Failover record mode
              properties:
                mode:
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                  type: string
                values:
                  items:
                    allOf:
                      - $ref: "#/components/schemas/failoverrecordvalue"
                      - properties:
                          value:
                            example: myrecord.example.com
                            type: string
                        type: object
                  type: array
              title: Failover
              type: object
            - description: Pools
              items:
                $ref: "#/components/schemas/simple-pool"
              title: Pools
              type: array
      title: ANAME
      type: object
    value-aname-request:
      description: ANAME Record
      properties:
        value:
          oneOf:
            - description: Standard record mode
              items:
                properties:
                  enabled:
                    description:
                      Whether the entry is enabled or not. Disabled entries
                      will not be included in a response
                    type: boolean
                  value:
                    example: myrecord.example.com
                    format: ipv6
                    type: string
                type: object
              title: Standard
              type: array
            - description: Failover record mode
              properties:
                enabled:
                  description: Whether this failover value is enabled or not
                  type: boolean
                mode:
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                  type: string
                values:
                  items:
                    properties:
                      active:
                        description: Whether this entry is considered active or not
                        example: true
                        type: boolean
                      enabled:
                        description:
                          Whether the failover entry is enabled or not. Disabled
                          entries will not be included in a response
                        type: boolean
                      order:
                        description:
                          The sort order of the entry. Lower order entries
                          are preferred over higher order entries
                        example: 1
                        type: integer
                      sonarCheckId:
                        description:
                          The ID in Sonar to use for checking if the record
                          should be used
                        example: 76627
                        type: integer
                      value:
                        example: myrecord.example.com
                        format: ipv6
                        type: string
                    type: object
                  type: array
              title: Failover
              type: object
            - description: Pools
              items:
                properties:
                  id:
                    example: 7665
                    type: integer
                type: object
              title: Pools
              type: array
      title: ANAME
      type: object
    value-caa:
      description: CAA Record
      properties:
        value:
          description: Standard record mode
          items:
            properties:
              data:
                description: The value for this tag
                example: digicert.com
                type: string
              enabled:
                description:
                  Whether the entry is enabled or not. Disabled entries
                  will not be included in a response
                type: boolean
              flags:
                description: A flag byte for any flags on the record.
                example: 0
                type: integer
              tag:
                description: Foo
                enum:
                  - issue
                  - issuewild
                  - iodef
                example: issue
                type: string
            type: object
          type: array
      title: CAA
      type: object
    value-cert:
      description: CERT Record
      properties:
        value:
          description: Standard record mode
          items:
            properties:
              algorithm:
                description: An integer representing the algorithm
                example: 1
                type: integer
              certificate:
                description: A base 64 encoded string containing the certificate information
                example: 1
                format: base64 encoded
                type: string
              certificateType:
                description: An integer representing the type of certificate
                example: 1
                type: integer
              enabled:
                description:
                  Whether the entry is enabled or not. Disabled entries
                  will not be included in a response
                type: boolean
              keyTag:
                description: An integer representing the key tag
                example: 1
                type: integer
            type: object
          type: array
      title: CERT
      type: object
    value-cname:
      description: CNAME Record
      properties:
        type:
          description: The type of record
          enum:
            - CNAME
          type: string
        value:
          allOf:
            - description: Standard record mode
              items:
                properties:
                  enabled:
                    description:
                      Whether the entry is enabled or not. Disabled entries
                      will not be included in a response
                    type: boolean
                  value:
                    example: myrecord.example.com
                    type: string
                type: object
              title: Standard
              type: array
            - description: Failover record mode
              properties:
                mode:
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                  type: string
                values:
                  items:
                    allOf:
                      - $ref: "#/components/schemas/failoverrecordvalue"
                      - properties:
                          value:
                            example: myrecord.example.com
                            type: string
                        type: object
                  type: array
              title: Failover
              type: object
            - description: Pools
              items:
                $ref: "#/components/schemas/simple-pool"
              title: Pools
              type: array
      title: CNAME
      type: object
    value-cname-request:
      description: CNAME Record
      properties:
        value:
          oneOf:
            - description: Standard record mode
              items:
                properties:
                  enabled:
                    description:
                      Whether the entry is enabled or not. Disabled entries
                      will not be included in a response
                    type: boolean
                  value:
                    example: myrecord.example.com
                    format: ipv6
                    type: string
                type: object
              title: Standard
              type: array
            - description: Failover record mode
              properties:
                enabled:
                  description: Whether this failover value is enabled or not
                  type: boolean
                mode:
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                  type: string
                values:
                  items:
                    properties:
                      active:
                        description: Whether this entry is considered active or not
                        example: true
                        type: boolean
                      enabled:
                        description:
                          Whether the failover entry is enabled or not. Disabled
                          entries will not be included in a response
                        type: boolean
                      order:
                        description:
                          The sort order of the entry. Lower order entries
                          are preferred over higher order entries
                        example: 1
                        type: integer
                      sonarCheckId:
                        description:
                          The ID in Sonar to use for checking if the record
                          should be used
                        example: 76627
                        type: integer
                      value:
                        example: myrecord.example.com
                        format: ipv6
                        type: string
                    type: object
                  type: array
              title: Failover
              type: object
            - description: Pools
              items:
                properties:
                  id:
                    example: 7665
                    type: integer
                type: object
              title: Pools
              type: array
      title: CNAME
      type: object
    value-hinfo:
      description: HINFO Record
      properties:
        value:
          description: Standard record mode
          items:
            properties:
              cpu:
                description: Text representing the CPU
                example: x86
                type: string
              enabled:
                description:
                  Whether the entry is enabled or not. Disabled entries
                  will not be included in a response
                type: boolean
              os:
                description: Text representing the OS
                example: Linux
                type: string
            type: object
          type: array
      title: HINFO
      type: object
    value-http:
      description: HTTP Record
      properties:
        value:
          properties:
            description:
              description: The description to include in meta tags
              example: A website containing example data
              type: string
            hard:
              description:
                If this is a frame redirect, don't include the URL entered
                in the browser
              example: false
              type: boolean
            keywords:
              description: Meta keywords for the page containing the frame
              example: Example
              type: string
            redirectType:
              description: The type of redirect, either 301, 302 or frame.
              example: 302
              type: string
            title:
              description: The title of the page containing the redirect frame
              example: My Website
              type: string
            url:
              description: The URL to redirect to
              example: https://www.example.com
              format: url
              type: string
          type: object
      title: HTTP
      type: object
    value-items:
      properties:
        algorithm:
          description: An integer representing the algorithm
          example: 1
          type: integer
        certificate:
          description: A base 64 encoded string containing the certificate information
          example: 1
          format: base64 encoded
          type: string
        certificateType:
          description: An integer representing the type of certificate
          example: 1
          type: integer
        enabled:
          description:
            Whether the entry is enabled or not. Disabled entries will
            not be included in a response
          type: boolean
        keyTag:
          description: An integer representing the key tag
          example: 1
          type: integer
      type: object
    value-mx:
      description: MX Record
      properties:
        value:
          description: Standard record mode
          items:
            properties:
              enabled:
                description:
                  Whether the entry is enabled or not. Disabled entries
                  will not be included in a response
                type: boolean
              priority:
                description: A number representing the priority of the mail server
                example: 10
                type: integer
              server:
                description: The hostname of the mail server
                example: mail.example.com
                type: string
            type: object
          type: array
      title: MX
      type: object
    value-mx_properties-value-items:
      properties:
        enabled:
          description:
            Whether the entry is enabled or not. Disabled entries will
            not be included in a response
          type: boolean
        priority:
          description: A number representing the priority of the mail server
          example: 10
          type: integer
        server:
          description: The hostname of the mail server
          example: mail.example.com
          type: string
      type: object
    value-naptr:
      description: NAPTR Record
      properties:
        value:
          description: Standard record mode
          items:
            properties:
              enabled:
                description:
                  Whether the entry is enabled or not. Disabled entries
                  will not be included in a response
                type: boolean
              flags:
                description: Any flags for this record
                example: S
                type: string
              order:
                description: The order of the record
                example: 100
                type: integer
              preference:
                description: The preference for the record
                example: 10
                type: integer
              regularExpression:
                description: A regular expression to use
                example: "!^.*$!sip:customer-service@example.com!"
                type: string
              replacement:
                description: The replacement for the regular expression
                example: _sip._udp.example.com.
                type: string
              service:
                description: The service the record is used for
                example: SIP+D2U
                type: string
            type: object
          type: array
      title: NAPTR
      type: object
    value-naptr_properties-value-items:
      properties:
        enabled:
          description:
            Whether the entry is enabled or not. Disabled entries will
            not be included in a response
          type: boolean
        flags:
          description: Any flags for this record
          example: S
          type: string
        order:
          description: The order of the record
          example: 100
          type: integer
        preference:
          description: The preference for the record
          example: 10
          type: integer
        regularExpression:
          description: A regular expression to use
          example: "!^.*$!sip:customer-service@example.com!"
          type: string
        replacement:
          description: The replacement for the regular expression
          example: _sip._udp.example.com.
          type: string
        service:
          description: The service the record is used for
          example: SIP+D2U
          type: string
      type: object
    value-ns:
      description: NS Record
      properties:
        value:
          description: Standard record mode
          items:
            properties:
              enabled:
                description:
                  Whether the entry is enabled or not. Disabled entries
                  will not be included in a response
                type: boolean
              host:
                description: The hostname for the nameserver
                example: ns1.example.com
                type: string
            type: object
          type: array
      title: NS
      type: object
    value-ns_properties-value-items:
      properties:
        enabled:
          description:
            Whether the entry is enabled or not. Disabled entries will
            not be included in a response
          type: boolean
        host:
          description: The hostname for the nameserver
          example: ns1.example.com
          type: string
      type: object
    value-ptr:
      description: PTR Record
      properties:
        value:
          description: Standard record mode
          items:
            properties:
              enabled:
                description:
                  Whether the entry is enabled or not. Disabled entries
                  will not be included in a response
                type: boolean
              system:
                description: The hostname for the IP address
                example: system.example.com
                type: string
            type: object
          type: array
      title: PTR
      type: object
    value-ptr_properties-value-items:
      properties:
        enabled:
          description:
            Whether the entry is enabled or not. Disabled entries will
            not be included in a response
          type: boolean
        system:
          description: The hostname for the IP address
          example: system.example.com
          type: string
      type: object
    value-rp:
      description: RP Record
      properties:
        value:
          description: Standard record mode
          items:
            properties:
              enabled:
                description:
                  Whether the entry is enabled or not. Disabled entries
                  will not be included in a response
                type: boolean
              mailbox:
                description: The email of the person responsible. Replace @ with .
                example: admin.example.com
                type: string
              txt:
                description: The name of a TXT record containing more information
                example: admin.example.com
                type: string
            type: object
          type: array
      title: RP
      type: object
    value-rp_properties-value-items:
      properties:
        enabled:
          description:
            Whether the entry is enabled or not. Disabled entries will
            not be included in a response
          type: boolean
        mailbox:
          description: The email of the person responsible. Replace @ with .
          example: admin.example.com
          type: string
        txt:
          description: The name of a TXT record containing more information
          example: admin.example.com
          type: string
      type: object
    value-spf:
      description: SPF Record
      properties:
        value:
          description: Standard record mode
          items:
            properties:
              enabled:
                description:
                  Whether the entry is enabled or not. Disabled entries
                  will not be included in a response
                type: boolean
              value:
                description: The SPF record value
                example: v=spf1 include:example.com ?all
                type: string
            type: object
          type: array
      title: SPF
      type: object
    value-spf_properties-value-items:
      properties:
        enabled:
          description:
            Whether the entry is enabled or not. Disabled entries will
            not be included in a response
          type: boolean
        value:
          description: The SPF record value
          example: v=spf1 include:example.com ?all
          type: string
      type: object
    value-srv:
      description: SRV Record
      properties:
        value:
          description: Standard record mode
          items:
            properties:
              enabled:
                description:
                  Whether the entry is enabled or not. Disabled entries
                  will not be included in a response
                type: boolean
              host:
                description: The hostname for the service
                example: sip.example.com.
                type: string
              port:
                description: The port the service runs on
                example: 5060
                type: integer
              priority:
                description: A priority for this record
                example: 0
                type: integer
              weight:
                description: A weight for this record
                example: 10
                type: integer
            type: object
          type: array
      title: SRV
      type: object
    value-srv_properties-value-items:
      properties:
        enabled:
          description:
            Whether the entry is enabled or not. Disabled entries will
            not be included in a response
          type: boolean
        host:
          description: The hostname for the service
          example: sip.example.com.
          type: string
        port:
          description: The port the service runs on
          example: 5060
          type: integer
        priority:
          description: A priority for this record
          example: 0
          type: integer
        weight:
          description: A weight for this record
          example: 10
          type: integer
      type: object
    value-txt:
      description: TXT Record
      properties:
        value:
          description: Standard record mode
          items:
            properties:
              enabled:
                description:
                  Whether the entry is enabled or not. Disabled entries
                  will not be included in a response
                type: boolean
              value:
                description: The text record value
                example: My text record
                type: string
            type: object
          type: array
      title: TXT
      type: object
    value-txt_properties-value-items:
      properties:
        enabled:
          description:
            Whether the entry is enabled or not. Disabled entries will
            not be included in a response
          type: boolean
        value:
          description: The text record value
          example: My text record
          type: string
      type: object
    vanitynameserver:
      description: A rebranded nameserver using your own domain name.
      properties:
        default:
          description: Is this the default nameserver for domains in the account
          example: false
          type: boolean
        id:
          description: A unique ID for the vanity nameserver
          example: 82648967
          type: integer
        links:
          description: Links for domain objects
          properties:
            self:
              example: https://api.dns.constellix.com/v4/vanitynameservers/82648967
              format: url
              type: string
          type: object
        name:
          description: A unique name for this vanity nameserver
          example: My Vanity nameserver
          type: string
        nameserverGroup:
          properties:
            id:
              description: The ID of the nameserver group
              example: 674
              type: integer
            name:
              description: The name of the nameserver group
              example: Nameserver Group 1
              type: string
          type: object
        nameservers:
          description: The nameserver hostnames
          example:
            - ns1.example.com
            - ns2.example.com
          items:
            format: hostname
            type: string
          type: array
        public:
          description: Is this nameserver public?
          example: false
          type: boolean
      type: object
    vanitynameserver-create:
      description: A rebranded nameserver using your own domain name.
      properties:
        default:
          description: Is this the default nameserver for domains in the account
          example: false
          type: boolean
        name:
          description: A unique name for this vanity nameserver
          example: My Vanity nameserver
          type: string
        nameserverGroup:
          properties:
            id:
              description: The ID of the nameserver group
              example: 674
              type: integer
          type: object
        nameservers:
          description: The nameserver hostnames
          example:
            - ns1.example.com
            - ns2.example.com
          items:
            format: hostname
            type: string
          type: array
      type: object
    vanitynameserver-update:
      description: A rebranded nameserver using your own domain name.
      properties:
        default:
          description: Is this the default nameserver for domains in the account
          example: false
          type: boolean
        name:
          description: A unique name for this vanity nameserver
          example: My Vanity nameserver
          type: string
        nameservers:
          description: The nameserver hostnames
          example:
            - ns1.example.com
            - ns2.example.com
          items:
            format: hostname
            type: string
          type: array
      type: object
  securitySchemes:
    http:
      scheme: bearer
      type: http
info:
  contact:
    email: support@constellix.com
    name: Constellix
  description:
    "REST API for interacting with Constellix DNS services.\n\n# Overview\n\
    \nWelcome to the Constellix REST API. This API allows you to manage your Constellix\
    \ DNS services. You can add, remove and update domains, records, templates and\
    \ more.\n\nThis documentation details all the API endpoints, resource types and\
    \ contains all the information to help you to use the API.\n\n# Using the API\n\
    \n## Making Requests\n\nThe API is a REST API and supports common HTTP verbs of\
    \ GET, POST, PUT and DELETE. In general:\n\n- **GET** - Retrieve a resource (or\
    \ resources) from the API\n- **POST** - Create a new resource, or update an existing\
    \ resource\n- **PUT** - Update an existing resource\n- **DELETE** - Delete a resource\n\
    \n\nPlease note that partial data is allowed for PUT requests, only the fields\
    \ provided in the request will be updated. You may also perform this request using\
    \ `POST` or `PATCH`.\n\n\nMost request endpoints are authenticated and request\
    \ the `Authorization: Bearer` header to be provided. More details are in the [authentication\
    \ section](#section/Authentication).\n\nThe API uses standard HTTP response codes,\
    \ 2xx means the request was successful, 3xx is a redirection, 4xx is a client\
    \ error and 5xx is a server error.\n\n## Formats\n\nThe API supports `application/json`\
    \ content-type and accept headers. All responses will be provided as JSON and\
    \ all requests should specify `application/json` as the `Content-Type` and `Accept`\
    \ headers.\n\n## Rate Limiting\n\nAuthenticated API requests are rate limited.\
    \ The rate limiting details are provided in the response headers.\n\n| **Header**\
    \ | **Example** | **Purpose** |\n| ---------- | ----------- | ----------- |\n\
    | X-RateLimit-Limit | 1000 | Your maximum number of API requests |\n| X-RateLimit-Remaining\
    \ | 999 | How many requests you have remaining |\n| X-RateLimit-Reset | 29 | How\
    \ long until your rate limits are reset |\n\n## Listing resources\n\nWhen you\
    \ request a list of resources, you will get an object back that contains an array\
    \ of the resources and information about the total number of resources and pagination.\n\
    \nIf you want to change the number of results fetched, or specify the page of\
    \ results, you can use the following query parameters in the URL:\n\n| **Parameter**\
    \ | **Example** | **Purpose** |\n| -------------- | ----------- | -----------\
    \ |\n| page | 2 | Which page of the results to fetch. By default this is the first\
    \ page. |\n| perPage | 50 | How many results to fetch per page. The default value\
    \ is normally 50. |\n\nThe results will have a `meta` property, it will contain\
    \ the following:\n\n```javascript\n{\n    \"links\": {\n        \"self\": \"https://api.dns.constellix.com/v4/templates?page=1\"\
    ,\n        \"first\": \"https://api.dns.constellix.com/v4/templates?page=1\",\n\
    \        \"last\": \"https://api.dns.constellix.com/v4/templates?page=1\",\n \
    \       \"previous\": null,\n        \"next\": null\n    },\n    \"pagination\"\
    : {\n        \"total\": 3,\n        \"count\": 3,\n        \"perPage\": 50,\n\
    \        \"currentPage\": 1\n    }\n}\n```\n\nThere are links to other pages in\
    \ the results as well as total pagination information.\n\n## Creating resources\n\
    \nWhen a new resources is created, it may not be created immediately. In most\
    \ cases, it will be available immediately, but this is not guaranteed. For this\
    \ reason, create requests return a `202 Accepted` response code.\n\nThe response\
    \ will have a `Location` header set with the location the new resource will exist\
    \ at. The response body will include this location and also the ID of the resource\
    \ created.\n\nThe location may return a `404 Not Found` error until the resource\
    \ has been created.\n\n# Authentication\n\nAuthentication is performed using `Authorization:\
    \ Bearer <token>`. The token is a combination of the API Key and request date,\
    \ encoded using the Secret Key.\n\nThe individual components of the token are:\n\
    \n- **API Key** - The API key from the Constellix Management Portal, eg. `7a3fe9ef-de08-4c87-83a3-5034a8441f07`\n\
    - **HMAC** - The request timestamp (in milliseconds), HMAC encoded using the Secret\
    \ Key from the Management Portal. This is then base64 encoded. eg. `UkHJfB5wJpAux8dq518Jfb434ks=`\n\
    - **Request Timestamp** - The request timestamp (in milliseconds), eg. `1489401874402`\n\
    \nThe three components are concatenated together, separated by colons. eg. `<API\
    \ Key>:<HMAC>:<Request Date>`.\n\nExample PHP code for achieving this is:\n\n\
    ```php\ndefine('SECRET_KEY', 'b811608f-7501-4e0c-8a05-4e8d5ab841ec');\ndefine\
    \ ('API_KEY', '15e8b5a1-ef8f-4a16-a7dd-c30898d8affc');\n\n$now = new DateTime('now',\
    \ new \\DateTimeZone('UTC'));\n$timestamp = (string) ($now->getTimestamp() * 1000);\n\
    $hmac = base64_encode(hash_hmac('sha1', $timestamp, SECRET_KEY, true));\n$header\
    \ = 'Authorization: Bearer ' . API_KEY . ':' . $hmac . ':' . $timestamp;\n```\n\
    \nA pre-request script for Postman which can be used to populate an environment\
    \ variable is:\n\n```javascript\nvar apiKey = pm.collectionVariables.get(\"apiKey\"\
    );\nvar secretKey = pm.collectionVariables.get(\"secretKey\");\n\nfunction epochTime()\
    \ {\n  return new Date().getTime() + '';\n}\n\npm.collectionVariables.unset(\"\
    constellixAuth\");\nvar time = epochTime();\nvar hmac = CryptoJS.HmacSHA1(time,\
    \ secretKey).toString(CryptoJS.enc.Base64);\nvar token = apiKey + \":\" + hmac\
    \ + \":\" + time;\npm.collectionVariables.set('constellixAuth', token);\n```\n\
    \n## Backwards Compatibility\n\nThe v4 API also supports authentication using\
    \ the same headers as the previous Constellix DNS APIs. You can use either separate\
    \ headers for the API Key, HMAC and Request Timestamp or they can be combined\
    \ into a single header.\n\nIt is still recommended that you pass the authentication\
    \ through as an `Authorization: Bearer <token>` format instead.\n\n### Separate\
    \ headers\n\n```\nx-cnsdns-apiKey: 7a3fe9ef-de08-4c87-83a3-5034a8441f07\nx-cnsdns-hmac:\
    \ UkHJfB5wJpAux8dq518Jfb434ks=\nx-cnsdns-requestDate: 1489401874402\n```\n\n###\
    \ Single Header\n\nThe values should be concatenated with `:`.\n\n```\nx-cns-security-token:\
    \ 7a3fe9ef-de08-4c87-83a3-5034a8441f07:UkHJfB5wJpAux8dq518Jfb434ks=:1489401874402\n\
    ```\n\n# Postman Collection\n\nIf you use Postman, you can [download a Postman\
    \ Collection](https://api.dns.constellix.com/v4/postman-collection) for this API,\
    \ with the pre-request script configured. All you need to do is edit variables\
    \ for the collection and add your secret key and API key.\n\n# Changelog\n\n##\
    \ v4.2.7\n\n- Updated documentation to remove incorrect `active` property on failover\
    \ record value updates.\n\n## v4.2.6\n\n- Internal changes.\n\n## v4.2.5\n\n-\
    \ Internal changes.\n\n## v4.2.4\n\n- Fix inconsistent API results when adding\
    \ a domain with tags that doesn't existent. Previously the domain would be created\
    \ even though an error was returned in the response. Now the domain will not be\
    \ created.\n\n## v4.2.3\n\n- Fix 500 error when attempting to delete a pool that\
    \ is in use by a template or domain. You will now get a 409 conflict error with\
    \ an explanation.\n\n## v4.2.2\n\n- Fix error that occurs when you update pool\
    \ values without specifying a `policy` value\n\n## v4.2.1\n\n- Fix issue accessing\
    \ pools with ITO enabled but no ITO configuration\n\n## v4.2.0\n\n- New sub-resources\
    \ on Contact List resources for Slack channels, Microsoft Teams channels and Emails\n\
    - Fixed documentation on domain snapshots and domain history resources\n\n## v4.1.13\n\
    \n- Fix viewing and editing of contact lists\n- Fix example IP Filter request\
    \ in documentation\n- Update documentation for Pools to include `createdAt` and\
    \ `updatedAt` fields\n- Fix pool value `speed` property sometimes being returned\
    \ as `N/A` instead of `null`\n- Improved error messages for Template Records\n\
    - Fix error when attempting to update a Template Record but making no changes\n\
    \n## v4.1.12\n\n- Correct documentation for geoproximity, domain and domain history\
    \ resources to match API output\n- Added version property on API domain resources\
    \ to match documentation\n\n## v4.1.11\n\n- Fix issue where domain notes were\
    \ not updated\n- Fix issue when fetching some records\n\n## v4.1.10\n\n- Added\
    \ documentation for domain BIND export\n- Fixed various errors in documentation\n\
    - Updated openapi specification\n- Fix errors when updating or creating records\
    \ with empty names\n\n## v4.1.9\n\n- Fix being unable to update the name on a\
    \ domain record\n- Fix for updating and deleting domain and template records\n\
    - Remove unused field from Vanity Nameserver create and update\n- Add functionality\
    \ to enable and disable domains\n\n## v4.1.8\n\n- Fix 500 error when updating\
    \ template records\n- Fix issue where domain and template ID on record responses\
    \ was returned as a string instead of an integer\n- Fix 500 error when supplying\
    \ invalid security token\n- Fix 500 error when updating or creating a domain with\
    \ null contacts or tags\n- Add documentation for `geoFailover` property on records.\n\
    - Performance improvements when creating domain records\n\n## v4.1.7\n\n- Performance\
    \ improvements when creating resources\n- Fix errors when fetching analytics for\
    \ the current day\n\n## v4.1.6\n\n- Updated validation for RP records to allow\
    \ mailbox to be specified without the domain name\n- Add support for skipLookup\
    \ parameter on ANAME records\n\n## v4.1.5\n\n- Fixed display of vanity nameservers\
    \ assigned to a domain\n- Fixed issue creating/updating IP Filters with an empty\
    \ continents collection\n\n## v4.1.4\n\n- Fixed issue with A, AAAA and ANAME records\
    \ in standard (round-robin) mode\n- Fixed documentation for vanity nameservers\n\
    \n## v4.1.3\n\n- Fixed issue with CNAME records in certain scenarios\n- Fixed\
    \ pagination perPage parameter\n\n## v4.1.2\n\n- Fixed issue with Sonar Check\
    \ IDs in Round-Robin Failover records\n- Improved documentation around Postman\
    \ Collection\n\n## v4.1.1\n\n- Added domain search endpoint at `/v4/search/domains`\n\
    - Updated documentation for absolute URLs and hostname used for URLs\n- Fixed\
    \ issue with Sonar Check IDs in domain records\n\n## v4.1.0\n\n- Added account\
    \ analytics endpoint at `/v4/analytics`\n- Added domain analytics endpoint at\
    \ `/v4/domains/{id}/analytics`\n- Updated example Postman pre-request script\n"
  title: Constellix DNS API
  version: 4.2.7
openapi: 3.1.0
paths:
  /analytics:
    get:
      description: "Retrieve query analytics for your account

        "
      operationId: listAnalytics
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/analytics"
          description: Retrieve query analytics for your account
        "401":
          $ref: "#/components/responses/Unauthorized"
      summary: Get Analytics
      tags:
        - Analytics
    parameters:
      - description:
          "The start date for analytics. This is in Ymd format, eg. 20220104
          for the 4th January 2022. It must be less than the end date. If not supplied,
          this is assumed to 2 weeks before the current date.

          "
        in: query
        name: start
        required: false
        schema:
          example: 20220114
          type: integer
      - description:
          "The end date for analytics. This is in Ymd format, eg. 20220104
          for the 4th January 2022. It must be more than the start date. If not supplied,
          this is assumed to be the current date.

          "
        in: query
        name: end
        required: false
        schema:
          example: 20220120
          type: integer
  /announcements:
    get:
      description: "A list of all announcements.

        "
      operationId: listAnnouncements
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: The announcements for this page
                    items:
                      $ref: "#/components/schemas/announcement"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: List of announcements
        "401":
          $ref: "#/components/responses/Unauthorized"
      summary: List Announcements
      tags:
        - Announcements
  /announcements/{id}:
    get:
      description: "Fetches a single announcement.

        "
      operationId: getAnnouncement
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/announcement"
          description: Fetch a single announcement
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Announcement
      tags:
        - Announcements
    parameters:
      - description: The ID of the announcement
        in: path
        name: id
        required: true
        schema:
          example: 3666
          type: integer
  /contactlists:
    get:
      description: "Fetches a paginated list of Contact Lists for the account.

        "
      operationId: listContactLists
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/contactlistwithoutemails"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: The list of Contact Lists
        "401":
          $ref: "#/components/responses/Unauthorized"
      summary: List Contact Lists
      tags:
        - Contact Lists
    post:
      description: "Creates a new Contact List

        "
      operationId: createContactList
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contactlist-createupdate"
      responses:
        "202":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The ID of the object
                        example: 2668228
                        type: integer
                      links:
                        properties:
                          self:
                            description: The URL for the new object
                            example: https://api.dns.constellix.com/v4/contactlists/2668228
                            format: url
                            type: string
                        type: object
                    type: object
          description: The new Contact List resource
          headers:
            Location:
              schema:
                description: The URL for the newly created object
                example: https://api.dns.constellix.com/v4/contactlists/2668228
                format: url
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Create Contact List
      tags:
        - Contact Lists
  /contactlists/{contactlist_id}:
    delete:
      description: Remove the Contact List.
      operationId: deleteContactList
      responses:
        "204":
          description: The Contact List was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete Contact List
      tags:
        - Contact Lists
    get:
      description: "Fetches a single Contact List for the account.

        "
      operationId: getContactList
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/contactlist"
          description: Fetch a Contact List
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Contact List
      tags:
        - Contact Lists
    parameters:
      - description: The ID of the Contact List
        in: path
        name: contactlist_id
        required: true
        schema:
          example: 2668228
          type: integer
    put:
      description:
        "Updates the Contact List object. Fields left out of the request
        will not be updated.

        "
      operationId: updateContactList
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contactlist-createupdate"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/contactlist"
          description: The updated Contact List resource
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Update Contact List
      tags:
        - Contact Lists
  /contactlists/{contactlist_id}/emails:
    get:
      description:
        "A list of all emails in the contact list. The list is paginated.

        "
      operationId: listContactListEmails
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: The emails for this page
                    items:
                      $ref: "#/components/schemas/contactlist_email"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: List of emails in the contactlist
        "401":
          $ref: "#/components/responses/Unauthorized"
      summary: List Email Addresses
      tags:
        - Contact Lists
    parameters:
      - description: The ID of the Contact List
        in: path
        name: id
        required: true
        schema:
          example: 2668228
          type: integer
    post:
      description: Adds an email to the contact list
      operationId: addContactListEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contactlist-email-createupdate"
      responses:
        "202":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The ID of the email address
                        example: 366246
                        type: integer
                      links:
                        properties:
                          self:
                            description: The URL for the new object
                            example: https://api.dns.constellix.com/contactlists/2668228/emails/36245
                            format: url
                            type: string
                        type: object
                    type: object
          description: The email address has been added
          headers:
            Location:
              schema:
                description: The URL for the newly created email
                example: https://api.dns.constellix.com/v4/contactlists/2668228/emails/36245
                format: url
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Add Email Address
      tags:
        - Contact Lists
  /contactlists/{contactlist_id}/emails/{id}:
    delete:
      description: Remove the Email Address from the contact list
      operationId: deleteContactListEmail
      responses:
        "204":
          description: The email address was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete Email Address
      tags:
        - Contact Lists
    get:
      description: "Fetches a single Email Address in a contact list

        "
      operationId: getContactListEmail
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/contactlist_email"
          description: Fetch an Email Address
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Email Address
      tags:
        - Contact Lists
    parameters:
      - description: The ID of the Contact List
        in: path
        name: contactlist_id
        required: true
        schema:
          example: 2668228
          type: integer
      - description: The ID of the email address
        in: path
        name: id
        required: true
        schema:
          example: 82648967
          type: integer
  /contactlists/{contactlist_id}/slack:
    get:
      description:
        "A list of all Slack webhooks in the contact list. The list is
        paginated.

        "
      operationId: listContactListSlackWebhooks
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: The webhooks for this page
                    items:
                      $ref: "#/components/schemas/contactlist_slack"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: List of Slack webhooks in the contactlist
        "401":
          $ref: "#/components/responses/Unauthorized"
      summary: List Slack Webhooks
      tags:
        - Contact Lists
    parameters:
      - description: The ID of the Contact List
        in: path
        name: id
        required: true
        schema:
          example: 2668228
          type: integer
    post:
      description: Adds a Slack webhook to the contact list
      operationId: createContactListSlackWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contactlist-slack-createupdate"
      responses:
        "202":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The ID of the Slack webhook
                        example: 366246
                        type: integer
                      links:
                        properties:
                          self:
                            description: The URL for the new object
                            example: https://api.dns.constellix.com/contactlists/2668228/slack/75225
                            format: url
                            type: string
                        type: object
                    type: object
          description: The Slack webhook has been added
          headers:
            Location:
              schema:
                description: The URL for the newly created Slack webhook
                example: https://api.dns.constellix.com/v4/contactlists/2668228/slack/75225
                format: url
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Create Slack Webhook
      tags:
        - Contact Lists
  /contactlists/{contactlist_id}/slack/{id}:
    delete:
      description: Remove the Slack webhook from the contact list
      operationId: deleteContactListSlackWebhook
      responses:
        "204":
          description: The webhook was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete Slack Webhook
      tags:
        - Contact Lists
    get:
      description: "Fetches a single Slack Webhook in a contact list

        "
      operationId: getContactListSlackWebhook
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/contactlist_slack"
          description: Fetch a Slack Webhook
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Slack Webhook
      tags:
        - Contact Lists
    parameters:
      - description: The ID of the Contact List
        in: path
        name: contactlist_id
        required: true
        schema:
          example: 2668228
          type: integer
      - description: The ID of the Slack Webhook
        in: path
        name: id
        required: true
        schema:
          example: 75225
          type: integer
  /contactlists/{contactlist_id}/teams:
    get:
      description:
        "A list of all MS Teams webhooks in the contact list. The list
        is paginated.

        "
      operationId: listContactListTeams
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: The webhooks for this page
                    items:
                      $ref: "#/components/schemas/contactlist_teams"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: List of MS Teams webhooks in the contactlist
        "401":
          $ref: "#/components/responses/Unauthorized"
      summary: List MS Teams Webhooks
      tags:
        - Contact Lists
    parameters:
      - description: The ID of the Contact List
        in: path
        name: id
        required: true
        schema:
          example: 2668228
          type: integer
    post:
      description: Adds a Microsoft Teams webhook to the contact list
      operationId: createContactListTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contactlist-teams-createupdate"
      responses:
        "202":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The ID of the MS Teams webhook
                        example: 366246
                        type: integer
                      links:
                        properties:
                          self:
                            description: The URL for the new object
                            example: https://api.dns.constellix.com/contactlists/2668228/teams/83267
                            format: url
                            type: string
                        type: object
                    type: object
          description: The Microsoft Teams webhook has been added
          headers:
            Location:
              schema:
                description: The URL for the newly created MS Teams webhook
                example: https://api.dns.constellix.com/v4/contactlists/2668228/teams/83267
                format: url
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Create MS Teams Webhook
      tags:
        - Contact Lists
  /contactlists/{contactlist_id}/teams/{id}:
    delete:
      description: Remove the Microsoft Teams webhook from the contact list
      operationId: deleteContactListTeam
      responses:
        "204":
          description: The webhook was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete MS Teams Webhook
      tags:
        - Contact Lists
    get:
      description: "Fetches a single Microsoft Teams Webhook in a contact list

        "
      operationId: getContactListTeam
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/contactlist_teams"
          description: Fetch an MS Teams Webhook
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get MS Teams Webhook
      tags:
        - Contact Lists
    parameters:
      - description: The ID of the Contact List
        in: path
        name: contactlist_id
        required: true
        schema:
          example: 2668228
          type: integer
      - description: The ID of the MS Teams Webhook
        in: path
        name: id
        required: true
        schema:
          example: 83267
          type: integer
  /domains:
    get:
      description:
        "A list of all domains in the account. The list is paginated and
        can also be searched and filtered.

        "
      operationId: listDomains
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: The domains for this page
                    items:
                      $ref: "#/components/schemas/domain"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: List of domains in your account
        "401":
          $ref: "#/components/responses/Unauthorized"
      summary: List Domains
      tags:
        - Domains
    post:
      description: Creates a new domain in your account.
      operationId: createDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/domain-create"
      responses:
        "202":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The ID of the object
                        example: 366246
                        type: integer
                      links:
                        properties:
                          self:
                            description: The URL for the new object
                            example: https://api.dns.constellix.com/v4/domains/366246
                            format: url
                            type: string
                        type: object
                    type: object
          description: The domain has been accepted for creation
          headers:
            Location:
              schema:
                description: The URL for the newly created domain
                example: https://api.dns.constellix.com/v4/domains/366246
                format: url
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Create Domain
      tags:
        - Domains
  /domains/{domain_id}:
    delete:
      description: Remove the domain and all records for it
      operationId: deleteDomain
      responses:
        "204":
          description: The domain was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete Domain
      tags:
        - Domains
    get:
      description:
        "Fetches a single domain in your account. This will contain all
        the details of the domain

        and links to the records.

        "
      operationId: getDomain
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/domain"
          description: Fetch a single domain from your account
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Domain
      tags:
        - Domains
    parameters:
      - description: The ID of the domain object
        in: path
        name: id
        required: true
        schema:
          example: 366246
          type: integer
    put:
      description:
        "Updates the domain object. Fields left out of the request will
        not be updated.

        "
      operationId: updateDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/domain-update"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/domain"
          description: The updated domain resource
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Update Domain
      tags:
        - Domains
  /domains/{domain_id}/analytics:
    get:
      description: "Retrieve query analytics for the domain

        "
      operationId: getDomainAnalytics
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/domainanalytics"
          description: Retrieve query analytics for the domain
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Analytics
      tags:
        - Domains
    parameters:
      - description: The ID of the domain object
        in: path
        name: id
        required: true
        schema:
          example: 366246
          type: integer
      - description:
          "The start date for analytics. This is in Ymd format, eg. 20220104
          for the 4th January 2022. It must be less than the end date. If not supplied,
          this is assumed to 2 weeks before the current date.

          "
        in: query
        name: start
        required: false
        schema:
          example: 20220114
          type: integer
      - description:
          "The end date for analytics. This is in Ymd format, eg. 20220104
          for the 4th January 2022. It must be more than the start date. If not supplied,
          this is assumed to be the current date.

          "
        in: query
        name: end
        required: false
        schema:
          example: 20220120
          type: integer
  /domains/{domain_id}/bind:
    get:
      description: "Exports the entire domain in the BIND format.

        "
      operationId: getDomainBindExport
      responses:
        "200":
          content:
            text/plain:
              example:
                ";ID 1234512345-1-123123\n@ IN 43200 SOA ns11.constellix.com.\
                \ dns.constellix.com. (\n;soa start 233982fb-31c6-42e9-a0bf-1c7323a3f7af\n\
                2015010202\n;soa end 233982fb-31c6-42e9-a0bf-1c7323a3f7af\n43200\n\
                3600\n1209600\n180\n)\n\n@ \t IN 86400 NS \tns11.constellix.com\"\
                .\n@ \t IN 86400 NS \tns21.constellix.com\".\n\n;SOA END\ntest\t IN\
                \ \t3600\t A \t192.0.2.42\n"
              schema:
                type: string
          description: Export of the domain in BIND format
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Bind Export
      tags:
        - Domains
    parameters:
      - description: The ID of the domain object
        in: path
        name: id
        required: true
        schema:
          example: 366246
          type: integer
  /domains/{domain_id}/history:
    get:
      description:
        "Fetches a history of the domain to allow you to see when it has
        changed.

        "
      operationId: listDomainHistory
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: The domain history for this page
                    items:
                      allOf:
                        - $ref: "#/components/schemas/domainhistory"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: Fetch the list of history for the domain
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get History
      tags:
        - Domain History
    parameters:
      - description: The ID of the domain object
        in: path
        name: domain_id
        required: true
        schema:
          example: 366246
          type: integer
  /domains/{domain_id}/history/{version}:
    get:
      description: "Fetches a single history version for the domain.

        "
      operationId: getDomainHistoryVersion
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/domainhistory"
          description: Fetch a history version for the domain
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get History Version
      tags:
        - Domain History
    parameters:
      - description: The ID of the domain object
        in: path
        name: domain_id
        required: true
        schema:
          example: 366246
          type: integer
      - description: The version number of the domain
        in: path
        name: version
        required: true
        schema:
          example: 4
          type: integer
  /domains/{domain_id}/history/{version}/apply:
    parameters:
      - description: The ID of the domain object
        in: path
        name: domain_id
        required: true
        schema:
          example: 366246
          type: integer
      - description: The version number of the domain
        in: path
        name: version
        required: true
        schema:
          example: 4
          type: integer
    post:
      description:
        "Update the domain to the specified version in the history of the
        domain

        "
      operationId: applyDomainHistory
      responses:
        "204":
          description: The historical version has been applied
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Apply History
      tags:
        - Domain History
  /domains/{domain_id}/history/{version}/snapshot:
    parameters:
      - description: The ID of the domain object
        in: path
        name: domain_id
        required: true
        schema:
          example: 366246
          type: integer
      - description: The version number of the domain
        in: path
        name: version
        required: true
        schema:
          example: 4
          type: integer
    post:
      description:
        "Snapshot this history version. Snapshots are persisted and kept
        until they are deleted by the user.

        "
      operationId: snapshotDomainHistory
      responses:
        "202":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      links:
                        properties:
                          self:
                            description: The URL for the new object
                            example: https://api.dns.constellix.com/v4/domains/366246/snapshots/4
                            format: url
                            type: string
                        type: object
                      version:
                        description: The version of the snapshot
                        example: 4
                        type: integer
                    type: object
          description: The snapshot has accepted for creation.
          headers:
            Location:
              schema:
                description: The URL for the newly created snapshot
                example: https://api.constellix.com/v4/domains/366246/snapshots/4
                format: url
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Snapshot History
      tags:
        - Domain History
  /domains/{domain_id}/nameservers:
    get:
      description:
        "Fetches the current nameservers the domain is using. This may
        be different from the ones assigned to it by Constellix.

        "
      operationId: getDomainNameservers
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      domain:
                        $ref: "#/components/schemas/simple-domain"
                      links:
                        properties:
                          domain:
                            description: The URL for the domain
                            example: https://api.dns.constellix.com/v4/domains/366246
                            type: string
                          self:
                            description: The URL for these nameservers
                            example: https://api.dns.constellix.com/v4/domains/366246/nameservers
                            type: string
                        type: object
                      nameservers:
                        example:
                          - ns1.example.com
                          - ns2.example.com
                        items:
                          type: string
                        type: array
                    type: object
          description: Fetch the nameservers for the domain
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Nameservers
      tags:
        - Domains
    parameters:
      - description: The ID of the domain object
        in: path
        name: id
        required: true
        schema:
          example: 366246
          type: integer
  /domains/{domain_id}/records:
    get:
      description:
        "Fetches a paginated list of all records for the domain. This list
        can be ordered and filtered.

        "
      operationId: listDomainRecords
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: The records for this page
                    items:
                      allOf:
                        - discriminator:
                            mapping:
                              "a": "#/components/schemas/a"
                              "aaaa": "#/components/schemas/aaaa"
                              "cname": "#/components/schemas/cname"
                              "aname": "#/components/schemas/aname"
                              "caa": "#/components/schemas/caa"
                              "cert": "#/components/schemas/cert"
                              "hinfo": "#/components/schemas/hinfo"
                              "mx": "#/components/schemas/mx"
                              "http": "#/components/schemas/http"
                              "naptr": "#/components/schemas/naptr"
                              "ns": "#/components/schemas/ns"
                              "ptr": "#/components/schemas/ptr"
                              "rp": "#/components/schemas/rp"
                              "spf": "#/components/schemas/spf"
                              "srv": "#/components/schemas/srv"
                              "txt": "#/components/schemas/txt"
                            propertyName: type
                          oneOf:
                            - $ref: "#/components/schemas/a"
                            - $ref: "#/components/schemas/aaaa"
                            - $ref: "#/components/schemas/cname"
                            - $ref: "#/components/schemas/aname"
                            - $ref: "#/components/schemas/caa"
                            - $ref: "#/components/schemas/cert"
                            - $ref: "#/components/schemas/hinfo"
                            - $ref: "#/components/schemas/mx"
                            - $ref: "#/components/schemas/naptr"
                            - $ref: "#/components/schemas/ns"
                            - $ref: "#/components/schemas/rp"
                            - $ref: "#/components/schemas/ptr"
                            - $ref: "#/components/schemas/txt"
                            - $ref: "#/components/schemas/spf"
                            - $ref: "#/components/schemas/srv"
                            - $ref: "#/components/schemas/http"
                        - properties:
                            domain:
                              $ref: "#/components/schemas/simple-domain"
                            links:
                              description: Links for the domain record
                              properties:
                                self:
                                  example: https://api.dns.constellix.com/v4/domains/366246/records/732673
                                  format: url
                                  type: string
                              type: object
                          type: object
                      type: object
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: A list of records for the domain
      summary: List Records
      tags:
        - Domain Records
    parameters:
      - description: The ID of the domain object
        in: path
        name: domain_id
        required: true
        schema:
          example: 366246
          type: integer
    post:
      description: Creates a new record for the domain
      operationId: createDomainRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/record-create"
      responses:
        "202":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The ID of the object
                        example: 732673
                        type: integer
                      links:
                        properties:
                          self:
                            description: The URL for the new object
                            example: https://api.dns.constellix.com/v4/domains/366246/records/732673
                            format: url
                            type: string
                        type: object
                    type: object
          description: The record has been accepted for creation
          headers:
            Location:
              schema:
                description: The URL for the newly created record
                example: https://api.constellix.com/v4/domains/366246/records/732673
                format: url
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Create Record
      tags:
        - Domain Records
  /domains/{domain_id}/records/{id}:
    delete:
      description: Remove the record
      operationId: deleteDomainRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/record-update"
      responses:
        "204":
          description: The record was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete Record
      tags:
        - Domain Records
    get:
      description: "Fetches a single record for the domain.

        "
      operationId: getDomainRecord
      responses:
        "200":
          content:
            application/json:
              schema:
                discriminator:
                  mapping:
                    "a": "#/components/schemas/a"
                    "aaaa": "#/components/schemas/aaaa"
                    "cname": "#/components/schemas/cname"
                    "aname": "#/components/schemas/aname"
                    "caa": "#/components/schemas/caa"
                    "cert": "#/components/schemas/cert"
                    "hinfo": "#/components/schemas/hinfo"
                    "mx": "#/components/schemas/mx"
                    "http": "#/components/schemas/http"
                    "naptr": "#/components/schemas/naptr"
                    "ns": "#/components/schemas/ns"
                    "ptr": "#/components/schemas/ptr"
                    "rp": "#/components/schemas/rp"
                    "spf": "#/components/schemas/spf"
                    "srv": "#/components/schemas/srv"
                    "txt": "#/components/schemas/txt"
                  propertyName: type
                oneOf:
                  - $ref: "#/components/schemas/a"
                  - $ref: "#/components/schemas/aaaa"
                  - $ref: "#/components/schemas/cname"
                  - $ref: "#/components/schemas/aname"
                  - $ref: "#/components/schemas/caa"
                  - $ref: "#/components/schemas/cert"
                  - $ref: "#/components/schemas/hinfo"
                  - $ref: "#/components/schemas/mx"
                  - $ref: "#/components/schemas/naptr"
                  - $ref: "#/components/schemas/ns"
                  - $ref: "#/components/schemas/rp"
                  - $ref: "#/components/schemas/ptr"
                  - $ref: "#/components/schemas/txt"
                  - $ref: "#/components/schemas/spf"
                  - $ref: "#/components/schemas/srv"
                  - $ref: "#/components/schemas/http"
          description: Fetch a record for the domain
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Record
      tags:
        - Domain Records
    parameters:
      - description: The ID of the domain object
        in: path
        name: domain_id
        required: true
        schema:
          example: 366246
          type: integer
      - description: The ID of the record
        in: path
        name: id
        required: true
        schema:
          example: 732673
          type: integer
    put:
      description:
        "Updates the record object. Fields left out of the request will
        not be updated.


        If the mode is updated and value is not provided with the request, the current
        value will be validated alongside the new mode. If it is invalid, a 422 response
        will be issued.

        "
      operationId: updateDomainRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/record-update"
      responses:
        "200":
          content:
            application/json:
              schema:
                discriminator:
                  mapping:
                    "a": "#/components/schemas/a"
                    "aaaa": "#/components/schemas/aaaa"
                    "cname": "#/components/schemas/cname"
                    "aname": "#/components/schemas/aname"
                    "caa": "#/components/schemas/caa"
                    "cert": "#/components/schemas/cert"
                    "hinfo": "#/components/schemas/hinfo"
                    "mx": "#/components/schemas/mx"
                    "http": "#/components/schemas/http"
                    "naptr": "#/components/schemas/naptr"
                    "ns": "#/components/schemas/ns"
                    "ptr": "#/components/schemas/ptr"
                    "rp": "#/components/schemas/rp"
                    "spf": "#/components/schemas/spf"
                    "srv": "#/components/schemas/srv"
                    "txt": "#/components/schemas/txt"
                  propertyName: type
                oneOf:
                  - $ref: "#/components/schemas/a"
                  - $ref: "#/components/schemas/aaaa"
                  - $ref: "#/components/schemas/cname"
                  - $ref: "#/components/schemas/aname"
                  - $ref: "#/components/schemas/caa"
                  - $ref: "#/components/schemas/cert"
                  - $ref: "#/components/schemas/hinfo"
                  - $ref: "#/components/schemas/mx"
                  - $ref: "#/components/schemas/naptr"
                  - $ref: "#/components/schemas/ns"
                  - $ref: "#/components/schemas/rp"
                  - $ref: "#/components/schemas/ptr"
                  - $ref: "#/components/schemas/txt"
                  - $ref: "#/components/schemas/spf"
                  - $ref: "#/components/schemas/srv"
                  - $ref: "#/components/schemas/http"
          description: The updated record resource
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Update Record
      tags:
        - Domain Records
  /domains/{domain_id}/snapshots:
    get:
      description:
        "Fetches saved snapshots of the history the domain to allow you
        to see when it has changed.

        "
      operationId: listDomainSnapshots
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: The domain snapshots for this page
                    items:
                      allOf:
                        - $ref: "#/components/schemas/domainsnapshot"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: Fetch the list of snapshots for the domain
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Snapshots
      tags:
        - Domain Snapshots
    parameters:
      - description: The ID of the domain object
        in: path
        name: domain_id
        required: true
        schema:
          example: 366246
          type: integer
  /domains/{domain_id}/snapshots/{version}:
    delete:
      description: Remove the snapshot.
      operationId: deleteDomainSnapshot
      responses:
        "204":
          description: The snapshot was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete Snapshot
      tags:
        - Domain Snapshots
    get:
      description: "Fetches a single snapshot for the domain.

        "
      operationId: getDomainSnapshot
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/domainsnapshot"
          description: Fetch a snapshot for the domain
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Snapshot
      tags:
        - Domain Snapshots
    parameters:
      - description: The ID of the domain object
        in: path
        name: domain_id
        required: true
        schema:
          example: 366246
          type: integer
      - description: The version number of the snapshot
        in: path
        name: version
        required: true
        schema:
          example: 4
          type: integer
  /domains/{domain_id}/snapshots/{version}/apply:
    parameters:
      - description: The ID of the domain object
        in: path
        name: domain_id
        required: true
        schema:
          example: 366246
          type: integer
      - description: The snapshot version of the domain
        in: path
        name: version
        required: true
        schema:
          example: 4
          type: integer
    post:
      description:
        "Update the domain to the specified snapshot in the history of
        the domain

        "
      operationId: applyDomainSnapshot
      responses:
        "204":
          description: The snapshot has been applied
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Apply Snapshot
      tags:
        - Domain Snapshots
  /geoproximities:
    get:
      description:
        "Fetches a paginated list of Geo Proximity locations for the account.

        "
      operationId: listGeoProximityLocations
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/geoproximity"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: The list of Geo Proximity locations
        "401":
          $ref: "#/components/responses/Unauthorized"
      summary: List Locations
      tags:
        - Geo Proximity Locations
    post:
      description: "Creates a new Geo Proximity Location.


        Only name, longitude and latitude are required and used, the other

        properties are just for information.

        "
      operationId: createGeoProximityLocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/geoproximity-createupdate"
      responses:
        "202":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The ID of the object
                        example: 4367769
                        type: integer
                      links:
                        properties:
                          self:
                            description: The URL for the new object
                            example: https://api.dns.constellix.com/v4/geoproximities/4367769
                            format: url
                            type: string
                        type: object
                    type: object
          description: The new Geo Proximity location resource
          headers:
            Location:
              schema:
                description: The URL for the newly created object
                example: https://api.dns.constellix.com/v4/geoproximities/4367769
                format: url
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Create Location
      tags:
        - Geo Proximity Locations
  /geoproximities/{id}:
    delete:
      description: Remove the Geo Proximity Location.
      operationId: deleteGeoProximityLocation
      responses:
        "204":
          description: The Geo Proximity location was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete Location
      tags:
        - Geo Proximity Locations
    get:
      description: "Fetches a single Geo Proximity location for the account.

        "
      operationId: getGeoProximityLocation
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/geoproximity"
          description: Fetch a Geo Proximity location
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Location
      tags:
        - Geo Proximity Locations
    parameters:
      - description: The ID of the Geo Proximity
        in: path
        name: id
        required: true
        schema:
          example: 4367769
          type: integer
    put:
      description:
        "Updates the Geo Proximity Location object. Fields left out of
        the request will not be updated.

        Only name, longitude and latitude are required and used, the other properties
        are just for information.

        "
      operationId: updateGeoProximityLocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/geoproximity-createupdate"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/geoproximity"
          description: The updated Geo Proximity location resource
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Update Location
      tags:
        - Geo Proximity Locations
  /ipfilters:
    get:
      description: "Fetches a paginated list of IP filters for the account.

        "
      operationId: listIPFilters
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/ipfilter"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: The list of IP filters
        "401":
          $ref: "#/components/responses/Unauthorized"
      summary: List IP Filters
      tags:
        - IP Filters
    post:
      description: "Creates a new IP filter.

        "
      operationId: createIPFilter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ipfilter-createupdate"
      responses:
        "202":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The ID of the object
                        example: 47345837
                        type: integer
                      links:
                        properties:
                          self:
                            description: The URL for the new object
                            example: https://api.dns.constellix.com/v4/ipfilters/47345837
                            format: url
                            type: string
                        type: object
                    type: object
          description: The new IPFilter resource
          headers:
            Location:
              schema:
                description: The URL for the newly created object
                example: https://api.dns.constellix.com/v4/ipfilters/47345837
                format: url
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Create IP Filter
      tags:
        - IP Filters
  /ipfilters/{id}:
    delete:
      description: Remove the IP Filter.
      operationId: deleteIPFilter
      responses:
        "204":
          description: The IP Filter was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete IP Filter
      tags:
        - IP Filters
    get:
      description: "Fetches a single IP Filter for the account.

        "
      operationId: getIPFilter
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/ipfilter"
          description: Fetch an IP Filter
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get IP Filter
      tags:
        - IP Filters
    parameters:
      - description: The ID of the IP Filter
        in: path
        name: id
        required: true
        schema:
          example: 47345837
          type: integer
    put:
      description:
        "Updates the IP Filter object. Fields left out of the request will
        not be updated.

        "
      operationId: updateIPFilter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ipfilter-createupdate"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/ipfilter"
          description: The updated IP filter resource
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Update IP Filter
      tags:
        - IP Filters
  /ping:
    get:
      description:
        "Returns basic information about the API and the current user.
        This will include your IP address, the API timestamp and the version.

        "
      operationId: getPing
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ping"
          description: API Ping response
      security: []
      summary: Ping
      tags:
        - General
  /pools:
    get:
      description:
        "Returns a paginated list of pools. This includes all types of
        pool.

        "
      operationId: listPools
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: The pools for this page
                    items:
                      $ref: "#/components/schemas/poolindex"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: List of pools
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: List Pools
      tags:
        - Pools
    post:
      description: "Creates a new A, AAAA or CNAME pool.

        "
      operationId: createPool
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pool-createupdate"
      responses:
        "202":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The ID of the object
                        example: 7665
                        type: integer
                      links:
                        properties:
                          self:
                            description: The URL for the new object
                            example: https://api.dns.constellix.com/v4/pools/A/7665
                            format: url
                            type: string
                        type: object
                    type: object
          description: The new Pool resource
          headers:
            Location:
              schema:
                description: The URL for the newly created object
                example: https://api.dns.constellix.com/v4/pools/A/7665
                format: url
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Create Pool
      tags:
        - Pools
  /pools/{type}/{id}:
    delete:
      description: Remove the pool.
      operationId: deletePool
      responses:
        "204":
          description: The pool was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Delete Pool
      tags:
        - Pools
    get:
      description: "Fetches a single Pool for the account.

        "
      operationId: getPool
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/pool"
          description: Fetch a pool
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Pool
      tags:
        - Pools
    parameters:
      - description: The type of pool
        in: path
        name: type
        required: true
        schema:
          enum:
            - A
            - AAAA
            - CNAME
          type: string
      - description: The ID of the pool
        in: path
        name: id
        required: true
        schema:
          example: 7665
          type: integer
    put:
      description:
        "Updates the pool object. Fields left out of the request will not
        be updated.

        "
      operationId: updatePool
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pool-createupdate"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/pool"
          description: The updated pool resource
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Update Pool
      tags:
        - Pools
  /search/domains:
    get:
      description: "Search for domains within your account

        "
      operationId: searchDomains
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: The search results for this page
                    items:
                      $ref: "#/components/schemas/domainsearchresult"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: Search for domains within your account
        "401":
          $ref: "#/components/responses/Unauthorized"
      summary: Search Domains
      tags:
        - Search
    parameters:
      - description:
          "The domain name to search for. Wildcards at the start and end\
          \ of the name are supported. These can be provided using an asterisk (`*`).\
          \ For example:\n\n - `example.com` - Search exactly for example.com\n - `*.com`\
          \ - Search for domains ending in .com\n - `example*` - Search for domains\
          \ beginning with example\n - `*example*` - Search for domains containing example\n"
        in: query
        name: name
        required: true
        schema:
          example: "*example"
          type: string
  /tags:
    get:
      description: "Fetches a paginated list ofTags for the account.

        "
      operationId: listTags
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/tag"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: The list of Tags
        "401":
          $ref: "#/components/responses/Unauthorized"
      summary: List Tags
      tags:
        - Tags
    post:
      description: "Creates a new Tag

        "
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tag-createupdate"
      responses:
        "202":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The ID of the object
                        example: 824
                        type: integer
                      links:
                        properties:
                          self:
                            description: The URL for the new object
                            example: https://api.dns.constellix.com/v4/tags/824
                            format: url
                            type: string
                        type: object
                    type: object
          description: The new Tag resource
          headers:
            Location:
              schema:
                description: The URL for the newly created object
                example: https://api.dns.constellix.com/v4/tags/824
                format: url
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Create Tag
      tags:
        - Tags
  /tags/{id}:
    delete:
      description: Remove the Tag.
      operationId: deleteTag
      responses:
        "204":
          description: The Tag was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete Tag
      tags:
        - Tags
    get:
      description: "Fetches a single Tag for the account.

        "
      operationId: getTag
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/tag"
          description: Fetch a Tag
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Tag
      tags:
        - Tags
    parameters:
      - description: The ID of the Tag
        in: path
        name: id
        required: true
        schema:
          example: 824
          type: integer
    put:
      description:
        "Updates the Tag object. Fields left out of the request will not
        be updated.

        "
      operationId: updateTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tag-createupdate"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/tag"
          description: The updated Tag resource
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Update Tag
      tags:
        - Tags
  /templates:
    get:
      description: "Returns a paginated list of domain templates.

        "
      operationId: listTemplates
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: The records for this page
                    items:
                      $ref: "#/components/schemas/template"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: List of templates
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: List templates
      tags:
        - Templates
    post:
      description: "Adds a new template.

        "
      operationId: createTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/template-createupdate"
      responses:
        "202":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The ID of the object
                        example: 83675283
                        type: integer
                      links:
                        properties:
                          self:
                            description: The URL for the new object
                            example: https://api.dns.constellix.com/v4/templates/83675283
                            format: url
                            type: string
                        type: object
                    type: object
          description: The template has been created successfully
          headers:
            Location:
              schema:
                description: The URL for the newly created template
                example: https://api.dns.constellix.com/v4/templates/83675283
                format: url
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Create Template
      tags:
        - Templates
  /templates/{template_id}:
    delete:
      description: Remove the template and all records for it
      operationId: deleteTemplate
      responses:
        "204":
          description: The template was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete Template
      tags:
        - Templates
    get:
      description: "Retrieves a single template.

        "
      operationId: getTemplate
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/template"
          description: Fetch a single template from your account
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Template
      tags:
        - Templates
    parameters:
      - description: The ID of the template object
        in: path
        name: id
        required: true
        schema:
          example: 42
          type: integer
    put:
      description:
        "Updates the properties on the template. Properties that aren't
        included in the request will not be updated.

        "
      operationId: updateTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/template-createupdate"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/template"
          description: The template has been updated successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Update Template
      tags:
        - Templates
  /templates/{template_id}/records:
    get:
      description:
        "Fetches a paginated list of all records for the template. This
        list can be ordered and filtered.

        "
      operationId: listTemplateRecords
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: The records for this page
                    items:
                      allOf:
                        - $ref: "#/components/schemas/templaterecord"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: A list of records for the template
      summary: List Records
      tags:
        - Template Records
    parameters:
      - description: The ID of the template object
        in: path
        name: template_id
        required: true
        schema:
          example: 83675283
          type: integer
    post:
      description: Creates a new record for the template
      operationId: createTemplateRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/record-create"
      responses:
        "202":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The ID of the object
                        example: 732673
                        type: integer
                      links:
                        properties:
                          self:
                            description: The URL for the new object
                            example: https://api.dns.constellix.com/v4/templates/83675283/records/732673
                            format: url
                            type: string
                        type: object
                    type: object
          description: The record has been accepted for creation
          headers:
            Location:
              schema:
                description: The URL for the newly created record
                example: https://api.constellix.com/v4/templates/83675283/records/732673
                format: url
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Create Record
      tags:
        - Template Records
  /templates/{template_id}/records/{id}:
    delete:
      description: Remove the record.
      operationId: deleteTemplateRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/record-update"
      responses:
        "204":
          description: The record was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete Record
      tags:
        - Template Records
    get:
      description: "Fetches a single record for the template.

        "
      operationId: getTemplateRecord
      responses:
        "200":
          content:
            application/json:
              schema:
                discriminator:
                  mapping:
                    "a": "#/components/schemas/a"
                    "aaaa": "#/components/schemas/aaaa"
                    "cname": "#/components/schemas/cname"
                    "aname": "#/components/schemas/aname"
                    "caa": "#/components/schemas/caa"
                    "cert": "#/components/schemas/cert"
                    "hinfo": "#/components/schemas/hinfo"
                    "mx": "#/components/schemas/mx"
                    "http": "#/components/schemas/http"
                    "naptr": "#/components/schemas/naptr"
                    "ns": "#/components/schemas/ns"
                    "ptr": "#/components/schemas/ptr"
                    "rp": "#/components/schemas/rp"
                    "spf": "#/components/schemas/spf"
                    "srv": "#/components/schemas/srv"
                    "txt": "#/components/schemas/txt"
                  propertyName: type
                oneOf:
                  - $ref: "#/components/schemas/a"
                  - $ref: "#/components/schemas/aaaa"
                  - $ref: "#/components/schemas/cname"
                  - $ref: "#/components/schemas/aname"
                  - $ref: "#/components/schemas/caa"
                  - $ref: "#/components/schemas/cert"
                  - $ref: "#/components/schemas/hinfo"
                  - $ref: "#/components/schemas/mx"
                  - $ref: "#/components/schemas/naptr"
                  - $ref: "#/components/schemas/ns"
                  - $ref: "#/components/schemas/rp"
                  - $ref: "#/components/schemas/ptr"
                  - $ref: "#/components/schemas/txt"
                  - $ref: "#/components/schemas/spf"
                  - $ref: "#/components/schemas/srv"
                  - $ref: "#/components/schemas/http"
          description: Fetch a record for the template
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Record
      tags:
        - Template Records
    parameters:
      - description: The ID of the template object
        in: path
        name: template_id
        required: true
        schema:
          example: 83675283
          type: integer
      - description: The ID of the record
        in: path
        name: id
        required: true
        schema:
          example: 732673
          type: integer
    put:
      description:
        "Updates the record object. Fields left out of the request will
        not be updated.


        If the mode is updated and value is not provided with the request, the current
        value will be validated alongside the new mode. If it is invalid, a 422 response
        will be issued.

        "
      operationId: updateTemplateRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/record-update"
      responses:
        "200":
          content:
            application/json:
              schema:
                discriminator:
                  mapping:
                    "a": "#/components/schemas/a"
                    "aaaa": "#/components/schemas/aaaa"
                    "cname": "#/components/schemas/cname"
                    "aname": "#/components/schemas/aname"
                    "caa": "#/components/schemas/caa"
                    "cert": "#/components/schemas/cert"
                    "hinfo": "#/components/schemas/hinfo"
                    "mx": "#/components/schemas/mx"
                    "http": "#/components/schemas/http"
                    "naptr": "#/components/schemas/naptr"
                    "ns": "#/components/schemas/ns"
                    "ptr": "#/components/schemas/ptr"
                    "rp": "#/components/schemas/rp"
                    "spf": "#/components/schemas/spf"
                    "srv": "#/components/schemas/srv"
                    "txt": "#/components/schemas/txt"
                  propertyName: type
                oneOf:
                  - $ref: "#/components/schemas/a"
                  - $ref: "#/components/schemas/aaaa"
                  - $ref: "#/components/schemas/cname"
                  - $ref: "#/components/schemas/aname"
                  - $ref: "#/components/schemas/caa"
                  - $ref: "#/components/schemas/cert"
                  - $ref: "#/components/schemas/hinfo"
                  - $ref: "#/components/schemas/mx"
                  - $ref: "#/components/schemas/naptr"
                  - $ref: "#/components/schemas/ns"
                  - $ref: "#/components/schemas/rp"
                  - $ref: "#/components/schemas/ptr"
                  - $ref: "#/components/schemas/txt"
                  - $ref: "#/components/schemas/spf"
                  - $ref: "#/components/schemas/srv"
                  - $ref: "#/components/schemas/http"
          description: The updated record resource
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Update Record
      tags:
        - Template Records
  /vanitynameservers:
    get:
      description:
        "Fetches a paginated list of Vanity Nameservers for the account.

        "
      operationId: listVanityNameservers
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/vanitynameserver"
                    type: array
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
          description: The list of Vanity Nameservers
        "401":
          $ref: "#/components/responses/Unauthorized"
      summary: List Nameservers
      tags:
        - Vanity Nameservers
    post:
      description: "Creates a new Vanity Nameserver

        "
      operationId: createVanityNameserver
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/vanitynameserver-create"
      responses:
        "202":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The ID of the object
                        example: 82648967
                        type: integer
                      links:
                        properties:
                          self:
                            description: The URL for the new object
                            example: https://api.dns.constellix.com/v4/vanitynameservers/82648967
                            format: url
                            type: string
                        type: object
                    type: object
          description: The new Vanity Nameserver resource
          headers:
            Location:
              schema:
                description: The URL for the newly created object
                example: https://api.dns.constellix.com/v4/vanitynameservers/82648967
                format: url
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Create Nameserver
      tags:
        - Vanity Nameservers
  /vanitynameservers/{id}:
    delete:
      description: Remove the Vanity Nameserver.
      operationId: deleteVanityNameserver
      responses:
        "204":
          description: The Vanity Nameserver was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete Nameserver
      tags:
        - Vanity Nameservers
    get:
      description: "Fetches a single Vanity Nameserver for the account.

        "
      operationId: getVanityNameserver
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/vanitynameserver"
          description: Fetch a Vanity Nameserver
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Nameserver
      tags:
        - Vanity Nameservers
    parameters:
      - description: The ID of the Vanity Nameserver
        in: path
        name: id
        required: true
        schema:
          example: 82648967
          type: integer
    put:
      description:
        "Updates the Vanity Nameserver object. Fields left out of the request
        will not be updated.

        "
      operationId: updateVanityNameserver
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/vanitynameserver-update"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/vanitynameserver"
          description: The updated Vanity Nameserver resource
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      summary: Update Nameserver
      tags:
        - Vanity Nameservers
security:
  - http:
      - read
      - write
servers:
  - url: https://api.dns.constellix.com/v4
tags:
  - description: Endpoints that don't belong in other categories
    name: General
  - description: Endpoints for managing domains
    name: Domains
  - description: Endpoints for managing domain history
    name: Domain History
  - description: Endpoints for managing domain snapshots
    name: Domain Snapshots
  - description: Endpoints for managing records on domains
    name: Domain Records
  - description: Endpoints for managing templates
    name: Templates
  - description: Endpoints for managing records in templates
    name: Template Records
  - description: Endpoints for managing IPV4 and IPV6 pools
    name: Pools
  - description: Endpoints for managing IP Filters
    name: IP Filters
  - description: Endpoints for managing Geo Proximity locations
    name: Geo Proximity Locations
  - description: Endpoints for managing Vanity Nameservers
    name: Vanity Nameservers
  - description: Endpoints for managing Contact Lists
    name: Contact Lists
  - description: Endpoints for managing tags
    name: Tags
  - description: Endpoints for viewing announcements
    name: Announcements
  - description: Endpoint for viewing account analytics
    name: Analytics
  - description: Endpoint for searching resources
    name: Search
