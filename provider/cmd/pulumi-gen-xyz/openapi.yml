openapi: 3.0.2
info:
  title: Constellix DNS API
  description: >
    REST API for interacting with Constellix DNS services.


    # Overview


    Welcome to the Constellix REST API. This API allows you to manage your
    Constellix DNS services. You can add, remove and update domains, records,
    templates and more.


    This documentation details all the API endpoints, resource types and
    contains all the information to help you to use the API.


    # Using the API


    ## Making Requests


    The API is a REST API and supports common HTTP verbs of GET, POST, PUT and
    DELETE. In general:


    - **GET** - Retrieve a resource (or resources) from the API

    - **POST** - Create a new resource, or update an existing resource

    - **PUT** - Update an existing resource

    - **DELETE** - Delete a resource



    Please note that partial data is allowed for PUT requests, only the fields
    provided in the request will be updated. You may also perform this request
    using `POST` or `PATCH`.



    Most request endpoints are authenticated and request the `Authorization:
    Bearer` header to be provided. More details are in the [authentication
    section](#section/Authentication).


    The API uses standard HTTP response codes, 2xx means the request was
    successful, 3xx is a redirection, 4xx is a client error and 5xx is a server
    error.


    ## Formats


    The API supports `application/json` content-type and accept headers. All
    responses will be provided as JSON and all requests should specify
    `application/json` as the `Content-Type` and `Accept` headers.


    ## Rate Limiting


    Authenticated API requests are rate limited. The rate limiting details are
    provided in the response headers.


    | **Header** | **Example** | **Purpose** |

    | ---------- | ----------- | ----------- |

    | X-RateLimit-Limit | 1000 | Your maximum number of API requests |

    | X-RateLimit-Remaining | 999 | How many requests you have remaining |

    | X-RateLimit-Reset | 29 | How long until your rate limits are reset |


    ## Listing resources


    When you request a list of resources, you will get an object back that
    contains an array of the resources and information about the total number of
    resources and pagination.


    If you want to change the number of results fetched, or specify the page of
    results, you can use the following query parameters in the URL:


    | **Parameter** | **Example** | **Purpose** |

    | -------------- | ----------- | ----------- |

    | page | 2 | Which page of the results to fetch. By default this is the
    first page. |

    | perPage | 50 | How many results to fetch per page. The default value is
    normally 50. |


    The results will have a `meta` property, it will contain the following:


    ```javascript

    {
        "links": {
            "self": "https://api.dns.constellix.com/v4/templates?page=1",
            "first": "https://api.dns.constellix.com/v4/templates?page=1",
            "last": "https://api.dns.constellix.com/v4/templates?page=1",
            "previous": null,
            "next": null
        },
        "pagination": {
            "total": 3,
            "count": 3,
            "perPage": 50,
            "currentPage": 1
        }
    }

    ```


    There are links to other pages in the results as well as total pagination
    information.


    ## Creating resources


    When a new resources is created, it may not be created immediately. In most
    cases, it will be available immediately, but this is not guaranteed. For
    this reason, create requests return a `202 Accepted` response code.


    The response will have a `Location` header set with the location the new
    resource will exist at. The response body will include this location and
    also the ID of the resource created.


    The location may return a `404 Not Found` error until the resource has been
    created.


    # Authentication


    Authentication is performed using `Authorization: Bearer <token>`. The token
    is a combination of the API Key and request date, encoded using the Secret
    Key.


    The individual components of the token are:


    - **API Key** - The API key from the Constellix Management Portal, eg.
    `7a3fe9ef-de08-4c87-83a3-5034a8441f07`

    - **HMAC** - The request timestamp (in milliseconds), HMAC encoded using the
    Secret Key from the Management Portal. This is then base64 encoded. eg.
    `UkHJfB5wJpAux8dq518Jfb434ks=`

    - **Request Timestamp** - The request timestamp (in milliseconds), eg.
    `1489401874402`


    The three components are concatenated together, separated by colons. eg.
    `<API Key>:<HMAC>:<Request Date>`.


    Example PHP code for achieving this is:


    ```php

    define('SECRET_KEY', 'b811608f-7501-4e0c-8a05-4e8d5ab841ec');

    define ('API_KEY', '15e8b5a1-ef8f-4a16-a7dd-c30898d8affc');


    $now = new DateTime('now', new \DateTimeZone('UTC'));

    $timestamp = (string) ($now->getTimestamp() * 1000);

    $hmac = base64_encode(hash_hmac('sha1', $timestamp, SECRET_KEY, true));

    $header = 'Authorization: Bearer ' . API_KEY . ':' . $hmac . ':' .
    $timestamp;

    ```


    A pre-request script for Postman which can be used to populate an
    environment variable is:


    ```javascript

    var apiKey = pm.collectionVariables.get("apiKey");

    var secretKey = pm.collectionVariables.get("secretKey");


    function epochTime() {
      return new Date().getTime() + '';
    }


    pm.collectionVariables.unset("constellixAuth");

    var time = epochTime();

    var hmac = CryptoJS.HmacSHA1(time, secretKey).toString(CryptoJS.enc.Base64);

    var token = apiKey + ":" + hmac + ":" + time;

    pm.collectionVariables.set('constellixAuth', token);

    ```


    ## Backwards Compatibility


    The v4 API also supports authentication using the same headers as the
    previous Constellix DNS APIs. You can use either separate headers for the
    API Key, HMAC and Request Timestamp or they can be combined into a single
    header.


    It is still recommended that you pass the authentication through as an
    `Authorization: Bearer <token>` format instead.


    ### Separate headers


    ```

    x-cnsdns-apiKey: 7a3fe9ef-de08-4c87-83a3-5034a8441f07

    x-cnsdns-hmac: UkHJfB5wJpAux8dq518Jfb434ks=

    x-cnsdns-requestDate: 1489401874402

    ```


    ### Single Header


    The values should be concatenated with `:`.


    ```

    x-cns-security-token:
    7a3fe9ef-de08-4c87-83a3-5034a8441f07:UkHJfB5wJpAux8dq518Jfb434ks=:1489401874402

    ```


    # Postman Collection


    If you use Postman, you can [download a Postman
    Collection](https://api.dns.constellix.com/v4/postman-collection) for this
    API, with the pre-request script configured. All you need to do is edit
    variables for the collection and add your secret key and API key.


    # Changelog


    ## v4.2.7


    - Updated documentation to remove incorrect `active` property on failover
    record value updates.


    ## v4.2.6


    - Internal changes.


    ## v4.2.5


    - Internal changes.


    ## v4.2.4


    - Fix inconsistent API results when adding a domain with tags that doesn't
    existent. Previously the domain would be created even though an error was
    returned in the response. Now the domain will not be created.


    ## v4.2.3


    - Fix 500 error when attempting to delete a pool that is in use by a
    template or domain. You will now get a 409 conflict error with an
    explanation.


    ## v4.2.2


    - Fix error that occurs when you update pool values without specifying a
    `policy` value


    ## v4.2.1


    - Fix issue accessing pools with ITO enabled but no ITO configuration


    ## v4.2.0


    - New sub-resources on Contact List resources for Slack channels, Microsoft
    Teams channels and Emails

    - Fixed documentation on domain snapshots and domain history resources


    ## v4.1.13


    - Fix viewing and editing of contact lists

    - Fix example IP Filter request in documentation

    - Update documentation for Pools to include `createdAt` and `updatedAt`
    fields

    - Fix pool value `speed` property sometimes being returned as `N/A` instead
    of `null`

    - Improved error messages for Template Records

    - Fix error when attempting to update a Template Record but making no
    changes


    ## v4.1.12


    - Correct documentation for geoproximity, domain and domain history
    resources to match API output

    - Added version property on API domain resources to match documentation


    ## v4.1.11


    - Fix issue where domain notes were not updated

    - Fix issue when fetching some records


    ## v4.1.10


    - Added documentation for domain BIND export

    - Fixed various errors in documentation

    - Updated openapi specification

    - Fix errors when updating or creating records with empty names


    ## v4.1.9


    - Fix being unable to update the name on a domain record

    - Fix for updating and deleting domain and template records

    - Remove unused field from Vanity Nameserver create and update

    - Add functionality to enable and disable domains


    ## v4.1.8


    - Fix 500 error when updating template records

    - Fix issue where domain and template ID on record responses was returned as
    a string instead of an integer

    - Fix 500 error when supplying invalid security token

    - Fix 500 error when updating or creating a domain with null contacts or
    tags

    - Add documentation for `geoFailover` property on records.

    - Performance improvements when creating domain records


    ## v4.1.7


    - Performance improvements when creating resources

    - Fix errors when fetching analytics for the current day


    ## v4.1.6


    - Updated validation for RP records to allow mailbox to be specified without
    the domain name

    - Add support for skipLookup parameter on ANAME records


    ## v4.1.5


    - Fixed display of vanity nameservers assigned to a domain

    - Fixed issue creating/updating IP Filters with an empty continents
    collection


    ## v4.1.4


    - Fixed issue with A, AAAA and ANAME records in standard (round-robin) mode

    - Fixed documentation for vanity nameservers


    ## v4.1.3


    - Fixed issue with CNAME records in certain scenarios

    - Fixed pagination perPage parameter


    ## v4.1.2


    - Fixed issue with Sonar Check IDs in Round-Robin Failover records

    - Improved documentation around Postman Collection


    ## v4.1.1


    - Added domain search endpoint at `/v4/search/domains`

    - Updated documentation for absolute URLs and hostname used for URLs

    - Fixed issue with Sonar Check IDs in domain records


    ## v4.1.0


    - Added account analytics endpoint at `/v4/analytics`

    - Added domain analytics endpoint at `/v4/domains/{id}/analytics`

    - Updated example Postman pre-request script
  contact:
    name: Constellix
    email: support@constellix.com
  version: 4.2.7
servers:
  - url: "https://api.dns.constellix.com/v4"
security:
  - http:
      - read
      - write
tags:
  - name: General
    description: Endpoints that don't belong in other categories
  - name: Domains
    description: Endpoints for managing domains
  - name: Domain History
    description: Endpoints for managing domain history
  - name: Domain Snapshots
    description: Endpoints for managing domain snapshots
  - name: Domain Records
    description: Endpoints for managing records on domains
  - name: Templates
    description: Endpoints for managing templates
  - name: Template Records
    description: Endpoints for managing records in templates
  - name: Pools
    description: Endpoints for managing IPV4 and IPV6 pools
  - name: IP Filters
    description: Endpoints for managing IP Filters
  - name: Geo Proximity Locations
    description: Endpoints for managing Geo Proximity locations
  - name: Vanity Nameservers
    description: Endpoints for managing Vanity Nameservers
  - name: Contact Lists
    description: Endpoints for managing Contact Lists
  - name: Tags
    description: Endpoints for managing tags
  - name: Announcements
    description: Endpoints for viewing announcements
  - name: Analytics
    description: Endpoint for viewing account analytics
  - name: Search
    description: Endpoint for searching resources
paths:
  /ping:
    get:
      security: []
      tags:
        - General
      summary: Ping
      description: >
        Returns basic information about the API and the current user. This will
        include your IP address, the API timestamp and the version.
      responses:
        "200":
          description: API Ping response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ping"
  /domains:
    get:
      tags:
        - Domains
      summary: List Domains
      description: >
        A list of all domains in the account. The list is paginated and can also
        be searched and filtered.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: List of domains in your account
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    description: The domains for this page
                    items:
                      $ref: "#/components/schemas/domain"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - Domains
      summary: Create Domain
      description: Creates a new domain in your account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/domain-create"
      responses:
        "202":
          description: The domain has been accepted for creation
          headers:
            Location:
              schema:
                type: string
                description: The URL for the newly created domain
                format: url
                example: "https://api.dns.constellix.com/v4/domains/366246"
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 366246
                        description: The ID of the object
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            description: The URL for the new object
                            format: url
                            example: "https://api.dns.constellix.com/v4/domains/366246"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  "/domains/{domain_id}":
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 366246
        description: The ID of the domain object
    get:
      tags:
        - Domains
      summary: Get Domain
      description: >
        Fetches a single domain in your account. This will contain all the
        details of the domain

        and links to the records.
      responses:
        "200":
          description: Fetch a single domain from your account
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/domain"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Domains
      summary: Update Domain
      description: >
        Updates the domain object. Fields left out of the request will not be
        updated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/domain-update"
      responses:
        "200":
          description: The updated domain resource
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/domain"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
    delete:
      summary: Delete Domain
      description: Remove the domain and all records for it
      tags:
        - Domains
      responses:
        "204":
          description: The domain was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/domains/{domain_id}/analytics":
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 366246
        description: The ID of the domain object
      - in: query
        name: start
        required: false
        schema:
          type: integer
          example: 20220114
        description: >
          The start date for analytics. This is in Ymd format, eg. 20220104 for
          the 4th January 2022. It must be less than the end date. If not
          supplied, this is assumed to 2 weeks before the current date.
      - in: query
        name: end
        required: false
        schema:
          type: integer
          example: 20220120
        description: >
          The end date for analytics. This is in Ymd format, eg. 20220104 for
          the 4th January 2022. It must be more than the start date. If not
          supplied, this is assumed to be the current date.
    get:
      tags:
        - Domains
      summary: Get Analytics
      description: |
        Retrieve query analytics for the domain
      responses:
        "200":
          description: Retrieve query analytics for the domain
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/domainanalytics"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/domains/{domain_id}/nameservers":
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 366246
        description: The ID of the domain object
    get:
      tags:
        - Domains
      summary: Get Nameservers
      description: >
        Fetches the current nameservers the domain is using. This may be
        different from the ones assigned to it by Constellix.
      responses:
        "200":
          description: Fetch the nameservers for the domain
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      nameservers:
                        type: array
                        items:
                          type: string
                        example:
                          - ns1.example.com
                          - ns2.example.com
                      domain:
                        $ref: "#/components/schemas/simple-domain"
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            description: The URL for these nameservers
                            example: >-
                              https://api.dns.constellix.com/v4/domains/366246/nameservers
                          domain:
                            type: string
                            description: The URL for the domain
                            example: "https://api.dns.constellix.com/v4/domains/366246"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/domains/{domain_id}/history":
    parameters:
      - in: path
        name: domain_id
        required: true
        schema:
          type: integer
          example: 366246
        description: The ID of the domain object
    get:
      tags:
        - Domain History
      summary: Get History
      description: |
        Fetches a history of the domain to allow you to see when it has changed.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: Fetch the list of history for the domain
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    description: The domain history for this page
                    items:
                      allOf:
                        - $ref: "#/components/schemas/domainhistory"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/domains/{domain_id}/history/{version}":
    parameters:
      - in: path
        name: domain_id
        required: true
        schema:
          type: integer
          example: 366246
        description: The ID of the domain object
      - in: path
        name: version
        required: true
        schema:
          type: integer
          example: 4
        description: The version number of the domain
    get:
      tags:
        - Domain History
      summary: Get History Version
      description: |
        Fetches a single history version for the domain.
      responses:
        "200":
          description: Fetch a history version for the domain
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/domainhistory"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/domains/{domain_id}/history/{version}/apply":
    parameters:
      - in: path
        name: domain_id
        required: true
        schema:
          type: integer
          example: 366246
        description: The ID of the domain object
      - in: path
        name: version
        required: true
        schema:
          type: integer
          example: 4
        description: The version number of the domain
    post:
      tags:
        - Domain History
      summary: Apply History
      description: |
        Update the domain to the specified version in the history of the domain
      responses:
        "204":
          description: The historical version has been applied
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/domains/{domain_id}/history/{version}/snapshot":
    parameters:
      - in: path
        name: domain_id
        required: true
        schema:
          type: integer
          example: 366246
        description: The ID of the domain object
      - in: path
        name: version
        required: true
        schema:
          type: integer
          example: 4
        description: The version number of the domain
    post:
      tags:
        - Domain History
      summary: Snapshot History
      description: >
        Snapshot this history version. Snapshots are persisted and kept until
        they are deleted by the user.
      responses:
        "202":
          description: The snapshot has accepted for creation.
          headers:
            Location:
              schema:
                type: string
                description: The URL for the newly created snapshot
                format: url
                example: "https://api.constellix.com/v4/domains/366246/snapshots/4"
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      version:
                        type: integer
                        example: 4
                        description: The version of the snapshot
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            description: The URL for the new object
                            format: url
                            example: >-
                              https://api.dns.constellix.com/v4/domains/366246/snapshots/4
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/domains/{domain_id}/snapshots":
    parameters:
      - in: path
        name: domain_id
        required: true
        schema:
          type: integer
          example: 366246
        description: The ID of the domain object
    get:
      tags:
        - Domain Snapshots
      summary: Get Snapshots
      description: >
        Fetches saved snapshots of the history the domain to allow you to see
        when it has changed.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: Fetch the list of snapshots for the domain
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    description: The domain snapshots for this page
                    items:
                      allOf:
                        - $ref: "#/components/schemas/domainsnapshot"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/domains/{domain_id}/snapshots/{version}":
    parameters:
      - in: path
        name: domain_id
        required: true
        schema:
          type: integer
          example: 366246
        description: The ID of the domain object
      - in: path
        name: version
        required: true
        schema:
          type: integer
          example: 4
        description: The version number of the snapshot
    get:
      tags:
        - Domain Snapshots
      summary: Get Snapshot
      description: |
        Fetches a single snapshot for the domain.
      responses:
        "200":
          description: Fetch a snapshot for the domain
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/domainsnapshot"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete Snapshot
      description: Remove the snapshot.
      tags:
        - Domain Snapshots
      responses:
        "204":
          description: The snapshot was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/domains/{domain_id}/snapshots/{version}/apply":
    parameters:
      - in: path
        name: domain_id
        required: true
        schema:
          type: integer
          example: 366246
        description: The ID of the domain object
      - in: path
        name: version
        required: true
        schema:
          type: integer
          example: 4
        description: The snapshot version of the domain
    post:
      tags:
        - Domain Snapshots
      summary: Apply Snapshot
      description: |
        Update the domain to the specified snapshot in the history of the domain
      responses:
        "204":
          description: The snapshot has been applied
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/domains/{domain_id}/records":
    parameters:
      - in: path
        name: domain_id
        required: true
        schema:
          type: integer
          example: 366246
        description: The ID of the domain object
    get:
      tags:
        - Domain Records
      summary: List Records
      description: >
        Fetches a paginated list of all records for the domain. This list can be
        ordered and filtered.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: A list of records for the domain
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    description: The records for this page
                    items:
                      allOf:
                        - $ref: "#/components/schemas/domainrecord"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
    post:
      tags:
        - Domain Records
      summary: Create Record
      description: Creates a new record for the domain
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/record-create"
      responses:
        "202":
          description: The record has been accepted for creation
          headers:
            Location:
              schema:
                type: string
                description: The URL for the newly created record
                format: url
                example: "https://api.constellix.com/v4/domains/366246/records/732673"
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 732673
                        description: The ID of the object
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            description: The URL for the new object
                            format: url
                            example: >-
                              https://api.dns.constellix.com/v4/domains/366246/records/732673
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  "/domains/{domain_id}/records/{id}":
    parameters:
      - in: path
        name: domain_id
        required: true
        schema:
          type: integer
          example: 366246
        description: The ID of the domain object
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 732673
        description: The ID of the record
    get:
      tags:
        - Domain Records
      summary: Get Record
      description: |
        Fetches a single record for the domain.
      responses:
        "200":
          description: Fetch a record for the domain
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/domainrecord"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Domain Records
      summary: Update Record
      description: >
        Updates the record object. Fields left out of the request will not be
        updated.


        If the mode is updated and value is not provided with the request, the
        current value will be validated alongside the new mode. If it is
        invalid, a 422 response will be issued.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/record-update"
      responses:
        "200":
          description: The updated record resource
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/domainrecord"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
    delete:
      summary: Delete Record
      description: Remove the record
      tags:
        - Domain Records
      responses:
        "204":
          description: The record was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/domains/{domain_id}/bind":
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 366246
        description: The ID of the domain object
    get:
      tags:
        - Domains
      summary: Bind Export
      description: |
        Exports the entire domain in the BIND format.
      responses:
        "200":
          description: Export of the domain in BIND format
          content:
            text/plain:
              schema:
                type: string
              example: ";ID 1234512345-1-123123\n@ IN 43200 SOA ns11.constellix.com. dns.constellix.com. (\n;soa start 233982fb-31c6-42e9-a0bf-1c7323a3f7af\n2015010202\n;soa end 233982fb-31c6-42e9-a0bf-1c7323a3f7af\n43200\n3600\n1209600\n180\n)\n\n@ \t IN 86400 NS \tns11.constellix.com\".\n@ \t IN 86400 NS \tns21.constellix.com\".\n\n;SOA END\ntest\t IN \t3600\t A \t192.0.2.42\n"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /templates:
    get:
      tags:
        - Templates
      summary: List templates
      description: |
        Returns a paginated list of domain templates.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: List of templates
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    description: The records for this page
                    items:
                      $ref: "#/components/schemas/template"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - Templates
      summary: Create Template
      description: |
        Adds a new template.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/template-createupdate"
      responses:
        "202":
          description: The template has been created successfully
          headers:
            Location:
              schema:
                type: string
                description: The URL for the newly created template
                format: url
                example: "https://api.dns.constellix.com/v4/templates/83675283"
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 83675283
                        description: The ID of the object
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            description: The URL for the new object
                            format: url
                            example: >-
                              https://api.dns.constellix.com/v4/templates/83675283
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  "/templates/{template_id}":
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 42
        description: The ID of the template object
    get:
      tags:
        - Templates
      summary: Get Template
      description: |
        Retrieves a single template.
      responses:
        "200":
          description: Fetch a single template from your account
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/template"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Templates
      summary: Update Template
      description: >
        Updates the properties on the template. Properties that aren't included
        in the request will not be updated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/template-createupdate"
      responses:
        "200":
          description: The template has been updated successfully
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/template"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
    delete:
      summary: Delete Template
      description: Remove the template and all records for it
      tags:
        - Templates
      responses:
        "204":
          description: The template was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/templates/{template_id}/records":
    parameters:
      - in: path
        name: template_id
        required: true
        schema:
          type: integer
          example: 83675283
        description: The ID of the template object
    get:
      tags:
        - Template Records
      summary: List Records
      description: >
        Fetches a paginated list of all records for the template. This list can
        be ordered and filtered.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: A list of records for the template
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    description: The records for this page
                    items:
                      allOf:
                        - $ref: "#/components/schemas/templaterecord"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
    post:
      tags:
        - Template Records
      summary: Create Record
      description: Creates a new record for the template
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/record-create"
      responses:
        "202":
          description: The record has been accepted for creation
          headers:
            Location:
              schema:
                type: string
                description: The URL for the newly created record
                format: url
                example: >-
                  https://api.constellix.com/v4/templates/83675283/records/732673
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 732673
                        description: The ID of the object
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            description: The URL for the new object
                            format: url
                            example: >-
                              https://api.dns.constellix.com/v4/templates/83675283/records/732673
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  "/templates/{template_id}/records/{id}":
    parameters:
      - in: path
        name: template_id
        required: true
        schema:
          type: integer
          example: 83675283
        description: The ID of the template object
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 732673
        description: The ID of the record
    get:
      tags:
        - Template Records
      summary: Get Record
      description: |
        Fetches a single record for the template.
      responses:
        "200":
          description: Fetch a record for the template
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/templaterecord"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Template Records
      summary: Update Record
      description: >
        Updates the record object. Fields left out of the request will not be
        updated.


        If the mode is updated and value is not provided with the request, the
        current value will be validated alongside the new mode. If it is
        invalid, a 422 response will be issued.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/record-update"
      responses:
        "200":
          description: The updated record resource
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/templaterecord"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
    delete:
      summary: Delete Record
      description: Remove the record.
      tags:
        - Template Records
      responses:
        "204":
          description: The record was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /pools:
    get:
      tags:
        - Pools
      summary: List Pools
      description: |
        Returns a paginated list of pools. This includes all types of pool.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: List of pools
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    description: The pools for this page
                    items:
                      $ref: "#/components/schemas/poolindex"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - Pools
      summary: Create Pool
      description: |
        Creates a new A, AAAA or CNAME pool.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pool-createupdate"
      responses:
        "202":
          description: The new Pool resource
          headers:
            Location:
              schema:
                type: string
                description: The URL for the newly created object
                format: url
                example: "https://api.dns.constellix.com/v4/pools/A/7665"
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 7665
                        description: The ID of the object
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            description: The URL for the new object
                            format: url
                            example: "https://api.dns.constellix.com/v4/pools/A/7665"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  "/pools/{type}/{id}":
    parameters:
      - in: path
        name: type
        required: true
        schema:
          type: string
          enum:
            - A
            - AAAA
            - CNAME
        description: The type of pool
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 7665
        description: The ID of the pool
    get:
      tags:
        - Pools
      summary: Get Pool
      description: |
        Fetches a single Pool for the account.
      responses:
        "200":
          description: Fetch a pool
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/pool"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Pools
      summary: Update Pool
      description: >
        Updates the pool object. Fields left out of the request will not be
        updated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pool-createupdate"
      responses:
        "200":
          description: The updated pool resource
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/pool"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
    delete:
      summary: Delete Pool
      description: Remove the pool.
      tags:
        - Pools
      responses:
        "204":
          description: The pool was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
  /ipfilters:
    get:
      tags:
        - IP Filters
      summary: List IP Filters
      description: |
        Fetches a paginated list of IP filters for the account.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: The list of IP filters
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ipfilter"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - IP Filters
      summary: Create IP Filter
      description: |
        Creates a new IP filter.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ipfilter-createupdate"
      responses:
        "202":
          description: The new IPFilter resource
          headers:
            Location:
              schema:
                type: string
                description: The URL for the newly created object
                format: url
                example: "https://api.dns.constellix.com/v4/ipfilters/47345837"
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 47345837
                        description: The ID of the object
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            description: The URL for the new object
                            format: url
                            example: >-
                              https://api.dns.constellix.com/v4/ipfilters/47345837
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  "/ipfilters/{id}":
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 47345837
        description: The ID of the IP Filter
    get:
      tags:
        - IP Filters
      summary: Get IP Filter
      description: |
        Fetches a single IP Filter for the account.
      responses:
        "200":
          description: Fetch an IP Filter
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/ipfilter"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - IP Filters
      summary: Update IP Filter
      description: >
        Updates the IP Filter object. Fields left out of the request will not be
        updated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ipfilter-createupdate"
      responses:
        "200":
          description: The updated IP filter resource
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/ipfilter"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
    delete:
      summary: Delete IP Filter
      description: Remove the IP Filter.
      tags:
        - IP Filters
      responses:
        "204":
          description: The IP Filter was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /geoproximities:
    get:
      tags:
        - Geo Proximity Locations
      summary: List Locations
      description: |
        Fetches a paginated list of Geo Proximity locations for the account.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: The list of Geo Proximity locations
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/geoproximity"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - Geo Proximity Locations
      summary: Create Location
      description: |
        Creates a new Geo Proximity Location.

        Only name, longitude and latitude are required and used, the other
        properties are just for information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/geoproximity-createupdate"
      responses:
        "202":
          description: The new Geo Proximity location resource
          headers:
            Location:
              schema:
                type: string
                description: The URL for the newly created object
                format: url
                example: "https://api.dns.constellix.com/v4/geoproximities/4367769"
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 4367769
                        description: The ID of the object
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            description: The URL for the new object
                            format: url
                            example: >-
                              https://api.dns.constellix.com/v4/geoproximities/4367769
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  "/geoproximities/{id}":
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 4367769
        description: The ID of the Geo Proximity
    get:
      tags:
        - Geo Proximity Locations
      summary: Get Location
      description: |
        Fetches a single Geo Proximity location for the account.
      responses:
        "200":
          description: Fetch a Geo Proximity location
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/geoproximity"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Geo Proximity Locations
      summary: Update Location
      description: >
        Updates the Geo Proximity Location object. Fields left out of the
        request will not be updated.

        Only name, longitude and latitude are required and used, the other
        properties are just for information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/geoproximity-createupdate"
      responses:
        "200":
          description: The updated Geo Proximity location resource
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/geoproximity"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
    delete:
      summary: Delete Location
      description: Remove the Geo Proximity Location.
      tags:
        - Geo Proximity Locations
      responses:
        "204":
          description: The Geo Proximity location was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /vanitynameservers:
    get:
      tags:
        - Vanity Nameservers
      summary: List Nameservers
      description: |
        Fetches a paginated list of Vanity Nameservers for the account.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: The list of Vanity Nameservers
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/vanitynameserver"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - Vanity Nameservers
      summary: Create Nameserver
      description: |
        Creates a new Vanity Nameserver
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/vanitynameserver-create"
      responses:
        "202":
          description: The new Vanity Nameserver resource
          headers:
            Location:
              schema:
                type: string
                description: The URL for the newly created object
                format: url
                example: "https://api.dns.constellix.com/v4/vanitynameservers/82648967"
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 82648967
                        description: The ID of the object
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            description: The URL for the new object
                            format: url
                            example: >-
                              https://api.dns.constellix.com/v4/vanitynameservers/82648967
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  "/vanitynameservers/{id}":
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 82648967
        description: The ID of the Vanity Nameserver
    get:
      tags:
        - Vanity Nameservers
      summary: Get Nameserver
      description: |
        Fetches a single Vanity Nameserver for the account.
      responses:
        "200":
          description: Fetch a Vanity Nameserver
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/vanitynameserver"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Vanity Nameservers
      summary: Update Nameserver
      description: >
        Updates the Vanity Nameserver object. Fields left out of the request
        will not be updated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/vanitynameserver-update"
      responses:
        "200":
          description: The updated Vanity Nameserver resource
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/vanitynameserver"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
    delete:
      summary: Delete Nameserver
      description: Remove the Vanity Nameserver.
      tags:
        - Vanity Nameservers
      responses:
        "204":
          description: The Vanity Nameserver was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /contactlists:
    get:
      tags:
        - Contact Lists
      summary: List Contact Lists
      description: |
        Fetches a paginated list of Contact Lists for the account.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: The list of Contact Lists
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/contactlistwithoutemails"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - Contact Lists
      summary: Create Contact List
      description: |
        Creates a new Contact List
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contactlist-createupdate"
      responses:
        "202":
          description: The new Contact List resource
          headers:
            Location:
              schema:
                type: string
                description: The URL for the newly created object
                format: url
                example: "https://api.dns.constellix.com/v4/contactlists/2668228"
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2668228
                        description: The ID of the object
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            description: The URL for the new object
                            format: url
                            example: >-
                              https://api.dns.constellix.com/v4/contactlists/2668228
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  "/contactlists/{contactlist_id}":
    parameters:
      - in: path
        name: contactlist_id
        required: true
        schema:
          type: integer
          example: 2668228
        description: The ID of the Contact List
    get:
      tags:
        - Contact Lists
      summary: Get Contact List
      description: |
        Fetches a single Contact List for the account.
      responses:
        "200":
          description: Fetch a Contact List
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/contactlist"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Contact Lists
      summary: Update Contact List
      description: >
        Updates the Contact List object. Fields left out of the request will not
        be updated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contactlist-createupdate"
      responses:
        "200":
          description: The updated Contact List resource
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/contactlist"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
    delete:
      summary: Delete Contact List
      description: Remove the Contact List.
      tags:
        - Contact Lists
      responses:
        "204":
          description: The Contact List was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/contactlists/{contactlist_id}/emails":
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 2668228
        description: The ID of the Contact List
    get:
      tags:
        - Contact Lists
      summary: List Email Addresses
      description: |
        A list of all emails in the contact list. The list is paginated.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: List of emails in the contactlist
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    description: The emails for this page
                    items:
                      $ref: "#/components/schemas/contactlist_email"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - Contact Lists
      summary: Add Email Address
      description: Adds an email to the contact list
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contactlist-email-createupdate"
      responses:
        "202":
          description: The email address has been added
          headers:
            Location:
              schema:
                type: string
                description: The URL for the newly created email
                format: url
                example: >-
                  https://api.dns.constellix.com/v4/contactlists/2668228/emails/36245
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 366246
                        description: The ID of the email address
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            description: The URL for the new object
                            format: url
                            example: >-
                              https://api.dns.constellix.com/contactlists/2668228/emails/36245
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  "/contactlists/{contactlist_id}/emails/{id}":
    parameters:
      - in: path
        name: contactlist_id
        required: true
        schema:
          type: integer
          example: 2668228
        description: The ID of the Contact List
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 82648967
        description: The ID of the email address
    get:
      tags:
        - Contact Lists
      summary: Get Email Address
      description: |
        Fetches a single Email Address in a contact list
      responses:
        "200":
          description: Fetch an Email Address
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/contactlist_email"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete Email Address
      description: Remove the Email Address from the contact list
      tags:
        - Contact Lists
      responses:
        "204":
          description: The email address was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/contactlists/{contactlist_id}/teams":
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 2668228
        description: The ID of the Contact List
    get:
      tags:
        - Contact Lists
      summary: List MS Teams Webhooks
      description: >
        A list of all MS Teams webhooks in the contact list. The list is
        paginated.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: List of MS Teams webhooks in the contactlist
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    description: The webhooks for this page
                    items:
                      $ref: "#/components/schemas/contactlist_teams"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - Contact Lists
      summary: Create MS Teams Webhook
      description: Adds a Microsoft Teams webhook to the contact list
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contactlist-teams-createupdate"
      responses:
        "202":
          description: The Microsoft Teams webhook has been added
          headers:
            Location:
              schema:
                type: string
                description: The URL for the newly created MS Teams webhook
                format: url
                example: >-
                  https://api.dns.constellix.com/v4/contactlists/2668228/teams/83267
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 366246
                        description: The ID of the MS Teams webhook
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            description: The URL for the new object
                            format: url
                            example: >-
                              https://api.dns.constellix.com/contactlists/2668228/teams/83267
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  "/contactlists/{contactlist_id}/teams/{id}":
    parameters:
      - in: path
        name: contactlist_id
        required: true
        schema:
          type: integer
          example: 2668228
        description: The ID of the Contact List
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 83267
        description: The ID of the MS Teams Webhook
    get:
      tags:
        - Contact Lists
      summary: Get MS Teams Webhook
      description: |
        Fetches a single Microsoft Teams Webhook in a contact list
      responses:
        "200":
          description: Fetch an MS Teams Webhook
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/contactlist_teams"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete MS Teams Webhook
      description: Remove the Microsoft Teams webhook from the contact list
      tags:
        - Contact Lists
      responses:
        "204":
          description: The webhook was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/contactlists/{contactlist_id}/slack":
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 2668228
        description: The ID of the Contact List
    get:
      tags:
        - Contact Lists
      summary: List Slack Webhooks
      description: |
        A list of all Slack webhooks in the contact list. The list is paginated.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: List of Slack webhooks in the contactlist
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    description: The webhooks for this page
                    items:
                      $ref: "#/components/schemas/contactlist_slack"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - Contact Lists
      summary: Create Slack Webhook
      description: Adds a Slack webhook to the contact list
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contactlist-slack-createupdate"
      responses:
        "202":
          description: The Slack webhook has been added
          headers:
            Location:
              schema:
                type: string
                description: The URL for the newly created Slack webhook
                format: url
                example: >-
                  https://api.dns.constellix.com/v4/contactlists/2668228/slack/75225
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 366246
                        description: The ID of the Slack webhook
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            description: The URL for the new object
                            format: url
                            example: >-
                              https://api.dns.constellix.com/contactlists/2668228/slack/75225
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  "/contactlists/{contactlist_id}/slack/{id}":
    parameters:
      - in: path
        name: contactlist_id
        required: true
        schema:
          type: integer
          example: 2668228
        description: The ID of the Contact List
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 75225
        description: The ID of the Slack Webhook
    get:
      tags:
        - Contact Lists
      summary: Get Slack Webhook
      description: |
        Fetches a single Slack Webhook in a contact list
      responses:
        "200":
          description: Fetch a Slack Webhook
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/contactlist_slack"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete Slack Webhook
      description: Remove the Slack webhook from the contact list
      tags:
        - Contact Lists
      responses:
        "204":
          description: The webhook was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /tags:
    get:
      tags:
        - Tags
      summary: List Tags
      description: |
        Fetches a paginated list ofTags for the account.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: The list of Tags
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/tag"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - Tags
      summary: Create Tag
      description: |
        Creates a new Tag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tag-createupdate"
      responses:
        "202":
          description: The new Tag resource
          headers:
            Location:
              schema:
                type: string
                description: The URL for the newly created object
                format: url
                example: "https://api.dns.constellix.com/v4/tags/824"
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 824
                        description: The ID of the object
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            description: The URL for the new object
                            format: url
                            example: "https://api.dns.constellix.com/v4/tags/824"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  "/tags/{id}":
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 824
        description: The ID of the Tag
    get:
      tags:
        - Tags
      summary: Get Tag
      description: |
        Fetches a single Tag for the account.
      responses:
        "200":
          description: Fetch a Tag
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/tag"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Tags
      summary: Update Tag
      description: >
        Updates the Tag object. Fields left out of the request will not be
        updated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tag-createupdate"
      responses:
        "200":
          description: The updated Tag resource
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/tag"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
    delete:
      summary: Delete Tag
      description: Remove the Tag.
      tags:
        - Tags
      responses:
        "204":
          description: The Tag was deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /announcements:
    get:
      tags:
        - Announcements
      summary: List Announcements
      description: |
        A list of all announcements.
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPerPage"
      responses:
        "200":
          description: List of announcements
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    description: The announcements for this page
                    items:
                      $ref: "#/components/schemas/announcement"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/announcements/{id}":
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          example: 3666
        description: The ID of the announcement
    get:
      tags:
        - Announcements
      summary: Get Announcement
      description: |
        Fetches a single announcement.
      responses:
        "200":
          description: Fetch a single announcement
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/announcement"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /analytics:
    parameters:
      - in: query
        name: start
        required: false
        schema:
          type: integer
          example: 20220114
        description: >
          The start date for analytics. This is in Ymd format, eg. 20220104 for
          the 4th January 2022. It must be less than the end date. If not
          supplied, this is assumed to 2 weeks before the current date.
      - in: query
        name: end
        required: false
        schema:
          type: integer
          example: 20220120
        description: >
          The end date for analytics. This is in Ymd format, eg. 20220104 for
          the 4th January 2022. It must be more than the start date. If not
          supplied, this is assumed to be the current date.
    get:
      tags:
        - Analytics
      summary: Get Analytics
      description: |
        Retrieve query analytics for your account
      responses:
        "200":
          description: Retrieve query analytics for your account
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/analytics"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /search/domains:
    parameters:
      - in: query
        name: name
        required: true
        schema:
          type: string
          example: "*example"
        description: >
          The domain name to search for. Wildcards at the start and end of the
          name are supported. These can be provided using an asterisk (`*`). For
          example:

           - `example.com` - Search exactly for example.com
           - `*.com` - Search for domains ending in .com
           - `example*` - Search for domains beginning with example
           - `*example*` - Search for domains containing example
    get:
      tags:
        - Search
      summary: Search Domains
      description: |
        Search for domains within your account
      responses:
        "200":
          description: Search for domains within your account
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    description: The search results for this page
                    items:
                      $ref: "#/components/schemas/domainsearchresult"
                  meta:
                    $ref: "#/components/schemas/ListMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
components:
  securitySchemes:
    http:
      type: http
      scheme: bearer
  schemas:
    ping:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: 4.0.0
        ip:
          type: string
          example: 192.0.2.42
    soa:
      type: object
      description: SOA (Start of Authority) Record
      properties:
        primaryNameserver:
          type: string
          description: Primary master nameserver for the domain
          example: ns11.constellix.com
        email:
          type: string
          description: >-
            Email of the administrator for the domain. @ should be replaced with
            .
          example: admin.example.com
        ttl:
          type: integer
          description: The Time To Live (TTL) in seconds for the SOA record
          example: 86400
        serial:
          type: integer
          description: A serial number for this version of the records for this domain
          example: 2020061601
        refresh:
          type: integer
          description: >-
            The interval for secondary nameservers should query for the SOA
            record
          example: 86400
        retry:
          type: integer
          description: >-
            The number of seconds after which secondary servers should retry to
            request the serial number if the master does not respond
          example: 7200
        expire:
          type: integer
          description: >-
            Number of seconds after which secondary nameservers should stop
            responding to queries, if the master does not respond
          example: 3600000
        negativeCache:
          type: integer
          description: How long NXDOMAIN responses should be cached for
          example: 180
    tag:
      type: object
      description: A tag is used to group resources together
      properties:
        id:
          type: integer
          description: Unique ID for the tag
          example: 824
        name:
          type: string
          description: A name for this tag
          example: My Tag
        links:
          type: object
          description: Links for tags
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/tags/824"
    simple-template:
      type: object
      properties:
        id:
          type: integer
          description: The unique ID for this template
          example: 83675283
        name:
          type: string
          description: The name for the template
          example: My Template
        version:
          type: integer
          description: The version of the template resource
          example: 3
        links:
          type: object
          description: Links for the template
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/templates/83675283"
            records:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/records?template=83675283"
    simple-vanitynameserver:
      type: object
      description: A simplied version of a rebranded nameserver using your own domain name.
      properties:
        id:
          type: integer
          description: A unique ID for the vanity nameserver
          example: 82648967
        links:
          type: object
          description: Links relevant to this object
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/vanitynameservers/82648967"
    simple-contactlist:
      type: object
      description: A simple version of a contact list when inclued with other resources
      properties:
        id:
          type: integer
          description: Unique ID for the contact list
          example: 2668228
        links:
          type: object
          description: Links for domain objects
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/contactlists/2668228"
    domain:
      type: object
      properties:
        id:
          type: integer
          description: A unique numeric ID for this domain
          example: 366246
        name:
          type: string
          description: The name of the domain
          example: example.com
        note:
          type: string
          description: A note for the domain
          example: My Domain
        status:
          type: string
          enum:
            - ACTIVE
            - SUSPENDED
            - TERMINATED
        enabled:
          type: boolean
          description: Is the domain enabled
          example: true
        version:
          type: integer
          description: The version of the domain resource
          example: 3
        soa:
          $ref: "#/components/schemas/soa"
        geoip:
          type: boolean
          description: Is GeoIP functionality enabled for the domain
          example: true
        gtd:
          type: boolean
          description: Is Global Traffic Director enabled for the domain
          example: true
        nameservers:
          type: array
          description: The nameservers for the domain
          items:
            type: string
          example:
            - ns11.constellix.com
            - ns21.constellix.com
            - ns31.constellix.com
        tags:
          type: array
          description: An array of tags for this domain.
          items:
            $ref: "#/components/schemas/tag"
        template:
          $ref: "#/components/schemas/simple-template"
        vanityNameserver:
          $ref: "#/components/schemas/simple-vanitynameserver"
        contacts:
          type: array
          description: >-
            An array of contact lists that will be notified when records in this
            domain change.
          items:
            $ref: "#/components/schemas/simple-contactlist"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        links:
          type: object
          description: Links for domain objects
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/domains/366246"
            records:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/domains/366246/records"
    ListMetadata:
      type: object
      description: Metadata for list responses
      properties:
        pagination:
          type: object
          description: Pagination details
          properties:
            total:
              type: integer
              description: The total number of objects matching the query
              example: 23
            count:
              type: integer
              description: The number of items in this page of the response
              example: 3
            perPage:
              type: integer
              description: The number of items per page
              example: 50
            currentPage:
              type: integer
              description: The current results page
              example: 1
            totalPages:
              type: integer
              description: The total number of pages
              example: 1
        links:
          type: object
          description: Relevant links for this list
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/domains?page=3"
            first:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/domains?page=1"
            last:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/domains?page=5"
            previous:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/domains?page=2"
            next:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/domains?page=4"
    domain-create:
      type: object
      properties:
        name:
          type: string
          description: The name of the domain
          example: example.com
        soa:
          type: object
          description: The SOA details for the domain
          properties:
            primaryNameserver:
              type: string
              description: Primary master nameserver for the domain
              example: ns11.constellix.com
            email:
              type: string
              description: >-
                Email of the administrator for the domain. @ should be replaced
                with .
              example: admin.example.com
            ttl:
              type: integer
              description: The Time To Live (TTL) in seconds for the SOA record
              example: 86400
            refresh:
              type: integer
              description: >-
                The interval for secondary nameservers should query for the SOA
                record
              example: 86400
            retry:
              type: integer
              description: >-
                The number of seconds after which secondary servers should retry
                to request the serial number if the master does not respond
              example: 7200
            expire:
              type: integer
              description: >-
                Number of seconds after which secondary nameservers should stop
                responding to queries, if the master does not respond
              example: 3600000
            negativeCache:
              type: integer
              description: How long NXDOMAIN responses should be cached for
              example: 180
        note:
          type: string
          description: A note for the domain
          example: My Domain
        enabled:
          type: boolean
          description: Is the domain enabled
          example: true
        geoip:
          type: boolean
          description: Is GeoIP functionality enabled for the domain
          example: true
        gtd:
          type: boolean
          description: Is Global Traffic Director enabled for the domain
          example: true
        template:
          type: integer
          description: >-
            The template to use for creating this domain. It will be linked to
            this template so any changes made to the template will apply to this
            domain.
          example: 83675283
        contacts:
          type: array
          description: Contactlists to be notified if the domain is updated
          items:
            type: integer
          example:
            - 2668228
            - 2668242
        vanityNameserver:
          type: integer
          description: The vanity nameserver to use for this domain.
          example: 82648967
        tags:
          type: array
          description: The numeric IDs of tags you want to apply to this domain
          items:
            type: integer
          example:
            - 824
            - 842
    domain-update:
      type: object
      properties:
        soa:
          type: object
          description: The SOA details for the domain
          properties:
            primaryNameserver:
              type: string
              description: Primary master nameserver for the domain
              example: ns11.constellix.com
            email:
              type: string
              description: >-
                Email of the administrator for the domain. @ should be replaced
                with .
              example: admin.example.com
            ttl:
              type: integer
              description: The Time To Live (TTL) in seconds for the SOA record
              example: 86400
            refresh:
              type: integer
              description: >-
                The interval for secondary nameservers should query for the SOA
                record
              example: 86400
            retry:
              type: integer
              description: >-
                The number of seconds after which secondary servers should retry
                to request the serial number if the master does not respond
              example: 7200
            expire:
              type: integer
              description: >-
                Number of seconds after which secondary nameservers should stop
                responding to queries, if the master does not respond
              example: 3600000
            negativeCache:
              type: integer
              description: How long NXDOMAIN responses should be cached for
              example: 180
        note:
          type: string
          description: A note for the domain
          example: My Domain
        enabled:
          type: boolean
          description: Is the domain enabled
          example: true
        geoip:
          type: boolean
          description: Is GeoIP functionality enabled for the domain
          example: true
        gtd:
          type: boolean
          description: Is Global Traffic Director enabled for the domain
          example: true
        template:
          type: integer
          description: >-
            The template to use for creating this domain. It will be linked to
            this template so any changes made to the template will apply to this
            domain.
          example: 83675283
        contacts:
          type: array
          description: Contactlists to be notified if the domain is updated
          items:
            type: integer
          example:
            - 2668228
            - 2668242
        vanityNameserver:
          type: integer
          description: The vanity nameserver to use for this domain.
          example: 82648967
        tags:
          type: array
          description: The numeric IDs of tags you want to apply to this domain
          items:
            type: integer
          example:
            - 824
            - 842
    simple-domain:
      type: object
      properties:
        id:
          type: integer
          description: A unique numeric ID for this domain
          example: 366246
        name:
          type: string
          description: The name of the domain
          example: example.com
        note:
          type: string
          description: A note for the domain
          example: My Domain
        status:
          type: string
          enum:
            - ACTIVE
            - SUSPENDED
            - TERMINATED
        enabled:
          type: boolean
          description: Is the domain enabled
          example: true
        version:
          type: integer
          description: The version of the domain resource
          example: 3
        geoip:
          type: boolean
          description: Is GeoIP functionality enabled for the domain
          example: true
        gtd:
          type: boolean
          description: Is Global Traffic Director enabled for the domain
          example: true
        tags:
          type: array
          description: An array of tags for this domain.
          items:
            $ref: "#/components/schemas/tag"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        links:
          type: object
          description: Links for domain objects
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/domains/366246"
            records:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/domains/366246/records"
    domainanalytics:
      type: object
      description: Analytics for a specific domain
      properties:
        queries:
          description: An array of analytics data for different types of query
          type: array
          items:
            description: Analytics for a particular query type
            type: object
            properties:
              type:
                type: string
                description: The type of query the analytics are for
                enum:
                  - geo_proximity
                  - standard
                  - geo_filter
                example: standard
              values:
                type: array
                description: Query counts for all dates within the requested range
                items:
                  type: object
                  description: Query count for a particular date
                  properties:
                    date:
                      type: string
                      format: date-time
                      example: "2022-01-10T00:00:00+00:00"
                    value:
                      type: integer
                      example: 342
              stats:
                description: Some statistics for these analytics
                type: object
                properties:
                  sum:
                    type: integer
                    description: The sum of queries for this date range
                    example: 1480
                  min:
                    type: integer
                    description: The minimum number of queries for one time period
                    example: 50
                  max:
                    type: integer
                    description: The maximum number of queries for one time period
                    example: 201
                  mean:
                    type: float
                    description: The mean average number of queries per time period
                    example: 105.7143
                  count:
                    type: integer
                    description: The number of time periods
                    example: 14
        start:
          description: The start date for the analytics
          type: string
          format: date-time
          example: "2022-01-10T00:00:00+00:00"
        end:
          description: The end date for the analytics
          type: string
          format: date-time
          example: "2022-01-24T00:00:00+00:00"
        stats:
          description: Some statistics for these analytics
          type: object
          properties:
            sum:
              type: integer
              description: The sum of queries for this date range
              example: 1480
            min:
              type: integer
              description: The minimum number of queries for one time period
              example: 50
            max:
              type: integer
              description: The maximum number of queries for one time period
              example: 201
            mean:
              type: float
              description: The mean average number of queries per time period
              example: 105.7143
            count:
              type: integer
              description: The number of time periods
              example: 14
        interval:
          description: Details about the interval between time periods in the analytics
          type: object
          properties:
            min:
              type: integer
              description: The minimum number of seconds between time periods
              example: 86400
            max:
              type: integer
              description: The maximum number of seconds between time periods
              example: 86400
            mean:
              type: float
              description: The mean average number of seconds between time periods
              example: 86400
        domain:
          $ref: "#/components/schemas/simple-domain"
        links:
          type: object
          properties:
            self:
              type: string
              description: The URL for these analytics
              example: >-
                https://api.dns.constellix.com/v4/domains/366246/analytics?start=20220110&end=20220124
            domain:
              type: string
              description: The URL for the domain
              example: "https://api.dns.constellix.com/v4/domains/366246"
    domainhistory:
      type: object
      properties:
        name:
          type: string
          description: The name of the domain
          example: example.com
        version:
          type: integer
          description: The version of the domain resource
          example: 3
        updatedAt:
          type: string
          format: date-time
        domain:
          $ref: "#/components/schemas/simple-domain"
    domainsnapshot:
      type: object
      properties:
        name:
          type: string
          description: The name of the domain
          example: example.com
        version:
          type: integer
          description: The version of the domain resource
          example: 3
        updatedAt:
          type: string
          format: date-time
        domain:
          $ref: "#/components/schemas/simple-domain"
    simple-ipfilter:
      type: object
      properties:
        id:
          type: integer
          description: The unique ID for this IP filter
          example: 47345837
        name:
          type: string
          description: The name for this IP filter
          example: My IP filter
        links:
          type: object
          description: Links for domain objects
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/ipfilters/47345837"
    simple-geoproximity:
      type: object
      description: Geo Proximity Location
      properties:
        id:
          type: integer
          description: The unique ID for the Geo Proximity location
          example: 4367769
        name:
          type: string
          description: The name of the Geo Proximity location
          example: My Geo Proximity Location
        links:
          type: object
          description: Links for domain objects
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/geoproximities/4367769"
    record:
      type: object
      description: An object representing a DNS record
      properties:
        id:
          type: integer
          description: A unique ID for this domain record
          example: 732673
        ttl:
          type: integer
          description: >-
            The time to live in seconds for this record. must be between 0 and
            2147483647
          example: 3600
        enabled:
          type: boolean
          description: >-
            Whether the record is enabled or not. A disabled record will return
            an NXDOMAIN response.
        name:
          type: string
          description: The name of the record
          example: www
        region:
          type: string
          description: The region for this record
          enum:
            - default
            - europe
            - us-east
            - us-west
            - asia-pacific
            - oceania
            - south-america
        ipfilter:
          $ref: "#/components/schemas/simple-ipfilter"
        geoproximity:
          $ref: "#/components/schemas/simple-geoproximity"
        ipfilterDrop:
          type: boolean
          description: "If the requesting IP matches the IP filter, don't return a response"
          example: true
        geoFailover:
          type: boolean
          description: >-
            Disable the record if all hosts fail. If all hosts fail, another
            matching IP Filter, nearest Proximity or World (Default) record will
            be used instead.
          example: true
        notes:
          type: string
          description: A note about the record. Max 512 characters.
          example: This is my DNS record
        skipLookup:
          type: boolean
          nullable: true
          description: >-
            Only used on POST or PATCH requests for ANAME records, used to
            specify whether the hostname should be looked up immediately. Will
            be null otherwise.
          example: null
        contacts:
          $ref: "#/components/schemas/simple-contactlist"
    failoverrecordvalue:
      type: object
      properties:
        enabled:
          description: >-
            Whether the failover entry is enabled or not. Disabled entries will
            not be included in a response
          type: boolean
        order:
          type: integer
          description: >-
            The sort order of the entry. Lower order entries are preferred over
            higher order entries
          example: 1
        sonarCheckId:
          type: integer
          description: The ID in Sonar to use for checking if the record should be used
          example: 76627
        active:
          description: Whether this entry is considered active or not
          type: boolean
          example: true
        failed:
          description: Does sonar consider this entry to be failed
          type: boolean
          example: false
        status:
          description: The status of the value in Sonar
          type: string
          example: N/A
    simple-pool:
      type: object
      properties:
        id:
          type: integer
          example: 7665
        links:
          type: object
          description: Links for the pool
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/pools/7665"
    value-a:
      type: object
      title: A
      description: Values for an A record
      properties:
        type:
          type: string
          description: The type of record
          enum:
            - A
        value:
          oneOf:
            - type: array
              title: Standard
              description: Standard record mode
              items:
                type: object
                properties:
                  enabled:
                    description: >-
                      Whether the entry is enabled or not. Disabled entries will
                      not be included in a response
                    type: boolean
                  value:
                    type: string
                    format: ipv4
                    example: 198.51.100.42
            - type: object
              title: Failover
              description: Failover record mode
              properties:
                mode:
                  type: string
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                values:
                  type: array
                  items:
                    allOf:
                      - $ref: "#/components/schemas/failoverrecordvalue"
                      - type: object
                        properties:
                          value:
                            type: string
                            format: ipv4
                            example: 198.51.100.42
            - type: array
              title: Round Robin Failover
              description: Round robin failover mode
              items:
                allOf:
                  - $ref: "#/components/schemas/failoverrecordvalue"
                  - type: object
                    properties:
                      value:
                        type: string
                        format: ipv4
                        example: 198.51.100.42
            - type: array
              title: Pools
              description: Pools
              items:
                $ref: "#/components/schemas/simple-pool"
    a:
      type: object
      title: A
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          description: A Record
          properties:
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
                - failover
                - pools
                - roundRobinFailover
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  type: array
                  description: The previous values in standard mode
                  items:
                    type: object
                    properties:
                      enabled:
                        description: >-
                          Whether the entry is enabled or not. Disabled entries
                          will not be included in a response
                        type: boolean
                      value:
                        type: string
                        format: ipv4
                        example: 198.51.100.42
                failover:
                  type: object
                  description: The previous values in failover mode
                  properties:
                    mode:
                      type: string
                      description: The failover mode
                      enum:
                        - normal
                        - "off"
                        - one-way
                    values:
                      type: array
                      items:
                        allOf:
                          - $ref: "#/components/schemas/failoverrecordvalue"
                          - type: object
                            properties:
                              value:
                                type: string
                                format: ipv4
                                example: 198.51.100.42
                pools:
                  type: array
                  description: The previous values in Pools mode
                  items:
                    $ref: "#/components/schemas/simple-pool"
                roundRobinFailover:
                  type: array
                  description: The previous values in Round-Robin Failover mode
                  items:
                    allOf:
                      - $ref: "#/components/schemas/failoverrecordvalue"
                      - type: object
                        properties:
                          value:
                            type: string
                            format: ipv4
                            example: 198.51.100.42
        - $ref: "#/components/schemas/value-a"
    value-aaaa:
      type: object
      title: AAAA
      description: Values for an AAAA record
      properties:
        type:
          type: string
          description: The type of record
          enum:
            - AAAA
        value:
          oneOf:
            - type: array
              title: Standard
              description: Standard record mode
              items:
                type: object
                properties:
                  enabled:
                    description: >-
                      Whether the entry is enabled or not. Disabled entries will
                      not be included in a response
                    type: boolean
                  value:
                    type: string
                    format: ipv6
                    example: "2001:db8::1"
            - type: object
              title: Failover
              description: Failover record mode
              properties:
                mode:
                  type: string
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                enabled:
                  description: Whether this failover value is enabled or not
                  type: boolean
                values:
                  type: array
                  items:
                    allOf:
                      - $ref: "#/components/schemas/failoverrecordvalue"
                      - type: object
                        properties:
                          value:
                            type: string
                            format: ipv6
                            example: "2001:db8::1"
            - type: array
              title: Round Robin Failover
              description: Round robin failover mode
              items:
                allOf:
                  - $ref: "#/components/schemas/failoverrecordvalue"
                  - type: object
                    properties:
                      value:
                        type: string
                        format: ipv6
                        example: "2001:db8::1"
            - description: Pools
              title: Pools
              type: array
              items:
                $ref: "#/components/schemas/simple-pool"
    aaaa:
      type: object
      title: AAAA
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          properties:
            type:
              type: string
              description: The type of record
              enum:
                - AAAA
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
                - failover
                - pools
                - roundrobin-failover
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  type: array
                  description: The previous values in standard mode
                  items:
                    type: object
                    properties:
                      enabled:
                        description: >-
                          Whether the entry is enabled or not. Disabled entries
                          will not be included in a response
                        type: boolean
                      value:
                        type: string
                        format: ipv6
                        example: "2001:db8::1"
                failover:
                  type: object
                  description: The previous values in failover mode
                  properties:
                    mode:
                      type: string
                      description: The failover mode
                      enum:
                        - normal
                        - "off"
                        - one-way
                    values:
                      type: array
                      items:
                        allOf:
                          - $ref: "#/components/schemas/failoverrecordvalue"
                          - type: object
                            properties:
                              value:
                                type: string
                                format: ipv6
                                example: "2001:db8::1"
                pools:
                  type: array
                  description: The previous values in Pools mode
                  items:
                    $ref: "#/components/schemas/simple-pool"
                roundRobinFailover:
                  type: array
                  description: The previous values in Round-Robin Failover mode
                  items:
                    allOf:
                      - $ref: "#/components/schemas/failoverrecordvalue"
                      - type: object
                        properties:
                          value:
                            type: string
                            format: ipv6
                            example: "2001:db8::1"
        - $ref: "#/components/schemas/value-aaaa"
    value-cname:
      type: object
      title: CNAME
      description: CNAME Record
      properties:
        type:
          type: string
          description: The type of record
          enum:
            - CNAME
        value:
          oneOf:
            - type: array
              title: Standard
              description: Standard record mode
              items:
                type: object
                properties:
                  enabled:
                    description: >-
                      Whether the entry is enabled or not. Disabled entries will
                      not be included in a response
                    type: boolean
                  value:
                    type: string
                    example: myrecord.example.com
            - type: object
              title: Failover
              description: Failover record mode
              properties:
                mode:
                  type: string
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                values:
                  type: array
                  items:
                    allOf:
                      - $ref: "#/components/schemas/failoverrecordvalue"
                      - type: object
                        properties:
                          value:
                            type: string
                            example: myrecord.example.com
            - type: array
              title: Pools
              description: Pools
              items:
                $ref: "#/components/schemas/simple-pool"
    cname:
      type: object
      title: CNAME
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          description: CNAME Record
          properties:
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
                - failover
                - pools
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  type: array
                  description: The previous values in standard mode
                  items:
                    type: object
                    properties:
                      enabled:
                        description: >-
                          Whether the entry is enabled or not. Disabled entries
                          will not be included in a response
                        type: boolean
                      value:
                        type: string
                        example: myrecord.example.com
                failover:
                  type: object
                  description: The previous values in failover mode
                  properties:
                    mode:
                      type: string
                      description: The failover mode
                      enum:
                        - normal
                        - "off"
                        - one-way
                    values:
                      type: array
                      items:
                        allOf:
                          - $ref: "#/components/schemas/failoverrecordvalue"
                          - type: object
                            properties:
                              value:
                                type: string
                                example: myrecord.example.com
                pools:
                  type: array
                  description: The previous values in Pools mode
                  items:
                    $ref: "#/components/schemas/simple-pool"
        - $ref: "#/components/schemas/value-cname"
    value-aname:
      type: object
      title: ANAME
      description: ANAME Record
      properties:
        type:
          type: string
          description: The type of record
          enum:
            - ANAME
        value:
          oneOf:
            - type: array
              title: Standard
              description: Standard record mode
              items:
                type: object
                properties:
                  enabled:
                    description: >-
                      Whether the entry is enabled or not. Disabled entries will
                      not be included in a response
                    type: boolean
                  value:
                    type: string
                    example: myrecord.example.com
            - type: object
              title: Failover
              description: Failover record mode
              properties:
                mode:
                  type: string
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                values:
                  type: array
                  items:
                    allOf:
                      - $ref: "#/components/schemas/failoverrecordvalue"
                      - type: object
                        properties:
                          value:
                            type: string
                            example: myrecord.example.com
            - type: array
              title: Pools
              description: Pools
              items:
                $ref: "#/components/schemas/simple-pool"
    aname:
      type: object
      title: ANAME
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          properties:
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
                - failover
                - pools
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  type: array
                  description: The previous values in standard mode
                  items:
                    type: object
                    properties:
                      enabled:
                        description: >-
                          Whether the entry is enabled or not. Disabled entries
                          will not be included in a response
                        type: boolean
                      value:
                        type: string
                        example: myrecord.example.com
                failover:
                  type: object
                  description: The previous values in failover mode
                  properties:
                    mode:
                      type: string
                      description: The failover mode
                      enum:
                        - normal
                        - "off"
                        - one-way
                    values:
                      type: array
                      items:
                        allOf:
                          - $ref: "#/components/schemas/failoverrecordvalue"
                          - type: object
                            properties:
                              value:
                                type: string
                                example: myrecord.example.com
                pools:
                  type: array
                  description: The previous values in Pools mode
                  items:
                    $ref: "#/components/schemas/simple-pool"
        - $ref: "#/components/schemas/value-aname"
    items:
      type: object
      properties:
        enabled:
          description: >-
            Whether the entry is enabled or not. Disabled entries will not be
            included in a response
          type: boolean
        tag:
          type: string
          description: Foo
          enum:
            - issue
            - issuewild
            - iodef
          example: issue
        data:
          type: string
          description: The value for this tag
          example: digicert.com
        flags:
          type: integer
          description: A flag byte for any flags on the record.
          example: 0
    value-caa:
      type: object
      title: CAA
      description: CAA Record
      properties:
        value:
          type: array
          description: Standard record mode
          items:
            type: object
            properties:
              enabled:
                description: >-
                  Whether the entry is enabled or not. Disabled entries will not
                  be included in a response
                type: boolean
              tag:
                type: string
                description: Foo
                enum:
                  - issue
                  - issuewild
                  - iodef
                example: issue
              data:
                type: string
                description: The value for this tag
                example: digicert.com
              flags:
                type: integer
                description: A flag byte for any flags on the record.
                example: 0
    caa:
      type: object
      title: CAA
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          description: CAA Record
          properties:
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  type: array
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/items"
        - $ref: "#/components/schemas/value-caa"
    value-items:
      type: object
      properties:
        enabled:
          description: >-
            Whether the entry is enabled or not. Disabled entries will not be
            included in a response
          type: boolean
        certificateType:
          description: An integer representing the type of certificate
          type: integer
          example: 1
        keyTag:
          description: An integer representing the key tag
          type: integer
          example: 1
        algorithm:
          description: An integer representing the algorithm
          type: integer
          example: 1
        certificate:
          description: A base 64 encoded string containing the certificate information
          type: string
          format: base64 encoded
          example: 1
    value-cert:
      type: object
      title: CERT
      description: CERT Record
      properties:
        value:
          type: array
          description: Standard record mode
          items:
            type: object
            properties:
              enabled:
                description: >-
                  Whether the entry is enabled or not. Disabled entries will not
                  be included in a response
                type: boolean
              certificateType:
                description: An integer representing the type of certificate
                type: integer
                example: 1
              keyTag:
                description: An integer representing the key tag
                type: integer
                example: 1
              algorithm:
                description: An integer representing the algorithm
                type: integer
                example: 1
              certificate:
                description: >-
                  A base 64 encoded string containing the certificate
                  information
                type: string
                format: base64 encoded
                example: 1
    cert:
      type: object
      title: CERT
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          description: CAA Record
          properties:
            type:
              type: string
              description: The type of record
              enum:
                - CAA
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  type: array
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-items"
        - $ref: "#/components/schemas/value-cert"
    properties-value-items:
      type: object
      properties:
        enabled:
          description: >-
            Whether the entry is enabled or not. Disabled entries will not be
            included in a response
          type: boolean
        cpu:
          description: Text representing the CPU
          type: string
          example: x86
        os:
          description: Text representing the OS
          type: string
          example: Linux
    value-hinfo:
      type: object
      title: HINFO
      description: HINFO Record
      properties:
        value:
          type: array
          description: Standard record mode
          items:
            type: object
            properties:
              enabled:
                description: >-
                  Whether the entry is enabled or not. Disabled entries will not
                  be included in a response
                type: boolean
              cpu:
                description: Text representing the CPU
                type: string
                example: x86
              os:
                description: Text representing the OS
                type: string
                example: Linux
    hinfo:
      type: object
      title: HINFO
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          description: HINFO Record
          properties:
            type:
              type: string
              description: The type of record
              enum:
                - HINFO
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  type: array
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/properties-value-items"
        - $ref: "#/components/schemas/value-hinfo"
    value-mx_properties-value-items:
      type: object
      properties:
        enabled:
          description: >-
            Whether the entry is enabled or not. Disabled entries will not be
            included in a response
          type: boolean
        server:
          description: The hostname of the mail server
          type: string
          example: mail.example.com
        priority:
          description: A number representing the priority of the mail server
          type: integer
          example: 10
    value-mx:
      type: object
      title: MX
      description: MX Record
      properties:
        value:
          type: array
          description: Standard record mode
          items:
            type: object
            properties:
              enabled:
                description: >-
                  Whether the entry is enabled or not. Disabled entries will not
                  be included in a response
                type: boolean
              server:
                description: The hostname of the mail server
                type: string
                example: mail.example.com
              priority:
                description: A number representing the priority of the mail server
                type: integer
                example: 10
    mx:
      type: object
      title: MX
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          description: MX Record
          properties:
            type:
              type: string
              description: The type of record
              enum:
                - MX
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  type: array
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-mx_properties-value-items"
        - $ref: "#/components/schemas/value-mx"
    value-naptr_properties-value-items:
      type: object
      properties:
        enabled:
          description: >-
            Whether the entry is enabled or not. Disabled entries will not be
            included in a response
          type: boolean
        order:
          description: The order of the record
          type: integer
          example: 100
        preference:
          description: The preference for the record
          type: integer
          example: 10
        flags:
          description: Any flags for this record
          type: string
          example: S
        service:
          description: The service the record is used for
          type: string
          example: SIP+D2U
        regularExpression:
          description: A regular expression to use
          type: string
          example: "!^.*$!sip:customer-service@example.com!"
        replacement:
          description: The replacement for the regular expression
          type: string
          example: _sip._udp.example.com.
    value-naptr:
      type: object
      title: NAPTR
      description: NAPTR Record
      properties:
        value:
          type: array
          description: Standard record mode
          items:
            type: object
            properties:
              enabled:
                description: >-
                  Whether the entry is enabled or not. Disabled entries will not
                  be included in a response
                type: boolean
              order:
                description: The order of the record
                type: integer
                example: 100
              preference:
                description: The preference for the record
                type: integer
                example: 10
              flags:
                description: Any flags for this record
                type: string
                example: S
              service:
                description: The service the record is used for
                type: string
                example: SIP+D2U
              regularExpression:
                description: A regular expression to use
                type: string
                example: "!^.*$!sip:customer-service@example.com!"
              replacement:
                description: The replacement for the regular expression
                type: string
                example: _sip._udp.example.com.
    naptr:
      type: object
      title: NAPTR
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          description: NAPTR Record
          properties:
            type:
              type: string
              description: The type of record
              enum:
                - NAPTR
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  type: array
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-naptr_properties-value-items"
        - $ref: "#/components/schemas/value-naptr"
    value-ns_properties-value-items:
      type: object
      properties:
        enabled:
          description: >-
            Whether the entry is enabled or not. Disabled entries will not be
            included in a response
          type: boolean
        host:
          description: The hostname for the nameserver
          type: string
          example: ns1.example.com
    value-ns:
      type: object
      title: NS
      description: NS Record
      properties:
        value:
          type: array
          description: Standard record mode
          items:
            type: object
            properties:
              enabled:
                description: >-
                  Whether the entry is enabled or not. Disabled entries will not
                  be included in a response
                type: boolean
              host:
                description: The hostname for the nameserver
                type: string
                example: ns1.example.com
    ns:
      type: object
      title: NS
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          description: NS Record
          properties:
            type:
              type: string
              description: The type of record
              enum:
                - NS
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  type: array
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-ns_properties-value-items"
        - $ref: "#/components/schemas/value-ns"
    value-rp_properties-value-items:
      type: object
      properties:
        enabled:
          description: >-
            Whether the entry is enabled or not. Disabled entries will not be
            included in a response
          type: boolean
        mailbox:
          description: The email of the person responsible. Replace @ with .
          type: string
          example: admin.example.com
        txt:
          description: The name of a TXT record containing more information
          type: string
          example: admin.example.com
    value-rp:
      type: object
      title: RP
      description: RP Record
      properties:
        value:
          type: array
          description: Standard record mode
          items:
            type: object
            properties:
              enabled:
                description: >-
                  Whether the entry is enabled or not. Disabled entries will not
                  be included in a response
                type: boolean
              mailbox:
                description: The email of the person responsible. Replace @ with .
                type: string
                example: admin.example.com
              txt:
                description: The name of a TXT record containing more information
                type: string
                example: admin.example.com
    rp:
      type: object
      title: RP
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          description: RP Record
          properties:
            type:
              type: string
              description: The type of record
              enum:
                - RP
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  type: array
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-rp_properties-value-items"
        - $ref: "#/components/schemas/value-rp"
    value-ptr_properties-value-items:
      type: object
      properties:
        enabled:
          description: >-
            Whether the entry is enabled or not. Disabled entries will not be
            included in a response
          type: boolean
        system:
          description: The hostname for the IP address
          type: string
          example: system.example.com
    value-ptr:
      type: object
      title: PTR
      description: PTR Record
      properties:
        value:
          type: array
          description: Standard record mode
          items:
            type: object
            properties:
              enabled:
                description: >-
                  Whether the entry is enabled or not. Disabled entries will not
                  be included in a response
                type: boolean
              system:
                description: The hostname for the IP address
                type: string
                example: system.example.com
    ptr:
      type: object
      title: PTR
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          description: PTR Record
          properties:
            type:
              type: string
              description: The type of record
              enum:
                - PTR
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  type: array
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-ptr_properties-value-items"
        - $ref: "#/components/schemas/value-ptr"
    value-txt_properties-value-items:
      type: object
      properties:
        enabled:
          description: >-
            Whether the entry is enabled or not. Disabled entries will not be
            included in a response
          type: boolean
        value:
          description: The text record value
          type: string
          example: My text record
    value-txt:
      type: object
      title: TXT
      description: TXT Record
      properties:
        value:
          type: array
          description: Standard record mode
          items:
            type: object
            properties:
              enabled:
                description: >-
                  Whether the entry is enabled or not. Disabled entries will not
                  be included in a response
                type: boolean
              value:
                description: The text record value
                type: string
                example: My text record
    txt:
      type: object
      title: TXT
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          description: TXT Record
          properties:
            type:
              type: string
              description: The type of record
              enum:
                - TXT
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  type: array
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-txt_properties-value-items"
        - $ref: "#/components/schemas/value-txt"
    value-spf_properties-value-items:
      type: object
      properties:
        enabled:
          description: >-
            Whether the entry is enabled or not. Disabled entries will not be
            included in a response
          type: boolean
        value:
          description: The SPF record value
          type: string
          example: "v=spf1 include:example.com ?all"
    value-spf:
      type: object
      title: SPF
      description: SPF Record
      properties:
        value:
          type: array
          description: Standard record mode
          items:
            type: object
            properties:
              enabled:
                description: >-
                  Whether the entry is enabled or not. Disabled entries will not
                  be included in a response
                type: boolean
              value:
                description: The SPF record value
                type: string
                example: "v=spf1 include:example.com ?all"
    spf:
      type: object
      title: SPF
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          description: SPF Record
          properties:
            type:
              type: string
              description: The type of record
              enum:
                - SPF
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  type: array
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-spf_properties-value-items"
        - $ref: "#/components/schemas/value-spf"
    value-srv_properties-value-items:
      type: object
      properties:
        enabled:
          description: >-
            Whether the entry is enabled or not. Disabled entries will not be
            included in a response
          type: boolean
        weight:
          description: A weight for this record
          type: integer
          example: 10
        priority:
          description: A priority for this record
          type: integer
          example: 0
        port:
          description: The port the service runs on
          type: integer
          example: 5060
        host:
          description: The hostname for the service
          type: string
          example: sip.example.com.
    value-srv:
      type: object
      title: SRV
      description: SRV Record
      properties:
        value:
          type: array
          description: Standard record mode
          items:
            type: object
            properties:
              enabled:
                description: >-
                  Whether the entry is enabled or not. Disabled entries will not
                  be included in a response
                type: boolean
              weight:
                description: A weight for this record
                type: integer
                example: 10
              priority:
                description: A priority for this record
                type: integer
                example: 0
              port:
                description: The port the service runs on
                type: integer
                example: 5060
              host:
                description: The hostname for the service
                type: string
                example: sip.example.com.
    srv:
      type: object
      title: SRV
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          description: SRV Record
          properties:
            type:
              type: string
              description: The type of record
              enum:
                - SRV
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  type: array
                  description: The previous values in standard mode
                  items:
                    $ref: "#/components/schemas/value-srv_properties-value-items"
        - $ref: "#/components/schemas/value-srv"
    value:
      type: object
      properties:
        hard:
          description: >-
            If this is a frame redirect, don't include the URL entered in the
            browser
          type: boolean
          example: false
        redirectType:
          description: "The type of redirect, either 301, 302 or frame."
          type: string
          example: 302
        title:
          description: The title of the page containing the redirect frame
          type: string
          example: My Website
        description:
          description: The description to include in meta tags
          type: string
          example: A website containing example data
        keywords:
          description: Meta keywords for the page containing the frame
          type: string
          example: Example
        url:
          description: The URL to redirect to
          type: string
          format: url
          example: "https://www.example.com"
    value-http:
      type: object
      title: HTTP
      description: HTTP Record
      properties:
        value:
          type: object
          properties:
            hard:
              description: >-
                If this is a frame redirect, don't include the URL entered in
                the browser
              type: boolean
              example: false
            redirectType:
              description: "The type of redirect, either 301, 302 or frame."
              type: string
              example: 302
            title:
              description: The title of the page containing the redirect frame
              type: string
              example: My Website
            description:
              description: The description to include in meta tags
              type: string
              example: A website containing example data
            keywords:
              description: Meta keywords for the page containing the frame
              type: string
              example: Example
            url:
              description: The URL to redirect to
              type: string
              format: url
              example: "https://www.example.com"
    http:
      type: object
      title: HTTP Redirection
      allOf:
        - $ref: "#/components/schemas/record"
        - type: object
          description: HTTP Redirection Record
          properties:
            type:
              type: string
              description: The type of record
              enum:
                - HTTP
            mode:
              type: string
              description: How the record should work
              enum:
                - standard
            lastValues:
              type: object
              description: The previous values of the record in the different modes
              properties:
                standard:
                  $ref: "#/components/schemas/value"
        - $ref: "#/components/schemas/value-http"
    domainrecord:
      type: object
      allOf:
        - oneOf:
            - $ref: "#/components/schemas/a"
            - $ref: "#/components/schemas/aaaa"
            - $ref: "#/components/schemas/cname"
            - $ref: "#/components/schemas/aname"
            - $ref: "#/components/schemas/caa"
            - $ref: "#/components/schemas/cert"
            - $ref: "#/components/schemas/hinfo"
            - $ref: "#/components/schemas/mx"
            - $ref: "#/components/schemas/naptr"
            - $ref: "#/components/schemas/ns"
            - $ref: "#/components/schemas/rp"
            - $ref: "#/components/schemas/ptr"
            - $ref: "#/components/schemas/txt"
            - $ref: "#/components/schemas/spf"
            - $ref: "#/components/schemas/srv"
            - $ref: "#/components/schemas/http"
        - type: object
          properties:
            domain:
              $ref: "#/components/schemas/simple-domain"
            links:
              type: object
              description: Links for the domain record
              properties:
                self:
                  type: string
                  format: url
                  example: >-
                    https://api.dns.constellix.com/v4/domains/366246/records/732673
    value-a-request:
      type: object
      title: A
      description: Values for an A record
      properties:
        value:
          oneOf:
            - type: array
              title: Standard
              description: Standard record mode
              items:
                type: object
                properties:
                  enabled:
                    description: >-
                      Whether the entry is enabled or not. Disabled entries will
                      not be included in a response
                    type: boolean
                  value:
                    type: string
                    format: ipv4
                    example: 198.51.100.42
            - type: object
              title: Failover
              description: Failover record mode
              properties:
                mode:
                  type: string
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                values:
                  type: array
                  items:
                    type: object
                    properties:
                      enabled:
                        description: >-
                          Whether the failover entry is enabled or not. Disabled
                          entries will not be included in a response
                        type: boolean
                      order:
                        type: integer
                        description: >-
                          The sort order of the entry. Lower order entries are
                          preferred over higher order entries
                        example: 1
                      sonarCheckId:
                        type: integer
                        description: >-
                          The ID in Sonar to use for checking if the record
                          should be used
                        example: 76627
                      value:
                        type: string
                        format: ipv4
                        example: 198.51.100.42
            - type: array
              title: Round Robin Failover
              description: Round robin failover mode
              items:
                type: object
                properties:
                  enabled:
                    description: >-
                      Whether the failover entry is enabled or not. Disabled
                      entries will not be included in a response
                    type: boolean
                  order:
                    type: integer
                    description: >-
                      The sort order of the entry. Lower order entries are
                      preferred over higher order entries
                    example: 1
                  sonarCheckId:
                    type: integer
                    description: >-
                      The ID in Sonar to use for checking if the record should
                      be used
                    example: 76627
                  value:
                    type: string
                    format: ipv4
                    example: 198.51.100.42
            - type: array
              title: Pools
              description: Pools
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 7665
    value-aaaa-request:
      type: object
      title: AAAA
      description: Values for an AAAA record
      properties:
        value:
          oneOf:
            - type: array
              title: Standard
              description: Standard record mode
              items:
                type: object
                properties:
                  enabled:
                    description: >-
                      Whether the entry is enabled or not. Disabled entries will
                      not be included in a response
                    type: boolean
                  value:
                    type: string
                    format: ipv6
                    example: "2001:db8::1"
            - type: object
              title: Failover
              description: Failover record mode
              properties:
                mode:
                  type: string
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                enabled:
                  description: Whether this failover value is enabled or not
                  type: boolean
                values:
                  type: array
                  items:
                    type: object
                    properties:
                      enabled:
                        description: >-
                          Whether the failover entry is enabled or not. Disabled
                          entries will not be included in a response
                        type: boolean
                      order:
                        type: integer
                        description: >-
                          The sort order of the entry. Lower order entries are
                          preferred over higher order entries
                        example: 1
                      sonarCheckId:
                        type: integer
                        description: >-
                          The ID in Sonar to use for checking if the record
                          should be used
                        example: 76627
                      active:
                        description: Whether this entry is considered active or not
                        type: boolean
                        example: true
                      value:
                        type: string
                        format: ipv6
                        example: "2001:db8::1"
            - type: array
              title: Round Robin Failover
              description: Round robin failover mode
              items:
                type: object
                properties:
                  enabled:
                    description: >-
                      Whether the failover entry is enabled or not. Disabled
                      entries will not be included in a response
                    type: boolean
                  order:
                    type: integer
                    description: >-
                      The sort order of the entry. Lower order entries are
                      preferred over higher order entries
                    example: 1
                  sonarCheckId:
                    type: integer
                    description: >-
                      The ID in Sonar to use for checking if the record should
                      be used
                    example: 76627
                  active:
                    description: Whether this entry is considered active or not
                    type: boolean
                    example: true
                  value:
                    type: string
                    format: ipv6
                    example: "2001:db8::1"
            - description: Pools
              title: Pools
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 7665
    value-cname-request:
      type: object
      title: CNAME
      description: CNAME Record
      properties:
        value:
          oneOf:
            - type: array
              title: Standard
              description: Standard record mode
              items:
                type: object
                properties:
                  enabled:
                    description: >-
                      Whether the entry is enabled or not. Disabled entries will
                      not be included in a response
                    type: boolean
                  value:
                    type: string
                    format: ipv6
                    example: myrecord.example.com
            - type: object
              title: Failover
              description: Failover record mode
              properties:
                mode:
                  type: string
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                enabled:
                  description: Whether this failover value is enabled or not
                  type: boolean
                values:
                  type: array
                  items:
                    type: object
                    properties:
                      enabled:
                        description: >-
                          Whether the failover entry is enabled or not. Disabled
                          entries will not be included in a response
                        type: boolean
                      order:
                        type: integer
                        description: >-
                          The sort order of the entry. Lower order entries are
                          preferred over higher order entries
                        example: 1
                      sonarCheckId:
                        type: integer
                        description: >-
                          The ID in Sonar to use for checking if the record
                          should be used
                        example: 76627
                      active:
                        description: Whether this entry is considered active or not
                        type: boolean
                        example: true
                      value:
                        type: string
                        format: ipv6
                        example: myrecord.example.com
            - description: Pools
              title: Pools
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 7665
    value-aname-request:
      type: object
      title: ANAME
      description: ANAME Record
      properties:
        value:
          oneOf:
            - type: array
              title: Standard
              description: Standard record mode
              items:
                type: object
                properties:
                  enabled:
                    description: >-
                      Whether the entry is enabled or not. Disabled entries will
                      not be included in a response
                    type: boolean
                  value:
                    type: string
                    format: ipv6
                    example: myrecord.example.com
            - type: object
              title: Failover
              description: Failover record mode
              properties:
                mode:
                  type: string
                  description: The failover mode
                  enum:
                    - normal
                    - "off"
                    - one-way
                enabled:
                  description: Whether this failover value is enabled or not
                  type: boolean
                values:
                  type: array
                  items:
                    type: object
                    properties:
                      enabled:
                        description: >-
                          Whether the failover entry is enabled or not. Disabled
                          entries will not be included in a response
                        type: boolean
                      order:
                        type: integer
                        description: >-
                          The sort order of the entry. Lower order entries are
                          preferred over higher order entries
                        example: 1
                      sonarCheckId:
                        type: integer
                        description: >-
                          The ID in Sonar to use for checking if the record
                          should be used
                        example: 76627
                      active:
                        description: Whether this entry is considered active or not
                        type: boolean
                        example: true
                      value:
                        type: string
                        format: ipv6
                        example: myrecord.example.com
            - description: Pools
              title: Pools
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 7665
    record-create:
      type: object
      allOf:
        - type: object
          required:
            - type
            - value
          properties:
            name:
              type: string
              description: The name for the record
              example: www
            enabled:
              type: boolean
              description: Whether the record is enabled
              example: true
            ttl:
              type: integer
              description: How long DNS servers should cache the record for
              example: 60
            notes:
              type: string
              description: A description of the record. It must be 512 characters or less.
              example: This is my A record
            skipLookup:
              type: boolean
              nullable: true
              description: >-
                Only used on POST or PATCH requests for ANAME records, used to
                specify whether the hostname should be looked up immediately.
                Will be null otherwise.
              example: true
            region:
              type: string
              description: Optional region for this record. Will default to 'default'.
              example: europe
              enum:
                - default
                - europe
                - us-east
                - us-west
                - asia-pacific
                - oceania
                - south-america
            ipfilter:
              type: integer
              description: >-
                The integer ID of an IP Filter to use for this record. Cannot be
                used with GeoPeoximity.
              example: 47345837
            geoproximity:
              type: integer
              description: >-
                The integer ID of a GeoProximity to use for this record. Cannot
                be used with IP Filter.
              example: 4367769
            ipfilterDrop:
              type: boolean
              description: >-
                If the requesting IP matches the IP filter, don't return a
                response
              example: true
            geoFailover:
              type: boolean
              description: >-
                Disable the record if all hosts fail. If all hosts fail, another
                matching IP Filter, nearest Proximity or World (Default) record
                will be used instead.
              example: true
            contacts:
              type: array
              description: >-
                Contact lists to be notified if a failover happens in a failover
                mode.
              items:
                type: integer
                description: Numeric ID for the contact list
                example: 2668228
        - oneOf:
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                        - failover
                        - roundrobin-failover
                        - pools
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - A
                - $ref: "#/components/schemas/value-a-request"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                        - failover
                        - roundrobin-failover
                        - pools
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - AAAA
                - $ref: "#/components/schemas/value-aaaa-request"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                        - failover
                        - pools
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - CNAME
                - $ref: "#/components/schemas/value-cname-request"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                        - failover
                        - pools
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - ANAME
                - $ref: "#/components/schemas/value-aname-request"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - CAA
                - $ref: "#/components/schemas/value-caa"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - CERT
                - $ref: "#/components/schemas/value-cert"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - HINFO
                - $ref: "#/components/schemas/value-hinfo"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - MX
                - $ref: "#/components/schemas/value-mx"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - HTTP
                - $ref: "#/components/schemas/value-http"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - NAPTR
                - $ref: "#/components/schemas/value-naptr"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - NS
                - $ref: "#/components/schemas/value-ns"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - PTR
                - $ref: "#/components/schemas/value-ptr"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - RP
                - $ref: "#/components/schemas/value-rp"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - SPF
                - $ref: "#/components/schemas/value-spf"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - SRV
                - $ref: "#/components/schemas/value-srv"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record
                      example: standard
                      enum:
                        - standard
                    type:
                      type: string
                      description: The type of record
                      enum:
                        - TXT
                - $ref: "#/components/schemas/value-txt"
    record-update:
      allOf:
        - type: object
          properties:
            name:
              type: string
              description: The name for the record
              example: www
            enabled:
              type: boolean
              description: Whether the record is enabled
              example: true
            ttl:
              type: integer
              description: How long DNS servers should cache the record for
              example: 60
            notes:
              type: string
              description: A description of the record. It must be 512 characters or less.
              example: This is my A record
            skipLookup:
              type: boolean
              nullable: true
              description: >-
                Only used on POST or PATCH requests for ANAME records, used to
                specify whether the hostname should be looked up immediately.
                Will be null otherwise.
              example: true
            region:
              type: string
              description: Optional region for this record. Will default to 'default'.
              example: europe
              enum:
                - default
                - europe
                - us-east
                - us-west
                - asia-pacific
                - oceania
                - south-america
            ipfilter:
              type: integer
              description: >-
                The integer ID of an IP Filter to use for this record. Cannot be
                used with GeoPeoximity.
              example: 47345837
            geoproximity:
              type: integer
              description: >-
                The integer ID of a GeoProximity to use for this record. Cannot
                be used with IP Filter.
              example: 4367769
            ipfilterDrop:
              type: boolean
              description: >-
                If the requesting IP matches the IP filter, don't return a
                response
              example: true
            geoFailover:
              type: boolean
              description: >-
                Disable the record if all hosts fail. If all hosts fail, another
                matching IP Filter, nearest Proximity or World (Default) record
                will be used instead.
              example: true
            contacts:
              type: array
              description: >-
                Contact lists to be notified if a failover happens in a failover
                mode.
              items:
                type: integer
                description: Numeric ID for the contact list
                example: 2668228
        - oneOf:
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                        - failover
                        - roundrobin-failover
                        - pools
                - $ref: "#/components/schemas/value-a-request"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                        - failover
                        - roundrobin-failover
                        - pools
                - $ref: "#/components/schemas/value-aaaa-request"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                        - failover
                        - pools
                - $ref: "#/components/schemas/value-cname-request"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                        - failover
                        - pools
                - $ref: "#/components/schemas/value-aname-request"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                - $ref: "#/components/schemas/value-caa"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                - $ref: "#/components/schemas/value-cert"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                - $ref: "#/components/schemas/value-hinfo"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                - $ref: "#/components/schemas/value-http"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                - $ref: "#/components/schemas/value-mx"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                - $ref: "#/components/schemas/value-naptr"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                - $ref: "#/components/schemas/value-ns"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                - $ref: "#/components/schemas/value-ptr"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                - $ref: "#/components/schemas/value-rp"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                - $ref: "#/components/schemas/value-spf"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                - $ref: "#/components/schemas/value-srv"
            - allOf:
                - type: object
                  properties:
                    mode:
                      type: string
                      description: The current mode for this record.
                      example: standard
                      enum:
                        - standard
                - $ref: "#/components/schemas/value-txt"
    template:
      type: object
      description: A domain template
      properties:
        id:
          type: integer
          description: The unique ID for this template
          example: 83675283
        name:
          type: string
          description: The name for the template
          example: My Template
        version:
          type: integer
          description: The version of the template resource
          example: 3
        geoip:
          type: boolean
          description: Is GeoIP functionality enabled for the template
          example: true
        gtd:
          type: boolean
          description: Is Global Traffic Director enabled for the template
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        links:
          type: object
          description: Links for the template
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/templates/83675283"
            records:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/templates/83675283/records"
    template-createupdate:
      type: object
      properties:
        name:
          type: string
          description: The name of the template
          example: My New Template
        geoip:
          type: boolean
          description: Is GeoIP functionality enabled for the template
          example: true
        gtd:
          type: boolean
          description: Is Global Traffic Director enabled for the template
          example: true
    templaterecord:
      type: object
      allOf:
        - oneOf:
            - $ref: "#/components/schemas/a"
            - $ref: "#/components/schemas/aaaa"
            - $ref: "#/components/schemas/cname"
            - $ref: "#/components/schemas/aname"
            - $ref: "#/components/schemas/caa"
            - $ref: "#/components/schemas/cert"
            - $ref: "#/components/schemas/hinfo"
            - $ref: "#/components/schemas/mx"
            - $ref: "#/components/schemas/naptr"
            - $ref: "#/components/schemas/ns"
            - $ref: "#/components/schemas/rp"
            - $ref: "#/components/schemas/ptr"
            - $ref: "#/components/schemas/txt"
            - $ref: "#/components/schemas/spf"
            - $ref: "#/components/schemas/srv"
            - $ref: "#/components/schemas/http"
        - type: object
          properties:
            template:
              $ref: "#/components/schemas/simple-template"
            links:
              type: object
              description: Links for the domain record
              properties:
                self:
                  type: string
                  format: url
                  example: >-
                    https://api.dns.constellix.com/v4/templates/83675283/records/732673
    poolito:
      type: object
      properties:
        enabled:
          type: boolean
          description: Is Ito enabled for this pool?
          example: true
        config:
          type: object
          description: The Ito configuration
          properties:
            period:
              type: integer
              description: The number of seconds between each check
              enum:
                - 30
                - 60
                - 120
                - 180
                - 240
                - 300
              example: 60
            maximumNumberOfResults:
              type: integer
              description: The maximum number of results to return
              example: 1
            deviationAllowance:
              type: integer
              description: Percentage of how much is the response time allowed to deviate?
              enum:
                - 10
                - 20
                - 30
                - 40
                - 50
                - 60
                - 70
                - 80
                - 90
              example: 90
            monitoringRegion:
              type: string
              description: Where monitoring should be performed from
              enum:
                - world
                - asiapac
                - europe
                - nacentral
                - naeast
                - nawest
                - oceania
                - southamerica
            handicapFactor:
              type: string
              enum:
                - none
                - percent
                - speed
              example: percent
    poolindex:
      type: object
      properties:
        id:
          type: integer
          example: 7665
        type:
          type: string
          description: The type of pool
          enum:
            - A
            - AAAA
            - CNAME
          example: A
        name:
          type: string
          example: My Pool
        return:
          type: integer
          description: >-
            The minimum number of entries from the pool to return when queried.
            Between 0 and 64.
          example: 1
        minimumFailover:
          type: integer
          description: >-
            The number of records that must be available for this pool to be
            used for failover. Between 0 and 64.
          example: 1
        failed:
          type: boolean
          description: Whether the pool is considered failed or not
          example: false
        enabled:
          type: boolean
          description: Whether the pool is enabled or not
          example: true
        domains:
          type: array
          description: Domains that are using this pool
          items:
            $ref: "#/components/schemas/simple-domain"
        templates:
          type: array
          description: Templates that are using this pool
          items:
            $ref: "#/components/schemas/simple-template"
        contacts:
          type: array
          description: Contactlists that will be notified when the pool is updated
          items:
            $ref: "#/components/schemas/simple-contactlist"
        ito:
          $ref: "#/components/schemas/poolito"
        values:
          type: array
          description: The values for this pool
          items:
            type: object
            description: A possible value for the pool. Depends on the type of pool.
            properties:
              value:
                oneOf:
                  - type: string
                    format: ipv4
                    example: 198.51.100.42
                  - type: string
                    format: ipv6
                    example: "2001:db8::1"
                  - type: string
                    format: hostname
                    example: www.example.com
              weight:
                type: integer
                description: A weight for the value. Must be between 1 amd 1000000
                example: 1000
        createdAt:
          type: string
          format: date-time
          example: "2020-10-14T18:30:36+00:00"
        updatedAt:
          type: string
          format: date-time
          example: "2020-10-14T18:30:36+00:00"
        links:
          type: object
          description: Links for the pool
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/pools/7665"
    pool-createupdate:
      type: object
      properties:
        type:
          type: string
          description: "The type of pool, either A, AAAA or CNAME"
          enum:
            - A
            - AAAA
            - CNAME
          example: A
        name:
          type: string
          description: A name for the pool
          example: My Pool
        return:
          type: integer
          description: >-
            The minimum number of entries from the pool to return when queried.
            Between 0 and 64.
          example: 1
        minimumFailover:
          type: integer
          description: >-
            The number of records that must be available for this pool to be
            used for failover. Between 0 and 64.
          example: 1
        enabled:
          type: boolean
          description: Whether the pool is enabled or not
          example: true
        values:
          type: array
          description: The values for this pool
          items:
            type: object
            description: A possible value for the pool. Depends on the type of pool.
            properties:
              value:
                oneOf:
                  - type: string
                    format: ipv4
                    example: 198.51.100.42
                  - type: string
                    format: ipv6
                    example: "2001:db8::1"
                  - type: string
                    format: hostname
                    example: www.example.com
              weight:
                type: integer
                description: A weight for the value. Must be between 1 and 1000000
                example: 1000
              enabled:
                type: boolean
                description: Is this value enabled or not?
                example: true
              handicap:
                type: integer
                description: A handicap for this value
                example: 10
              policy:
                type: string
                description: The failover/check policy for this value
                enum:
                  - follow_sonar
                  - always_off
                  - always_on
                  - off_on_failure
              sonarCheckId:
                type: integer
                description: The ID of the check to use from Sonar
                example: 76627
        contacts:
          type: array
          description: Contact lists to be emailed when this pool changes
          items:
            type: integer
          example:
            - 2668228
            - 2668242
        ito:
          $ref: "#/components/schemas/poolito"
    pool:
      type: object
      properties:
        id:
          type: integer
          example: 7665
        type:
          type: string
          description: The type of pool
          enum:
            - A
            - AAAA
            - CNAME
          example: A
        name:
          type: string
          example: My Pool
        return:
          type: integer
          description: >-
            The minimum number of entries from the pool to return when queried.
            Between 0 and 64.
          example: 1
        minimumFailover:
          type: integer
          description: >-
            The number of records that must be available for this pool to be
            used for failover. Between 0 and 64.
          example: 1
        failed:
          type: boolean
          description: Whether the pool is considered failed or not
          example: false
        enabled:
          type: boolean
          description: Whether the pool is enabled or not
          example: true
        domains:
          type: array
          description: Domains that are using this pool
          items:
            $ref: "#/components/schemas/simple-domain"
        templates:
          type: array
          description: Templates that are using this pool
          items:
            $ref: "#/components/schemas/simple-template"
        contacts:
          type: array
          description: Contactlists that will be notified when the pool is updated
          items:
            $ref: "#/components/schemas/simple-contactlist"
        ito:
          $ref: "#/components/schemas/poolito"
        values:
          type: array
          description: The values for this pool
          items:
            type: object
            description: A possible value for the pool. Depends on the type of pool.
            properties:
              value:
                oneOf:
                  - type: string
                    format: ipv4
                    example: 198.51.100.42
                  - type: string
                    format: ipv6
                    example: "2001:db8::1"
                  - type: string
                    format: hostname
                    example: www.example.com
              weight:
                type: integer
                description: A weight for the value. Must be between 1 and 1000000
                example: 1000
              enabled:
                type: boolean
                description: Is this value enabled or not?
                example: true
              activated:
                type: boolean
                description: Is the value active or not?
                example: true
              failed:
                type: boolean
                description: Is this value considered failed by monitoring
                example: true
              speed:
                type: float
                description: The response time in the last check
                example: 5.2
              handicap:
                type: float
                description: A handicap for this value
                example: 5
              policy:
                type: string
                description: The failover/check policy for this value
                enum:
                  - follow_sonar
                  - always_off
                  - always_on
                  - off_on_failure
              sonarCheckId:
                type: integer
                description: The ID of the check to use from Sonar
                example: 76627
        createdAt:
          type: string
          format: date-time
          example: "2020-10-14T18:30:36+00:00"
        updatedAt:
          type: string
          format: date-time
          example: "2020-10-14T18:30:36+00:00"
        links:
          type: object
          description: Links for the pool
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/pools/7665"
    region:
      type: object
      description: IP Filter Region
      properties:
        continent:
          type: string
          description: The continent for this region
          example: NA
        country:
          type: string
          description: The country for the region
          example: US
        region:
          type: string
          description: The region code
          example: FL
        asn:
          type: integer
          description: AS Number for this region
          example: 64496
    ipfilter:
      type: object
      properties:
        id:
          type: integer
          description: The unique ID for this IP filter
          example: 47345837
        name:
          type: string
          description: The name for this IP filter
          example: My IP filter
        rulesLimit:
          type: integer
          description: >-
            Values should be multiples of 100. Upper limit is the quota assigned
            to the account.
          example: 100
        continents:
          type: array
          description: A list of continents in this filter
          items:
            type: string
            enum:
              - AF
              - AN
              - AS
              - EU
              - NA
              - OC
              - SA
          example:
            - EU
            - NA
        countries:
          type: array
          description: >-
            2 digit ISO code for countries in this filter -
            https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
          items:
            type: string
          example:
            - GB
            - DE
        regions:
          type: array
          description: Regions for this IP filter.
          items:
            $ref: "#/components/schemas/region"
        asn:
          type: array
          description: >-
            AS Numbers that this rule applies to. Values must be between 0 and
            4,294,967,295
          items:
            type: integer
          example:
            - 64496
            - 64499
        ipv4:
          type: array
          description: IPv4 addresses and CIDRs that this filter applies to
          items:
            type: string
          example:
            - 198.51.100.0/24
            - 203.0.113.42
        ipv6:
          type: array
          description: IPv6 addresses and CIDRs that this filter applies to
          items:
            type: string
          example:
            - "2001:db8:200::/64"
            - "2001:db8:200:42::"
        links:
          type: object
          description: Links for domain objects
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/ipfilters/47345837"
    ipfilter-createupdate:
      type: object
      properties:
        name:
          type: string
          description: The name for this IP filter
          example: My IP filter
        rulesLimit:
          type: integer
          description: >-
            Values should be multiples of 100. Upper limit is the quota assigned
            to the account.
          example: 100
        continents:
          type: array
          description: A list of continents in this filter
          items:
            type: string
            enum:
              - world
              - AF
              - AN
              - AS
              - EU
              - NA
              - OC
              - SA
          example:
            - EU
            - NA
        countries:
          type: array
          description: >-
            2 digit ISO code for countries in this filter -
            https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
          items:
            type: string
          example:
            - GB
            - FR
            - DE
        asn:
          type: array
          description: >-
            AS Numbers that this rule applies to. Values must be between 0 and
            4,294,967,295
          items:
            type: integer
          example:
            - 64496
            - 64499
        ipv4:
          type: array
          description: IPv4 addresses and CIDRs that this filter applies to
          items:
            type: string
          example:
            - 198.51.100.0/24
            - 203.0.113.42
        ipv6:
          type: array
          description: IPv6 addresses and CIDRs that this filter applies to
          items:
            type: string
          example:
            - "2001:db8:200::/64"
            - "2001:db8:200:42::"
        regions:
          type: array
          description: "Combinations of Regions, Countries, Continents and optionally ASNs."
          items:
            type: object
            properties:
              continent:
                description: The continent for this region
                type: string
                enum:
                  - world
                  - AF
                  - AN
                  - AS
                  - EU
                  - NA
                  - OC
                  - SA
                example: EU
              country:
                type: string
                description: >-
                  Optional 2 digit ISO code for the country -
                  https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
                example: GB
              region:
                type: string
                description: Optional 2 digit code for the region
                example: EN
              asn:
                type: integer
                description: >-
                  Optional AS Number that this rule applies to. Values must be
                  between 0 and 4,294,967,295
                example: 64499
    geoproximity:
      type: object
      description: Geo Proximity Location
      properties:
        id:
          type: integer
          description: The unique ID for the Geo Proximity location
          example: 4367769
        name:
          type: string
          description: The name of the Geo Proximity location
          example: My Geo Proximity Location
        country:
          type: string
          description: 2 digit ISO country code
          example: GB
        region:
          type: string
          description: "Region, state or province code"
          example: Greater London
        city:
          type: int
          description: ID of the city
          example: 58898
        longitude:
          type: float
          description: Longitude of the location
          example: -0.1275
        latitude:
          type: float
          description: Latitude of the location
          example: 51.5033
        links:
          type: object
          description: Links for domain objects
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/geoproximities/4367769"
    geoproximity-createupdate:
      type: object
      description: Geo Proximity Location
      properties:
        name:
          type: string
          description: The name of the Geo Proximity location
          example: My Geo Proximity Location
        country:
          type: string
          description: 2 digit ISO country code
          example: GB
        region:
          type: string
          description: "Region, state or province code"
          example: London
        city:
          type: integer
          description: The numeric ID for a city
          example: 1
        longitude:
          type: float
          description: Longitude of the location
          example: -0.1275
        latitude:
          type: float
          description: Latitude of the location
          example: 51.5033
    vanitynameserver:
      type: object
      description: A rebranded nameserver using your own domain name.
      properties:
        id:
          type: integer
          description: A unique ID for the vanity nameserver
          example: 82648967
        name:
          type: string
          description: A unique name for this vanity nameserver
          example: My Vanity nameserver
        default:
          type: boolean
          description: Is this the default nameserver for domains in the account
          example: false
        public:
          type: boolean
          description: Is this nameserver public?
          example: false
        nameserverGroup:
          type: object
          properties:
            id:
              type: integer
              description: The ID of the nameserver group
              example: 674
            name:
              type: string
              description: The name of the nameserver group
              example: Nameserver Group 1
        nameservers:
          type: array
          description: The nameserver hostnames
          items:
            type: string
            format: hostname
          example:
            - ns1.example.com
            - ns2.example.com
        links:
          type: object
          description: Links for domain objects
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/vanitynameservers/82648967"
    vanitynameserver-create:
      type: object
      description: A rebranded nameserver using your own domain name.
      properties:
        name:
          type: string
          description: A unique name for this vanity nameserver
          example: My Vanity nameserver
        default:
          type: boolean
          description: Is this the default nameserver for domains in the account
          example: false
        nameserverGroup:
          type: object
          properties:
            id:
              type: integer
              description: The ID of the nameserver group
              example: 674
        nameservers:
          type: array
          description: The nameserver hostnames
          items:
            type: string
            format: hostname
          example:
            - ns1.example.com
            - ns2.example.com
    vanitynameserver-update:
      type: object
      description: A rebranded nameserver using your own domain name.
      properties:
        name:
          type: string
          description: A unique name for this vanity nameserver
          example: My Vanity nameserver
        default:
          type: boolean
          description: Is this the default nameserver for domains in the account
          example: false
        nameservers:
          type: array
          description: The nameserver hostnames
          items:
            type: string
            format: hostname
          example:
            - ns1.example.com
            - ns2.example.com
    contactlistwithoutemails:
      type: object
      description: >-
        Lists of email addresses used for notifications and messages about
        domains and records.
      properties:
        id:
          type: integer
          description: Unique ID for the contact list
          example: 2668228
        name:
          type: string
          description: A name for this contact list
          example: My Contact List
        emailCount:
          type: integer
          description: The number of emails in this contact list
          example: 2
        links:
          type: object
          description: Links for the object
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/contactlists/2668228"
    contactlist-createupdate:
      type: object
      description: >-
        Lists of email addresses used for notifications and messages about
        domains and records.
      properties:
        name:
          type: string
          description: A name for this contact list
          example: My Contact List
        emails:
          type: array
          description: The emails in this list
          items:
            type: string
            format: email
          example:
            - bob@example.com
            - alice@example.com
    contactlist:
      type: object
      description: >-
        Lists of email addresses used for notifications and messages about
        domains and records.
      properties:
        id:
          type: integer
          description: Unique ID for the contact list
          example: 2668228
        name:
          type: string
          description: A name for this contact list
          example: My Contact List
        emailCount:
          type: integer
          description: The number of emails in this contact list
          example: 2
        emails:
          type: array
          description: The emails in this list
          items:
            type: object
            description: An object for a single email in the contact list
            properties:
              address:
                type: string
                format: email
                example: bob@example.com
              verified:
                type: boolean
                description: Has the email been verified or not
                example: true
        links:
          type: object
          description: Links for the object
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/contactlists/2668228"
    contactlist_email:
      type: object
      properties:
        id:
          type: integer
          example: 36245
        address:
          type: string
          format: email
          example: bob@example.com
        verified:
          type: boolean
          description: Has the email been verified or not
          example: true
        contactlist:
          type: object
          properties:
            id:
              type: integer
              description: Unique ID for the contact list
              example: 2668228
            links:
              type: object
              description: Links for the contact list
              properties:
                self:
                  type: string
                  format: url
                  example: "https://api.dns.constellix.com/v4/contactlists/2668228"
        links:
          type: object
          description: Links for the email address
          properties:
            self:
              type: string
              format: url
              example: >-
                https://api.dns.constellix.com/v4/contactlists/2668228/emails/36245
    contactlist-email-createupdate:
      type: object
      properties:
        address:
          type: string
          format: email
          description: The email address
          example: bob@example.com
    contactlist_teams:
      type: object
      properties:
        id:
          type: integer
          example: 75225
        webhook:
          type: string
          description: The inbound webhook URL for MS Teams
          format: url
          example: "https://outlook.office.com/webhook/123456789"
        channel:
          type: string
          description: The channel to send the message to
          example: dnsalerts
        contactlist:
          type: object
          properties:
            id:
              type: integer
              description: Unique ID for the contact list
              example: 2668228
            links:
              type: object
              description: Links for the contact list
              properties:
                self:
                  type: string
                  format: url
                  example: "https://api.dns.constellix.com/v4/contactlists/2668228"
        links:
          type: object
          description: Links for the MS Teams Webhook
          properties:
            self:
              type: string
              format: url
              example: >-
                https://api.dns.constellix.com/v4/contactlists/2668228/teams/83267
    contactlist-teams-createupdate:
      type: object
      properties:
        webhook:
          type: string
          format: url
          description: Incoming Webhook URL
          example: "https://outlook.office.com/webhook/123456789"
        channel:
          type: string
          description: Teams channel to send notifications to
          example: dnsalerts
    contactlist_slack:
      type: object
      properties:
        id:
          type: integer
          example: 75225
        webhook:
          type: string
          description: The inbound webhook URL for Slack
          format: url
          example: "https://hooks.slack.com/services/T1234/B4321/ABCD1234"
        channel:
          type: string
          description: The channel to send the message to
          example: dnsalerts
        contactlist:
          type: object
          properties:
            id:
              type: integer
              description: Unique ID for the contact list
              example: 2668228
            links:
              type: object
              description: Links for the contact list
              properties:
                self:
                  type: string
                  format: url
                  example: "https://api.dns.constellix.com/v4/contactlists/2668228"
        links:
          type: object
          description: Links for the Slack webhook
          properties:
            self:
              type: string
              format: url
              example: >-
                https://api.dns.constellix.com/v4/contactlists/2668228/slack/75225
    contactlist-slack-createupdate:
      type: object
      properties:
        webhook:
          type: string
          format: url
          description: Incoming Webhook URL
          example: "https://hooks.slack.com/services/T1234/B4321/ABCD1234"
        channel:
          type: string
          description: Slack channel to send notifications to
          example: dnsalerts
    tag-createupdate:
      type: object
      properties:
        name:
          type: string
          description: A name for this tag
          example: My Tag
    announcement:
      type: object
      properties:
        id:
          type: integer
          description: A numeric ID for the Announcement
          example: 2666
        type:
          type: string
          description: The type of Announcement
          example: DashboardLinks
          enum:
            - DashboardLinks
        link:
          type: string
          description: A link for the announcement
          example: "https://www.example.com"
        title:
          type: string
          description: The announcement
          example: This is a test announcement
        links:
          type: object
          description: Links for announcements
          properties:
            self:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/announcements/2666"
    analytics:
      type: object
      description: Analytics for your account
      properties:
        values:
          type: array
          description: Query counts for all dates within the requested range
          items:
            type: object
            description: Query count for a particular date
            properties:
              date:
                type: string
                format: date-time
                example: "2022-01-10T00:00:00+00:00"
              value:
                type: integer
                example: 342
        start:
          description: The start date for the analytics
          type: string
          format: date-time
          example: "2022-01-10T00:00:00+00:00"
        end:
          description: The end date for the analytics
          type: string
          format: date-time
          example: "2022-01-24T00:00:00+00:00"
        stats:
          description: Some statistics for these analytics
          type: object
          properties:
            sum:
              type: integer
              description: The sum of queries for this date range
              example: 1480
            min:
              type: integer
              description: The minimum number of queries for one time period
              example: 50
            max:
              type: integer
              description: The maximum number of queries for one time period
              example: 201
            mean:
              type: float
              description: The mean average number of queries per time period
              example: 105.7143
            count:
              type: integer
              description: The number of time periods
              example: 14
        interval:
          description: Details about the interval between time periods in the analytics
          type: object
          properties:
            min:
              type: integer
              description: The minimum number of seconds between time periods
              example: 86400
            max:
              type: integer
              description: The maximum number of seconds between time periods
              example: 86400
            mean:
              type: float
              description: The mean average number of seconds between time periods
              example: 86400
        links:
          type: object
          properties:
            self:
              type: string
              description: The URL for these analytics
              example: >-
                https://api.dns.constellix.com/v4/analytics?start=20220110&end=20220124
    domainsearchresult:
      type: object
      description: Represents a search result when searching for domains
      properties:
        id:
          type: integer
          description: The ID for the domain name
          example: 366246
        name:
          type: string
          description: The name of the domain
          example: example.com
        links:
          type: object
          description: Links for domain search results
          properties:
            domain:
              type: string
              format: url
              example: "https://api.dns.constellix.com/v4/domains/366246"
  parameters:
    PaginationPage:
      in: query
      name: page
      schema:
        type: integer
        default: 1
      description: The page of results to fetch
    PaginationPerPage:
      in: query
      name: perPage
      schema:
        type: integer
        default: 50
      description: The number of results per page
  responses:
    Unauthorized:
      description: >-
        The request is not authorized or authorization is invalid. You must
        supply the API key in `Authorization` header.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized
    UnprocessableEntity:
      description: >-
        The request could not be processed. You should check the body of the
        error for more details.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: The given data was invalid.
              errors:
                type: object
                description: An object containing the errors for each field in the input
                example:
                  name:
                    - The name field is required
                    - The name field must be more than 8 characters
                  hostname:
                    - the hostname field is required
    NotFound:
      description: The resource requested could not be found.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Not Found
    Conflict:
      description: There was a conflict performing the request.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: >-
                  Cannot delete pool "Example", currently used in template(s)
                  Example
