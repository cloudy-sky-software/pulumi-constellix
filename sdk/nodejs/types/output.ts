// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";

export namespace analytics {
    /**
     * Analytics for your account
     */
    export interface Analytics {
        /**
         * The end date for the analytics
         */
        end?: string;
        /**
         * Details about the interval between time periods in the analytics
         */
        interval?: outputs.analytics.AnalyticsIntervalProperties;
        links?: outputs.analytics.AnalyticsLinksProperties;
        /**
         * The start date for the analytics
         */
        start?: string;
        /**
         * Some statistics for these analytics
         */
        stats?: outputs.analytics.AnalyticsStatsProperties;
        /**
         * Query counts for all dates within the requested range
         */
        values?: outputs.analytics.AnalyticsValuesItemProperties[];
    }

    /**
     * Details about the interval between time periods in the analytics
     */
    export interface AnalyticsIntervalProperties {
        /**
         * The maximum number of seconds between time periods
         */
        max?: number;
        /**
         * The mean average number of seconds between time periods
         */
        mean?: number;
        /**
         * The minimum number of seconds between time periods
         */
        min?: number;
    }

    export interface AnalyticsLinksProperties {
        /**
         * The URL for these analytics
         */
        self?: string;
    }

    /**
     * Some statistics for these analytics
     */
    export interface AnalyticsStatsProperties {
        /**
         * The number of time periods
         */
        count?: number;
        /**
         * The maximum number of queries for one time period
         */
        max?: number;
        /**
         * The mean average number of queries per time period
         */
        mean?: number;
        /**
         * The minimum number of queries for one time period
         */
        min?: number;
        /**
         * The sum of queries for this date range
         */
        sum?: number;
    }

    /**
     * Query count for a particular date
     */
    export interface AnalyticsValuesItemProperties {
        date?: string;
        value?: number;
    }

    export interface ListAnalyticsProperties {
        /**
         * Analytics for your account
         */
        data?: outputs.analytics.Analytics;
    }

}

export namespace announcements {
    export interface Announcement {
        /**
         * A numeric ID for the Announcement
         */
        id?: number;
        /**
         * A link for the announcement
         */
        link?: string;
        /**
         * Links for announcements
         */
        links?: outputs.announcements.AnnouncementLinksProperties;
        /**
         * The announcement
         */
        title?: string;
        /**
         * The type of Announcement
         */
        type?: enums.announcements.AnnouncementType;
    }

    /**
     * Links for announcements
     */
    export interface AnnouncementLinksProperties {
        self?: string;
    }

    export interface GetAnnouncementProperties {
        data?: outputs.announcements.Announcement;
    }

    export interface ListAnnouncementsProperties {
        /**
         * The announcements for this page
         */
        data?: outputs.announcements.Announcement[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.announcements.ListMetadata;
    }

    /**
     * Metadata for list responses
     */
    export interface ListMetadata {
        /**
         * Relevant links for this list
         */
        links?: outputs.announcements.ListMetadataLinksProperties;
        /**
         * Pagination details
         */
        pagination?: outputs.announcements.ListMetadataPaginationProperties;
    }

    /**
     * Relevant links for this list
     */
    export interface ListMetadataLinksProperties {
        first?: string;
        last?: string;
        next?: string;
        previous?: string;
        self?: string;
    }

    /**
     * Pagination details
     */
    export interface ListMetadataPaginationProperties {
        /**
         * The number of items in this page of the response
         */
        count?: number;
        /**
         * The current results page
         */
        currentPage?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The total number of objects matching the query
         */
        total?: number;
        /**
         * The total number of pages
         */
        totalPages?: number;
    }

}

export namespace contactlists {
    /**
     * Lists of email addresses used for notifications and messages about domains and records.
     */
    export interface Contactlist {
        /**
         * The number of emails in this contact list
         */
        emailCount?: number;
        /**
         * The emails in this list
         */
        emails?: outputs.contactlists.ContactlistEmailsItemProperties[];
        /**
         * Unique ID for the contact list
         */
        id?: number;
        /**
         * Links for the object
         */
        links?: outputs.contactlists.ContactlistLinksProperties;
        /**
         * A name for this contact list
         */
        name?: string;
    }

    export interface ContactlistEmail {
        address?: string;
        contactlist?: outputs.contactlists.ContactlistEmailContactlistProperties;
        id?: number;
        /**
         * Links for the email address
         */
        links?: outputs.contactlists.ContactlistEmailLinksProperties;
        /**
         * Has the email been verified or not
         */
        verified?: boolean;
    }

    export interface ContactlistEmailContactlistProperties {
        /**
         * Unique ID for the contact list
         */
        id?: number;
        /**
         * Links for the contact list
         */
        links?: outputs.contactlists.ContactlistEmailContactlistPropertiesLinksProperties;
    }

    /**
     * Links for the contact list
     */
    export interface ContactlistEmailContactlistPropertiesLinksProperties {
        self?: string;
    }

    /**
     * Links for the email address
     */
    export interface ContactlistEmailLinksProperties {
        self?: string;
    }

    /**
     * An object for a single email in the contact list
     */
    export interface ContactlistEmailsItemProperties {
        address?: string;
        /**
         * Has the email been verified or not
         */
        verified?: boolean;
    }

    /**
     * Links for the object
     */
    export interface ContactlistLinksProperties {
        self?: string;
    }

    export interface ContactlistSlack {
        /**
         * The channel to send the message to
         */
        channel?: string;
        contactlist?: outputs.contactlists.ContactlistSlackContactlistProperties;
        id?: number;
        /**
         * Links for the Slack webhook
         */
        links?: outputs.contactlists.ContactlistSlackLinksProperties;
        /**
         * The inbound webhook URL for Slack
         */
        webhook?: string;
    }

    export interface ContactlistSlackContactlistProperties {
        /**
         * Unique ID for the contact list
         */
        id?: number;
        /**
         * Links for the contact list
         */
        links?: outputs.contactlists.ContactlistSlackContactlistPropertiesLinksProperties;
    }

    /**
     * Links for the contact list
     */
    export interface ContactlistSlackContactlistPropertiesLinksProperties {
        self?: string;
    }

    /**
     * Links for the Slack webhook
     */
    export interface ContactlistSlackLinksProperties {
        self?: string;
    }

    export interface ContactlistTeams {
        /**
         * The channel to send the message to
         */
        channel?: string;
        contactlist?: outputs.contactlists.ContactlistTeamsContactlistProperties;
        id?: number;
        /**
         * Links for the MS Teams Webhook
         */
        links?: outputs.contactlists.ContactlistTeamsLinksProperties;
        /**
         * The inbound webhook URL for MS Teams
         */
        webhook?: string;
    }

    export interface ContactlistTeamsContactlistProperties {
        /**
         * Unique ID for the contact list
         */
        id?: number;
        /**
         * Links for the contact list
         */
        links?: outputs.contactlists.ContactlistTeamsContactlistPropertiesLinksProperties;
    }

    /**
     * Links for the contact list
     */
    export interface ContactlistTeamsContactlistPropertiesLinksProperties {
        self?: string;
    }

    /**
     * Links for the MS Teams Webhook
     */
    export interface ContactlistTeamsLinksProperties {
        self?: string;
    }

    /**
     * Lists of email addresses used for notifications and messages about domains and records.
     */
    export interface Contactlistwithoutemails {
        /**
         * The number of emails in this contact list
         */
        emailCount?: number;
        /**
         * Unique ID for the contact list
         */
        id?: number;
        /**
         * Links for the object
         */
        links?: outputs.contactlists.ContactlistwithoutemailsLinksProperties;
        /**
         * A name for this contact list
         */
        name?: string;
    }

    /**
     * Links for the object
     */
    export interface ContactlistwithoutemailsLinksProperties {
        self?: string;
    }

    export interface DataProperties {
        /**
         * The ID of the email address
         */
        id?: number;
        links?: outputs.contactlists.DataPropertiesLinksProperties;
    }

    export interface DataPropertiesLinksProperties {
        /**
         * The URL for the new object
         */
        self?: string;
    }

    export interface ListContactEmailProperties {
        data?: outputs.contactlists.ContactlistEmail;
    }

    export interface ListContactEmailsProperties {
        /**
         * The emails for this page
         */
        data?: outputs.contactlists.ContactlistEmail[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.contactlists.ListMetadata;
    }

    export interface ListContactProperties {
        /**
         * Lists of email addresses used for notifications and messages about domains and records.
         */
        data?: outputs.contactlists.Contactlist;
    }

    export interface ListContactSlackWebhookProperties {
        data?: outputs.contactlists.ContactlistSlack;
    }

    export interface ListContactSlackWebhooksProperties {
        /**
         * The webhooks for this page
         */
        data?: outputs.contactlists.ContactlistSlack[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.contactlists.ListMetadata;
    }

    export interface ListContactTeamProperties {
        data?: outputs.contactlists.ContactlistTeams;
    }

    export interface ListContactTeamsProperties {
        /**
         * The webhooks for this page
         */
        data?: outputs.contactlists.ContactlistTeams[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.contactlists.ListMetadata;
    }

    export interface ListContactsProperties {
        data?: outputs.contactlists.Contactlistwithoutemails[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.contactlists.ListMetadata;
    }

    /**
     * Metadata for list responses
     */
    export interface ListMetadata {
        /**
         * Relevant links for this list
         */
        links?: outputs.contactlists.ListMetadataLinksProperties;
        /**
         * Pagination details
         */
        pagination?: outputs.contactlists.ListMetadataPaginationProperties;
    }

    /**
     * Relevant links for this list
     */
    export interface ListMetadataLinksProperties {
        first?: string;
        last?: string;
        next?: string;
        previous?: string;
        self?: string;
    }

    /**
     * Pagination details
     */
    export interface ListMetadataPaginationProperties {
        /**
         * The number of items in this page of the response
         */
        count?: number;
        /**
         * The current results page
         */
        currentPage?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The total number of objects matching the query
         */
        total?: number;
        /**
         * The total number of pages
         */
        totalPages?: number;
    }

}

export namespace domains {
    export interface DataProperties {
        links?: outputs.domains.DataPropertiesLinksProperties;
        /**
         * The version of the snapshot
         */
        version?: number;
    }

    export interface DataPropertiesLinksProperties {
        /**
         * The URL for the new object
         */
        self?: string;
    }

    export interface Domain {
        /**
         * An array of contact lists that will be notified when records in this domain change.
         */
        contacts?: outputs.domains.SimpleContactlist[];
        createdAt?: string;
        /**
         * Is the domain enabled
         */
        enabled?: boolean;
        /**
         * Is GeoIP functionality enabled for the domain
         */
        geoip?: boolean;
        /**
         * Is Global Traffic Director enabled for the domain
         */
        gtd?: boolean;
        /**
         * A unique numeric ID for this domain
         */
        id?: number;
        /**
         * Links for domain objects
         */
        links?: outputs.domains.DomainLinksProperties;
        /**
         * The name of the domain
         */
        name?: string;
        /**
         * The nameservers for the domain
         */
        nameservers?: string[];
        /**
         * A note for the domain
         */
        note?: string;
        /**
         * SOA (Start of Authority) Record
         */
        soa?: outputs.domains.Soa;
        status?: enums.domains.DomainStatus;
        /**
         * An array of tags for this domain.
         */
        tags?: outputs.domains.Tag[];
        template?: outputs.domains.SimpleTemplate;
        updatedAt?: string;
        /**
         * A simplied version of a rebranded nameserver using your own domain name.
         */
        vanityNameserver?: outputs.domains.SimpleVanitynameserver;
        /**
         * The version of the domain resource
         */
        version?: number;
    }

    /**
     * Links for domain objects
     */
    export interface DomainLinksProperties {
        records?: string;
        self?: string;
    }

    /**
     * Analytics for a specific domain
     */
    export interface Domainanalytics {
        domain?: outputs.domains.SimpleDomain;
        /**
         * The end date for the analytics
         */
        end?: string;
        /**
         * Details about the interval between time periods in the analytics
         */
        interval?: outputs.domains.DomainanalyticsIntervalProperties;
        links?: outputs.domains.DomainanalyticsLinksProperties;
        /**
         * An array of analytics data for different types of query
         */
        queries?: outputs.domains.DomainanalyticsQueriesItemProperties[];
        /**
         * The start date for the analytics
         */
        start?: string;
        /**
         * Some statistics for these analytics
         */
        stats?: outputs.domains.DomainanalyticsStatsProperties;
    }

    /**
     * Details about the interval between time periods in the analytics
     */
    export interface DomainanalyticsIntervalProperties {
        /**
         * The maximum number of seconds between time periods
         */
        max?: number;
        /**
         * The mean average number of seconds between time periods
         */
        mean?: number;
        /**
         * The minimum number of seconds between time periods
         */
        min?: number;
    }

    export interface DomainanalyticsLinksProperties {
        /**
         * The URL for the domain
         */
        domain?: string;
        /**
         * The URL for these analytics
         */
        self?: string;
    }

    /**
     * Analytics for a particular query type
     */
    export interface DomainanalyticsQueriesItemProperties {
        /**
         * Some statistics for these analytics
         */
        stats?: outputs.domains.DomainanalyticsQueriesItemPropertiesStatsProperties;
        /**
         * The type of query the analytics are for
         */
        type?: enums.domains.DomainanalyticsQueriesItemPropertiesType;
        /**
         * Query counts for all dates within the requested range
         */
        values?: outputs.domains.DomainanalyticsQueriesItemPropertiesValuesItemProperties[];
    }

    /**
     * Some statistics for these analytics
     */
    export interface DomainanalyticsQueriesItemPropertiesStatsProperties {
        /**
         * The number of time periods
         */
        count?: number;
        /**
         * The maximum number of queries for one time period
         */
        max?: number;
        /**
         * The mean average number of queries per time period
         */
        mean?: number;
        /**
         * The minimum number of queries for one time period
         */
        min?: number;
        /**
         * The sum of queries for this date range
         */
        sum?: number;
    }

    /**
     * Query count for a particular date
     */
    export interface DomainanalyticsQueriesItemPropertiesValuesItemProperties {
        date?: string;
        value?: number;
    }

    /**
     * Some statistics for these analytics
     */
    export interface DomainanalyticsStatsProperties {
        /**
         * The number of time periods
         */
        count?: number;
        /**
         * The maximum number of queries for one time period
         */
        max?: number;
        /**
         * The mean average number of queries per time period
         */
        mean?: number;
        /**
         * The minimum number of queries for one time period
         */
        min?: number;
        /**
         * The sum of queries for this date range
         */
        sum?: number;
    }

    export interface Domainhistory {
        domain?: outputs.domains.SimpleDomain;
        /**
         * The name of the domain
         */
        name?: string;
        updatedAt?: string;
        /**
         * The version of the domain resource
         */
        version?: number;
    }

    /**
     * Links for the domain record
     */
    export interface DomainrecordPropertiesLinksProperties {
        self?: string;
    }

    export interface Domainsnapshot {
        domain?: outputs.domains.SimpleDomain;
        /**
         * The name of the domain
         */
        name?: string;
        updatedAt?: string;
        /**
         * The version of the domain resource
         */
        version?: number;
    }

    export interface GetDomainAnalyticProperties {
        /**
         * Analytics for a specific domain
         */
        data?: outputs.domains.Domainanalytics;
    }

    export interface GetDomainHistoryVersionProperties {
        data?: outputs.domains.Domainhistory;
    }

    export interface GetDomainNameserverProperties {
        data?: outputs.domains.GetDomainNameserverPropertiesDataProperties;
    }

    export interface GetDomainNameserverPropertiesDataProperties {
        domain?: outputs.domains.SimpleDomain;
        links?: outputs.domains.GetDomainNameserverPropertiesDataPropertiesLinksProperties;
        nameservers?: string[];
    }

    export interface GetDomainNameserverPropertiesDataPropertiesLinksProperties {
        /**
         * The URL for the domain
         */
        domain?: string;
        /**
         * The URL for these nameservers
         */
        self?: string;
    }

    export interface GetDomainProperties {
        data?: outputs.domains.Domain;
    }

    export interface GetDomainRecord {
        domain?: outputs.domains.SimpleDomain;
        /**
         * Links for the domain record
         */
        links?: outputs.domains.DomainrecordPropertiesLinksProperties;
    }

    export interface GetDomainSnapshotProperties {
        data?: outputs.domains.Domainsnapshot;
    }

    export interface ListDomainHistoryProperties {
        /**
         * The domain history for this page
         */
        data?: outputs.domains.ListDomainHistoryPropertiesDataItem[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.domains.ListMetadata;
    }

    export interface ListDomainHistoryPropertiesDataItem {
        domain?: outputs.domains.SimpleDomain;
        /**
         * The name of the domain
         */
        name?: string;
        updatedAt?: string;
        /**
         * The version of the domain resource
         */
        version?: number;
    }

    export interface ListDomainRecordsProperties {
        /**
         * The records for this page
         */
        data?: outputs.domains.ListDomainRecordsPropertiesDataItem[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.domains.ListMetadata;
    }

    export interface ListDomainRecordsPropertiesDataItem {
        domain?: outputs.domains.SimpleDomain;
        /**
         * Links for the domain record
         */
        links?: outputs.domains.DomainrecordPropertiesLinksProperties;
    }

    export interface ListDomainSnapshotsProperties {
        /**
         * The domain snapshots for this page
         */
        data?: outputs.domains.ListDomainSnapshotsPropertiesDataItem[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.domains.ListMetadata;
    }

    export interface ListDomainSnapshotsPropertiesDataItem {
        domain?: outputs.domains.SimpleDomain;
        /**
         * The name of the domain
         */
        name?: string;
        updatedAt?: string;
        /**
         * The version of the domain resource
         */
        version?: number;
    }

    export interface ListDomainsProperties {
        /**
         * The domains for this page
         */
        data?: outputs.domains.Domain[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.domains.ListMetadata;
    }

    /**
     * Metadata for list responses
     */
    export interface ListMetadata {
        /**
         * Relevant links for this list
         */
        links?: outputs.domains.ListMetadataLinksProperties;
        /**
         * Pagination details
         */
        pagination?: outputs.domains.ListMetadataPaginationProperties;
    }

    /**
     * Relevant links for this list
     */
    export interface ListMetadataLinksProperties {
        first?: string;
        last?: string;
        next?: string;
        previous?: string;
        self?: string;
    }

    /**
     * Pagination details
     */
    export interface ListMetadataPaginationProperties {
        /**
         * The number of items in this page of the response
         */
        count?: number;
        /**
         * The current results page
         */
        currentPage?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The total number of objects matching the query
         */
        total?: number;
        /**
         * The total number of pages
         */
        totalPages?: number;
    }

    /**
     * A simple version of a contact list when inclued with other resources
     */
    export interface SimpleContactlist {
        /**
         * Unique ID for the contact list
         */
        id?: number;
        /**
         * Links for domain objects
         */
        links?: outputs.domains.SimpleContactlistLinksProperties;
    }

    /**
     * Links for domain objects
     */
    export interface SimpleContactlistLinksProperties {
        self?: string;
    }

    export interface SimpleDomain {
        createdAt?: string;
        /**
         * Is the domain enabled
         */
        enabled?: boolean;
        /**
         * Is GeoIP functionality enabled for the domain
         */
        geoip?: boolean;
        /**
         * Is Global Traffic Director enabled for the domain
         */
        gtd?: boolean;
        /**
         * A unique numeric ID for this domain
         */
        id?: number;
        /**
         * Links for domain objects
         */
        links?: outputs.domains.SimpleDomainLinksProperties;
        /**
         * The name of the domain
         */
        name?: string;
        /**
         * A note for the domain
         */
        note?: string;
        status?: enums.domains.SimpleDomainStatus;
        /**
         * An array of tags for this domain.
         */
        tags?: outputs.domains.Tag[];
        updatedAt?: string;
        /**
         * The version of the domain resource
         */
        version?: number;
    }

    /**
     * Links for domain objects
     */
    export interface SimpleDomainLinksProperties {
        records?: string;
        self?: string;
    }

    export interface SimpleTemplate {
        /**
         * The unique ID for this template
         */
        id?: number;
        /**
         * Links for the template
         */
        links?: outputs.domains.SimpleTemplateLinksProperties;
        /**
         * The name for the template
         */
        name?: string;
        /**
         * The version of the template resource
         */
        version?: number;
    }

    /**
     * Links for the template
     */
    export interface SimpleTemplateLinksProperties {
        records?: string;
        self?: string;
    }

    /**
     * A simplied version of a rebranded nameserver using your own domain name.
     */
    export interface SimpleVanitynameserver {
        /**
         * A unique ID for the vanity nameserver
         */
        id?: number;
        /**
         * Links relevant to this object
         */
        links?: outputs.domains.SimpleVanitynameserverLinksProperties;
    }

    /**
     * Links relevant to this object
     */
    export interface SimpleVanitynameserverLinksProperties {
        self?: string;
    }

    /**
     * SOA (Start of Authority) Record
     */
    export interface Soa {
        /**
         * Email of the administrator for the domain. @ should be replaced with .
         */
        email?: string;
        /**
         * Number of seconds after which secondary nameservers should stop responding to queries, if the master does not respond
         */
        expire?: number;
        /**
         * How long NXDOMAIN responses should be cached for
         */
        negativeCache?: number;
        /**
         * Primary master nameserver for the domain
         */
        primaryNameserver?: string;
        /**
         * The interval for secondary nameservers should query for the SOA record
         */
        refresh?: number;
        /**
         * The number of seconds after which secondary servers should retry to request the serial number if the master does not respond
         */
        retry?: number;
        /**
         * A serial number for this version of the records for this domain
         */
        serial?: number;
        /**
         * The Time To Live (TTL) in seconds for the SOA record
         */
        ttl?: number;
    }

    /**
     * The SOA details for the domain
     */
    export interface SoaProperties {
        /**
         * Email of the administrator for the domain. @ should be replaced with .
         */
        email?: string;
        /**
         * Number of seconds after which secondary nameservers should stop responding to queries, if the master does not respond
         */
        expire?: number;
        /**
         * How long NXDOMAIN responses should be cached for
         */
        negativeCache?: number;
        /**
         * Primary master nameserver for the domain
         */
        primaryNameserver?: string;
        /**
         * The interval for secondary nameservers should query for the SOA record
         */
        refresh?: number;
        /**
         * The number of seconds after which secondary servers should retry to request the serial number if the master does not respond
         */
        retry?: number;
        /**
         * The Time To Live (TTL) in seconds for the SOA record
         */
        ttl?: number;
    }

    /**
     * A tag is used to group resources together
     */
    export interface Tag {
        /**
         * Unique ID for the tag
         */
        id?: number;
        /**
         * Links for tags
         */
        links?: outputs.domains.TagLinksProperties;
        /**
         * A name for this tag
         */
        name?: string;
    }

    /**
     * Links for tags
     */
    export interface TagLinksProperties {
        self?: string;
    }

}

export namespace geoproximities {
    export interface DataProperties {
        /**
         * The ID of the object
         */
        id?: number;
        links?: outputs.geoproximities.DataPropertiesLinksProperties;
    }

    export interface DataPropertiesLinksProperties {
        /**
         * The URL for the new object
         */
        self?: string;
    }

    /**
     * Geo Proximity Location
     */
    export interface Geoproximity {
        /**
         * ID of the city
         */
        city?: number;
        /**
         * 2 digit ISO country code
         */
        country?: string;
        /**
         * The unique ID for the Geo Proximity location
         */
        id?: number;
        /**
         * Latitude of the location
         */
        latitude?: number;
        /**
         * Links for domain objects
         */
        links?: outputs.geoproximities.GeoproximityLinksProperties;
        /**
         * Longitude of the location
         */
        longitude?: number;
        /**
         * The name of the Geo Proximity location
         */
        name?: string;
        /**
         * Region, state or province code
         */
        region?: string;
    }

    /**
     * Links for domain objects
     */
    export interface GeoproximityLinksProperties {
        self?: string;
    }

    export interface GetGeoProximityLocationProperties {
        /**
         * Geo Proximity Location
         */
        data?: outputs.geoproximities.Geoproximity;
    }

    export interface ListGeoProximityLocationsProperties {
        data?: outputs.geoproximities.Geoproximity[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.geoproximities.ListMetadata;
    }

    /**
     * Metadata for list responses
     */
    export interface ListMetadata {
        /**
         * Relevant links for this list
         */
        links?: outputs.geoproximities.ListMetadataLinksProperties;
        /**
         * Pagination details
         */
        pagination?: outputs.geoproximities.ListMetadataPaginationProperties;
    }

    /**
     * Relevant links for this list
     */
    export interface ListMetadataLinksProperties {
        first?: string;
        last?: string;
        next?: string;
        previous?: string;
        self?: string;
    }

    /**
     * Pagination details
     */
    export interface ListMetadataPaginationProperties {
        /**
         * The number of items in this page of the response
         */
        count?: number;
        /**
         * The current results page
         */
        currentPage?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The total number of objects matching the query
         */
        total?: number;
        /**
         * The total number of pages
         */
        totalPages?: number;
    }

}

export namespace ipfilters {
    export interface DataProperties {
        /**
         * The ID of the object
         */
        id?: number;
        links?: outputs.ipfilters.DataPropertiesLinksProperties;
    }

    export interface DataPropertiesLinksProperties {
        /**
         * The URL for the new object
         */
        self?: string;
    }

    export interface GetIPFilterProperties {
        data?: outputs.ipfilters.Ipfilter;
    }

    export interface Ipfilter {
        /**
         * AS Numbers that this rule applies to. Values must be between 0 and 4,294,967,295
         */
        asn?: number[];
        /**
         * A list of continents in this filter
         */
        continents?: enums.ipfilters.IpfilterContinentsItem[];
        /**
         * 2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
         */
        countries?: string[];
        /**
         * The unique ID for this IP filter
         */
        id?: number;
        /**
         * IPv4 addresses and CIDRs that this filter applies to
         */
        ipv4?: string[];
        /**
         * IPv6 addresses and CIDRs that this filter applies to
         */
        ipv6?: string[];
        /**
         * Links for domain objects
         */
        links?: outputs.ipfilters.IpfilterLinksProperties;
        /**
         * The name for this IP filter
         */
        name?: string;
        /**
         * Regions for this IP filter.
         */
        regions?: outputs.ipfilters.Region[];
        /**
         * Values should be multiples of 100. Upper limit is the quota assigned to the account.
         */
        rulesLimit?: number;
    }

    /**
     * Links for domain objects
     */
    export interface IpfilterLinksProperties {
        self?: string;
    }

    export interface ListIPFiltersProperties {
        data?: outputs.ipfilters.Ipfilter[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.ipfilters.ListMetadata;
    }

    /**
     * Metadata for list responses
     */
    export interface ListMetadata {
        /**
         * Relevant links for this list
         */
        links?: outputs.ipfilters.ListMetadataLinksProperties;
        /**
         * Pagination details
         */
        pagination?: outputs.ipfilters.ListMetadataPaginationProperties;
    }

    /**
     * Relevant links for this list
     */
    export interface ListMetadataLinksProperties {
        first?: string;
        last?: string;
        next?: string;
        previous?: string;
        self?: string;
    }

    /**
     * Pagination details
     */
    export interface ListMetadataPaginationProperties {
        /**
         * The number of items in this page of the response
         */
        count?: number;
        /**
         * The current results page
         */
        currentPage?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The total number of objects matching the query
         */
        total?: number;
        /**
         * The total number of pages
         */
        totalPages?: number;
    }

    /**
     * IP Filter Region
     */
    export interface Region {
        /**
         * AS Number for this region
         */
        asn?: number;
        /**
         * The continent for this region
         */
        continent?: string;
        /**
         * The country for the region
         */
        country?: string;
        /**
         * The region code
         */
        region?: string;
    }

    export interface RegionsItemProperties {
        /**
         * Optional AS Number that this rule applies to. Values must be between 0 and 4,294,967,295
         */
        asn?: number;
        /**
         * The continent for this region
         */
        continent?: enums.ipfilters.RegionsItemPropertiesContinent;
        /**
         * Optional 2 digit ISO code for the country - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
         */
        country?: string;
        /**
         * Optional 2 digit code for the region
         */
        region?: string;
    }

}

export namespace ping {
    export interface Ping {
        ip?: string;
        timestamp?: string;
        version?: string;
    }

}

export namespace pools {
    export interface DataProperties {
        /**
         * The ID of the object
         */
        id?: number;
        links?: outputs.pools.DataPropertiesLinksProperties;
    }

    export interface DataPropertiesLinksProperties {
        /**
         * The URL for the new object
         */
        self?: string;
    }

    export interface GetPoolProperties {
        data?: outputs.pools.Pool;
    }

    /**
     * Metadata for list responses
     */
    export interface ListMetadata {
        /**
         * Relevant links for this list
         */
        links?: outputs.pools.ListMetadataLinksProperties;
        /**
         * Pagination details
         */
        pagination?: outputs.pools.ListMetadataPaginationProperties;
    }

    /**
     * Relevant links for this list
     */
    export interface ListMetadataLinksProperties {
        first?: string;
        last?: string;
        next?: string;
        previous?: string;
        self?: string;
    }

    /**
     * Pagination details
     */
    export interface ListMetadataPaginationProperties {
        /**
         * The number of items in this page of the response
         */
        count?: number;
        /**
         * The current results page
         */
        currentPage?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The total number of objects matching the query
         */
        total?: number;
        /**
         * The total number of pages
         */
        totalPages?: number;
    }

    export interface ListPoolsProperties {
        /**
         * The pools for this page
         */
        data?: outputs.pools.Poolindex[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.pools.ListMetadata;
    }

    export interface Pool {
        /**
         * Contactlists that will be notified when the pool is updated
         */
        contacts?: outputs.pools.SimpleContactlist[];
        createdAt?: string;
        /**
         * Domains that are using this pool
         */
        domains?: outputs.pools.SimpleDomain[];
        /**
         * Whether the pool is enabled or not
         */
        enabled?: boolean;
        /**
         * Whether the pool is considered failed or not
         */
        failed?: boolean;
        id?: number;
        ito?: outputs.pools.Poolito;
        /**
         * Links for the pool
         */
        links?: outputs.pools.PoolLinksProperties;
        /**
         * The number of records that must be available for this pool to be used for failover. Between 0 and 64.
         */
        minimumFailover?: number;
        name?: string;
        /**
         * The minimum number of entries from the pool to return when queried. Between 0 and 64.
         */
        return?: number;
        /**
         * Templates that are using this pool
         */
        templates?: outputs.pools.SimpleTemplate[];
        /**
         * The type of pool
         */
        type?: enums.pools.PoolType;
        updatedAt?: string;
        /**
         * The values for this pool
         */
        values?: outputs.pools.PoolValuesItemProperties[];
    }

    /**
     * Links for the pool
     */
    export interface PoolLinksProperties {
        self?: string;
    }

    /**
     * A possible value for the pool. Depends on the type of pool.
     */
    export interface PoolValuesItemProperties {
        /**
         * Is the value active or not?
         */
        activated?: boolean;
        /**
         * Is this value enabled or not?
         */
        enabled?: boolean;
        /**
         * Is this value considered failed by monitoring
         */
        failed?: boolean;
        /**
         * A handicap for this value
         */
        handicap?: number;
        /**
         * The failover/check policy for this value
         */
        policy?: enums.pools.PoolValuesItemPropertiesPolicy;
        /**
         * The ID of the check to use from Sonar
         */
        sonarCheckId?: number;
        /**
         * The response time in the last check
         */
        speed?: number;
        value?: string | string | string;
        /**
         * A weight for the value. Must be between 1 and 1000000
         */
        weight?: number;
    }

    export interface Poolindex {
        /**
         * Contactlists that will be notified when the pool is updated
         */
        contacts?: outputs.pools.SimpleContactlist[];
        createdAt?: string;
        /**
         * Domains that are using this pool
         */
        domains?: outputs.pools.SimpleDomain[];
        /**
         * Whether the pool is enabled or not
         */
        enabled?: boolean;
        /**
         * Whether the pool is considered failed or not
         */
        failed?: boolean;
        id?: number;
        ito?: outputs.pools.Poolito;
        /**
         * Links for the pool
         */
        links?: outputs.pools.PoolindexLinksProperties;
        /**
         * The number of records that must be available for this pool to be used for failover. Between 0 and 64.
         */
        minimumFailover?: number;
        name?: string;
        /**
         * The minimum number of entries from the pool to return when queried. Between 0 and 64.
         */
        return?: number;
        /**
         * Templates that are using this pool
         */
        templates?: outputs.pools.SimpleTemplate[];
        /**
         * The type of pool
         */
        type?: enums.pools.PoolindexType;
        updatedAt?: string;
        /**
         * The values for this pool
         */
        values?: outputs.pools.PoolindexValuesItemProperties[];
    }

    /**
     * Links for the pool
     */
    export interface PoolindexLinksProperties {
        self?: string;
    }

    /**
     * A possible value for the pool. Depends on the type of pool.
     */
    export interface PoolindexValuesItemProperties {
        value?: string | string | string;
        /**
         * A weight for the value. Must be between 1 amd 1000000
         */
        weight?: number;
    }

    export interface Poolito {
        /**
         * The Ito configuration
         */
        config?: outputs.pools.PoolitoConfigProperties;
        /**
         * Is Ito enabled for this pool?
         */
        enabled?: boolean;
    }

    /**
     * The Ito configuration
     */
    export interface PoolitoConfigProperties {
        /**
         * Percentage of how much is the response time allowed to deviate?
         */
        deviationAllowance?: enums.pools.PoolitoConfigPropertiesDeviationAllowance;
        handicapFactor?: enums.pools.PoolitoConfigPropertiesHandicapFactor;
        /**
         * The maximum number of results to return
         */
        maximumNumberOfResults?: number;
        /**
         * Where monitoring should be performed from
         */
        monitoringRegion?: enums.pools.PoolitoConfigPropertiesMonitoringRegion;
        /**
         * The number of seconds between each check
         */
        period?: enums.pools.PoolitoConfigPropertiesPeriod;
    }

    /**
     * A simple version of a contact list when inclued with other resources
     */
    export interface SimpleContactlist {
        /**
         * Unique ID for the contact list
         */
        id?: number;
        /**
         * Links for domain objects
         */
        links?: outputs.pools.SimpleContactlistLinksProperties;
    }

    /**
     * Links for domain objects
     */
    export interface SimpleContactlistLinksProperties {
        self?: string;
    }

    export interface SimpleDomain {
        createdAt?: string;
        /**
         * Is the domain enabled
         */
        enabled?: boolean;
        /**
         * Is GeoIP functionality enabled for the domain
         */
        geoip?: boolean;
        /**
         * Is Global Traffic Director enabled for the domain
         */
        gtd?: boolean;
        /**
         * A unique numeric ID for this domain
         */
        id?: number;
        /**
         * Links for domain objects
         */
        links?: outputs.pools.SimpleDomainLinksProperties;
        /**
         * The name of the domain
         */
        name?: string;
        /**
         * A note for the domain
         */
        note?: string;
        status?: enums.pools.SimpleDomainStatus;
        /**
         * An array of tags for this domain.
         */
        tags?: outputs.pools.Tag[];
        updatedAt?: string;
        /**
         * The version of the domain resource
         */
        version?: number;
    }

    /**
     * Links for domain objects
     */
    export interface SimpleDomainLinksProperties {
        records?: string;
        self?: string;
    }

    export interface SimpleTemplate {
        /**
         * The unique ID for this template
         */
        id?: number;
        /**
         * Links for the template
         */
        links?: outputs.pools.SimpleTemplateLinksProperties;
        /**
         * The name for the template
         */
        name?: string;
        /**
         * The version of the template resource
         */
        version?: number;
    }

    /**
     * Links for the template
     */
    export interface SimpleTemplateLinksProperties {
        records?: string;
        self?: string;
    }

    /**
     * A tag is used to group resources together
     */
    export interface Tag {
        /**
         * Unique ID for the tag
         */
        id?: number;
        /**
         * Links for tags
         */
        links?: outputs.pools.TagLinksProperties;
        /**
         * A name for this tag
         */
        name?: string;
    }

    /**
     * Links for tags
     */
    export interface TagLinksProperties {
        self?: string;
    }

    /**
     * A possible value for the pool. Depends on the type of pool.
     */
    export interface ValuesItemProperties {
        /**
         * Is this value enabled or not?
         */
        enabled?: boolean;
        /**
         * A handicap for this value
         */
        handicap?: number;
        /**
         * The failover/check policy for this value
         */
        policy?: enums.pools.ValuesItemPropertiesPolicy;
        /**
         * The ID of the check to use from Sonar
         */
        sonarCheckId?: number;
        value?: string | string | string;
        /**
         * A weight for the value. Must be between 1 and 1000000
         */
        weight?: number;
    }

}

export namespace search {
    /**
     * Represents a search result when searching for domains
     */
    export interface Domainsearchresult {
        /**
         * The ID for the domain name
         */
        id?: number;
        /**
         * Links for domain search results
         */
        links?: outputs.search.DomainsearchresultLinksProperties;
        /**
         * The name of the domain
         */
        name?: string;
    }

    /**
     * Links for domain search results
     */
    export interface DomainsearchresultLinksProperties {
        domain?: string;
    }

    export interface GetSearchDomainProperties {
        /**
         * The search results for this page
         */
        data?: outputs.search.Domainsearchresult[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.search.ListMetadata;
    }

    /**
     * Metadata for list responses
     */
    export interface ListMetadata {
        /**
         * Relevant links for this list
         */
        links?: outputs.search.ListMetadataLinksProperties;
        /**
         * Pagination details
         */
        pagination?: outputs.search.ListMetadataPaginationProperties;
    }

    /**
     * Relevant links for this list
     */
    export interface ListMetadataLinksProperties {
        first?: string;
        last?: string;
        next?: string;
        previous?: string;
        self?: string;
    }

    /**
     * Pagination details
     */
    export interface ListMetadataPaginationProperties {
        /**
         * The number of items in this page of the response
         */
        count?: number;
        /**
         * The current results page
         */
        currentPage?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The total number of objects matching the query
         */
        total?: number;
        /**
         * The total number of pages
         */
        totalPages?: number;
    }

}

export namespace tags {
    export interface DataProperties {
        /**
         * The ID of the object
         */
        id?: number;
        links?: outputs.tags.DataPropertiesLinksProperties;
    }

    export interface DataPropertiesLinksProperties {
        /**
         * The URL for the new object
         */
        self?: string;
    }

    export interface GetTagProperties {
        /**
         * A tag is used to group resources together
         */
        data?: outputs.tags.Tag;
    }

    /**
     * Metadata for list responses
     */
    export interface ListMetadata {
        /**
         * Relevant links for this list
         */
        links?: outputs.tags.ListMetadataLinksProperties;
        /**
         * Pagination details
         */
        pagination?: outputs.tags.ListMetadataPaginationProperties;
    }

    /**
     * Relevant links for this list
     */
    export interface ListMetadataLinksProperties {
        first?: string;
        last?: string;
        next?: string;
        previous?: string;
        self?: string;
    }

    /**
     * Pagination details
     */
    export interface ListMetadataPaginationProperties {
        /**
         * The number of items in this page of the response
         */
        count?: number;
        /**
         * The current results page
         */
        currentPage?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The total number of objects matching the query
         */
        total?: number;
        /**
         * The total number of pages
         */
        totalPages?: number;
    }

    export interface ListTagsProperties {
        data?: outputs.tags.Tag[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.tags.ListMetadata;
    }

    /**
     * A tag is used to group resources together
     */
    export interface Tag {
        /**
         * Unique ID for the tag
         */
        id?: number;
        /**
         * Links for tags
         */
        links?: outputs.tags.TagLinksProperties;
        /**
         * A name for this tag
         */
        name?: string;
    }

    /**
     * Links for tags
     */
    export interface TagLinksProperties {
        self?: string;
    }

}

export namespace templates {
    export interface DataProperties {
        /**
         * The ID of the object
         */
        id?: number;
        links?: outputs.templates.DataPropertiesLinksProperties;
    }

    export interface DataPropertiesLinksProperties {
        /**
         * The URL for the new object
         */
        self?: string;
    }

    export interface GetTemplateProperties {
        /**
         * A domain template
         */
        data?: outputs.templates.Template;
    }

    export interface GetTemplateRecord {
        /**
         * Links for the domain record
         */
        links?: outputs.templates.TemplaterecordPropertiesLinksProperties;
        template?: outputs.templates.SimpleTemplate;
    }

    /**
     * Metadata for list responses
     */
    export interface ListMetadata {
        /**
         * Relevant links for this list
         */
        links?: outputs.templates.ListMetadataLinksProperties;
        /**
         * Pagination details
         */
        pagination?: outputs.templates.ListMetadataPaginationProperties;
    }

    /**
     * Relevant links for this list
     */
    export interface ListMetadataLinksProperties {
        first?: string;
        last?: string;
        next?: string;
        previous?: string;
        self?: string;
    }

    /**
     * Pagination details
     */
    export interface ListMetadataPaginationProperties {
        /**
         * The number of items in this page of the response
         */
        count?: number;
        /**
         * The current results page
         */
        currentPage?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The total number of objects matching the query
         */
        total?: number;
        /**
         * The total number of pages
         */
        totalPages?: number;
    }

    export interface ListTemplateRecordsProperties {
        /**
         * The records for this page
         */
        data?: outputs.templates.ListTemplateRecordsPropertiesDataItem[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.templates.ListMetadata;
    }

    export interface ListTemplateRecordsPropertiesDataItem {
        /**
         * Links for the domain record
         */
        links?: outputs.templates.TemplaterecordPropertiesLinksProperties;
        template?: outputs.templates.SimpleTemplate;
    }

    export interface ListTemplatesProperties {
        /**
         * The records for this page
         */
        data?: outputs.templates.Template[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.templates.ListMetadata;
    }

    export interface SimpleTemplate {
        /**
         * The unique ID for this template
         */
        id?: number;
        /**
         * Links for the template
         */
        links?: outputs.templates.SimpleTemplateLinksProperties;
        /**
         * The name for the template
         */
        name?: string;
        /**
         * The version of the template resource
         */
        version?: number;
    }

    /**
     * Links for the template
     */
    export interface SimpleTemplateLinksProperties {
        records?: string;
        self?: string;
    }

    /**
     * A domain template
     */
    export interface Template {
        createdAt?: string;
        /**
         * Is GeoIP functionality enabled for the template
         */
        geoip?: boolean;
        /**
         * Is Global Traffic Director enabled for the template
         */
        gtd?: boolean;
        /**
         * The unique ID for this template
         */
        id?: number;
        /**
         * Links for the template
         */
        links?: outputs.templates.TemplateLinksProperties;
        /**
         * The name for the template
         */
        name?: string;
        updatedAt?: string;
        /**
         * The version of the template resource
         */
        version?: number;
    }

    /**
     * Links for the template
     */
    export interface TemplateLinksProperties {
        records?: string;
        self?: string;
    }

    /**
     * Links for the domain record
     */
    export interface TemplaterecordPropertiesLinksProperties {
        self?: string;
    }

}

export namespace vanitynameservers {
    export interface DataProperties {
        /**
         * The ID of the object
         */
        id?: number;
        links?: outputs.vanitynameservers.DataPropertiesLinksProperties;
    }

    export interface DataPropertiesLinksProperties {
        /**
         * The URL for the new object
         */
        self?: string;
    }

    export interface GetVanityNameserverProperties {
        /**
         * A rebranded nameserver using your own domain name.
         */
        data?: outputs.vanitynameservers.Vanitynameserver;
    }

    /**
     * Metadata for list responses
     */
    export interface ListMetadata {
        /**
         * Relevant links for this list
         */
        links?: outputs.vanitynameservers.ListMetadataLinksProperties;
        /**
         * Pagination details
         */
        pagination?: outputs.vanitynameservers.ListMetadataPaginationProperties;
    }

    /**
     * Relevant links for this list
     */
    export interface ListMetadataLinksProperties {
        first?: string;
        last?: string;
        next?: string;
        previous?: string;
        self?: string;
    }

    /**
     * Pagination details
     */
    export interface ListMetadataPaginationProperties {
        /**
         * The number of items in this page of the response
         */
        count?: number;
        /**
         * The current results page
         */
        currentPage?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The total number of objects matching the query
         */
        total?: number;
        /**
         * The total number of pages
         */
        totalPages?: number;
    }

    export interface ListVanityNameserversProperties {
        data?: outputs.vanitynameservers.Vanitynameserver[];
        /**
         * Metadata for list responses
         */
        meta?: outputs.vanitynameservers.ListMetadata;
    }

    export interface NameserverGroupProperties {
        /**
         * The ID of the nameserver group
         */
        id?: number;
    }

    /**
     * A rebranded nameserver using your own domain name.
     */
    export interface Vanitynameserver {
        /**
         * Is this the default nameserver for domains in the account
         */
        default?: boolean;
        /**
         * A unique ID for the vanity nameserver
         */
        id?: number;
        /**
         * Links for domain objects
         */
        links?: outputs.vanitynameservers.VanitynameserverLinksProperties;
        /**
         * A unique name for this vanity nameserver
         */
        name?: string;
        nameserverGroup?: outputs.vanitynameservers.VanitynameserverNameserverGroupProperties;
        /**
         * The nameserver hostnames
         */
        nameservers?: string[];
        /**
         * Is this nameserver public?
         */
        public?: boolean;
    }

    /**
     * Links for domain objects
     */
    export interface VanitynameserverLinksProperties {
        self?: string;
    }

    export interface VanitynameserverNameserverGroupProperties {
        /**
         * The ID of the nameserver group
         */
        id?: number;
        /**
         * The name of the nameserver group
         */
        name?: string;
    }

}
