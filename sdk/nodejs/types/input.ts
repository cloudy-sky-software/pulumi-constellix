// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";

export namespace analytics {
}

export namespace announcements {
}

export namespace contactlists {
}

export namespace domains {
    /**
     * The SOA details for the domain
     */
    export interface SoaPropertiesArgs {
        /**
         * Email of the administrator for the domain. @ should be replaced with .
         */
        email?: pulumi.Input<string>;
        /**
         * Number of seconds after which secondary nameservers should stop responding to queries, if the master does not respond
         */
        expire?: pulumi.Input<number>;
        /**
         * How long NXDOMAIN responses should be cached for
         */
        negativeCache?: pulumi.Input<number>;
        /**
         * Primary master nameserver for the domain
         */
        primaryNameserver?: pulumi.Input<string>;
        /**
         * The interval for secondary nameservers should query for the SOA record
         */
        refresh?: pulumi.Input<number>;
        /**
         * The number of seconds after which secondary servers should retry to request the serial number if the master does not respond
         */
        retry?: pulumi.Input<number>;
        /**
         * The Time To Live (TTL) in seconds for the SOA record
         */
        ttl?: pulumi.Input<number>;
    }

}

export namespace geoproximities {
}

export namespace ipfilters {
    export interface RegionsItemPropertiesArgs {
        /**
         * Optional AS Number that this rule applies to. Values must be between 0 and 4,294,967,295
         */
        asn?: pulumi.Input<number>;
        /**
         * The continent for this region
         */
        continent?: pulumi.Input<enums.ipfilters.RegionsItemPropertiesContinent>;
        /**
         * Optional 2 digit ISO code for the country - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
         */
        country?: pulumi.Input<string>;
        /**
         * Optional 2 digit code for the region
         */
        region?: pulumi.Input<string>;
    }
}

export namespace ping {
}

export namespace pools {
    export interface PoolitoArgs {
        /**
         * The Ito configuration
         */
        config?: pulumi.Input<inputs.pools.PoolitoConfigPropertiesArgs>;
        /**
         * Is Ito enabled for this pool?
         */
        enabled?: pulumi.Input<boolean>;
    }

    /**
     * The Ito configuration
     */
    export interface PoolitoConfigPropertiesArgs {
        /**
         * Percentage of how much is the response time allowed to deviate?
         */
        deviationAllowance?: pulumi.Input<enums.pools.PoolitoConfigPropertiesDeviationAllowance>;
        handicapFactor?: pulumi.Input<enums.pools.PoolitoConfigPropertiesHandicapFactor>;
        /**
         * The maximum number of results to return
         */
        maximumNumberOfResults?: pulumi.Input<number>;
        /**
         * Where monitoring should be performed from
         */
        monitoringRegion?: pulumi.Input<enums.pools.PoolitoConfigPropertiesMonitoringRegion>;
        /**
         * The number of seconds between each check
         */
        period?: pulumi.Input<enums.pools.PoolitoConfigPropertiesPeriod>;
    }

    /**
     * A possible value for the pool. Depends on the type of pool.
     */
    export interface ValuesItemPropertiesArgs {
        /**
         * Is this value enabled or not?
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * A handicap for this value
         */
        handicap?: pulumi.Input<number>;
        /**
         * The failover/check policy for this value
         */
        policy?: pulumi.Input<enums.pools.ValuesItemPropertiesPolicy>;
        /**
         * The ID of the check to use from Sonar
         */
        sonarCheckId?: pulumi.Input<number>;
        value?: pulumi.Input<string | string | string>;
        /**
         * A weight for the value. Must be between 1 and 1000000
         */
        weight?: pulumi.Input<number>;
    }
}

export namespace search {
}

export namespace tags {
}

export namespace templates {
}

export namespace vanitynameservers {
    export interface NameserverGroupPropertiesArgs {
        /**
         * The ID of the nameserver group
         */
        id?: pulumi.Input<number>;
    }

}
