// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class IPFilter extends pulumi.CustomResource {
    /**
     * Get an existing IPFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): IPFilter {
        return new IPFilter(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'constellix:ipfilters:IPFilter';

    /**
     * Returns true if the given object is an instance of IPFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IPFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IPFilter.__pulumiType;
    }

    /**
     * AS Numbers that this rule applies to. Values must be between 0 and 4,294,967,295
     */
    public readonly asn!: pulumi.Output<number[] | undefined>;
    /**
     * A list of continents in this filter
     */
    public readonly continents!: pulumi.Output<enums.ipfilters.ContinentsItem[] | undefined>;
    /**
     * 2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
     */
    public readonly countries!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly data!: pulumi.Output<outputs.ipfilters.DataProperties | undefined>;
    /**
     * IPv4 addresses and CIDRs that this filter applies to
     */
    public readonly ipv4!: pulumi.Output<string[] | undefined>;
    /**
     * IPv6 addresses and CIDRs that this filter applies to
     */
    public readonly ipv6!: pulumi.Output<string[] | undefined>;
    /**
     * The name for this IP filter
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * Combinations of Regions, Countries, Continents and optionally ASNs.
     */
    public readonly regions!: pulumi.Output<outputs.ipfilters.RegionsItemProperties[] | undefined>;
    /**
     * Values should be multiples of 100. Upper limit is the quota assigned to the account.
     */
    public readonly rulesLimit!: pulumi.Output<number | undefined>;

    /**
     * Create a IPFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IPFilterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["asn"] = args ? args.asn : undefined;
            resourceInputs["continents"] = args ? args.continents : undefined;
            resourceInputs["countries"] = args ? args.countries : undefined;
            resourceInputs["ipv4"] = args ? args.ipv4 : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["rulesLimit"] = args ? args.rulesLimit : undefined;
            resourceInputs["data"] = undefined /*out*/;
        } else {
            resourceInputs["asn"] = undefined /*out*/;
            resourceInputs["continents"] = undefined /*out*/;
            resourceInputs["countries"] = undefined /*out*/;
            resourceInputs["data"] = undefined /*out*/;
            resourceInputs["ipv4"] = undefined /*out*/;
            resourceInputs["ipv6"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["regions"] = undefined /*out*/;
            resourceInputs["rulesLimit"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IPFilter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a IPFilter resource.
 */
export interface IPFilterArgs {
    /**
     * AS Numbers that this rule applies to. Values must be between 0 and 4,294,967,295
     */
    asn?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A list of continents in this filter
     */
    continents?: pulumi.Input<pulumi.Input<enums.ipfilters.ContinentsItem>[]>;
    /**
     * 2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
     */
    countries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IPv4 addresses and CIDRs that this filter applies to
     */
    ipv4?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IPv6 addresses and CIDRs that this filter applies to
     */
    ipv6?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name for this IP filter
     */
    name?: pulumi.Input<string>;
    /**
     * Combinations of Regions, Countries, Continents and optionally ASNs.
     */
    regions?: pulumi.Input<pulumi.Input<inputs.ipfilters.RegionsItemPropertiesArgs>[]>;
    /**
     * Values should be multiples of 100. Upper limit is the quota assigned to the account.
     */
    rulesLimit?: pulumi.Input<number>;
}
