// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetIPFilterArgs, GetIPFilterOutputArgs } from "./getIPFilter";
export const getIPFilter: typeof import("./getIPFilter").getIPFilter = null as any;
export const getIPFilterOutput: typeof import("./getIPFilter").getIPFilterOutput = null as any;
utilities.lazyLoad(exports, ["getIPFilter","getIPFilterOutput"], () => require("./getIPFilter"));

export { IPFilterArgs } from "./ipfilter";
export type IPFilter = import("./ipfilter").IPFilter;
export const IPFilter: typeof import("./ipfilter").IPFilter = null as any;
utilities.lazyLoad(exports, ["IPFilter"], () => require("./ipfilter"));

export { ListIPFiltersArgs } from "./listIPFilters";
export const listIPFilters: typeof import("./listIPFilters").listIPFilters = null as any;
export const listIPFiltersOutput: typeof import("./listIPFilters").listIPFiltersOutput = null as any;
utilities.lazyLoad(exports, ["listIPFilters","listIPFiltersOutput"], () => require("./listIPFilters"));


// Export enums:
export * from "../types/enums/ipfilters";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "constellix:ipfilters:IPFilter":
                return new IPFilter(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("constellix", "ipfilters", _module)
