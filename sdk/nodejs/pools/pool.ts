// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Pool extends pulumi.CustomResource {
    /**
     * Get an existing Pool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Pool {
        return new Pool(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'constellix:pools:Pool';

    /**
     * Returns true if the given object is an instance of Pool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pool.__pulumiType;
    }

    /**
     * Contact lists to be emailed when this pool changes
     */
    public readonly contacts!: pulumi.Output<number[] | undefined>;
    public /*out*/ readonly data!: pulumi.Output<outputs.pools.DataProperties | undefined>;
    /**
     * Whether the pool is enabled or not
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly ito!: pulumi.Output<outputs.pools.Poolito | undefined>;
    /**
     * The number of records that must be available for this pool to be used for failover. Between 0 and 64.
     */
    public readonly minimumFailover!: pulumi.Output<number | undefined>;
    /**
     * A name for the pool
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * The minimum number of entries from the pool to return when queried. Between 0 and 64.
     */
    public readonly return!: pulumi.Output<number | undefined>;
    /**
     * The type of pool, either A, AAAA or CNAME
     */
    public readonly type!: pulumi.Output<enums.pools.Type | undefined>;
    /**
     * The values for this pool
     */
    public readonly values!: pulumi.Output<outputs.pools.ValuesItemProperties[] | undefined>;

    /**
     * Create a Pool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PoolArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["contacts"] = args ? args.contacts : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ito"] = args ? args.ito : undefined;
            resourceInputs["minimumFailover"] = args ? args.minimumFailover : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["return"] = args ? args.return : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
            resourceInputs["data"] = undefined /*out*/;
        } else {
            resourceInputs["contacts"] = undefined /*out*/;
            resourceInputs["data"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["ito"] = undefined /*out*/;
            resourceInputs["minimumFailover"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["return"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["values"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Pool resource.
 */
export interface PoolArgs {
    /**
     * Contact lists to be emailed when this pool changes
     */
    contacts?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Whether the pool is enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    ito?: pulumi.Input<inputs.pools.PoolitoArgs>;
    /**
     * The number of records that must be available for this pool to be used for failover. Between 0 and 64.
     */
    minimumFailover?: pulumi.Input<number>;
    /**
     * A name for the pool
     */
    name?: pulumi.Input<string>;
    /**
     * The minimum number of entries from the pool to return when queried. Between 0 and 64.
     */
    return?: pulumi.Input<number>;
    /**
     * The type of pool, either A, AAAA or CNAME
     */
    type?: pulumi.Input<enums.pools.Type>;
    /**
     * The values for this pool
     */
    values?: pulumi.Input<pulumi.Input<inputs.pools.ValuesItemPropertiesArgs>[]>;
}
