// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as analytics from "./analytics";
import * as announcements from "./announcements";
import * as config from "./config";
import * as contactlists from "./contactlists";
import * as domains from "./domains";
import * as geoproximities from "./geoproximities";
import * as ipfilters from "./ipfilters";
import * as ping from "./ping";
import * as pools from "./pools";
import * as search from "./search";
import * as tags from "./tags";
import * as templates from "./templates";
import * as types from "./types";
import * as vanitynameservers from "./vanitynameservers";

export {
    analytics,
    announcements,
    config,
    contactlists,
    domains,
    geoproximities,
    ipfilters,
    ping,
    pools,
    search,
    tags,
    templates,
    types,
    vanitynameservers,
};
pulumi.runtime.registerResourcePackage("constellix", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:constellix") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
