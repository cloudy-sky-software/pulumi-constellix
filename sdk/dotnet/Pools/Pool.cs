// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CONSTELLIX.Pools
{
    [CONSTELLIXResourceType("constellix:pools:Pool")]
    public partial class Pool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Contact lists to be emailed when this pool changes
        /// </summary>
        [Output("contacts")]
        public Output<ImmutableArray<int>> Contacts { get; private set; } = null!;

        [Output("data")]
        public Output<Outputs.DataProperties?> Data { get; private set; } = null!;

        /// <summary>
        /// Whether the pool is enabled or not
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("ito")]
        public Output<Outputs.Poolito?> Ito { get; private set; } = null!;

        /// <summary>
        /// The number of records that must be available for this pool to be used for failover. Between 0 and 64.
        /// </summary>
        [Output("minimumFailover")]
        public Output<int?> MinimumFailover { get; private set; } = null!;

        /// <summary>
        /// A name for the pool
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// The minimum number of entries from the pool to return when queried. Between 0 and 64.
        /// </summary>
        [Output("return")]
        public Output<int?> Return { get; private set; } = null!;

        /// <summary>
        /// The type of pool, either A, AAAA or CNAME
        /// </summary>
        [Output("type")]
        public Output<Pulumi.CONSTELLIX.Pools.Type?> Type { get; private set; } = null!;

        /// <summary>
        /// The values for this pool
        /// </summary>
        [Output("values")]
        public Output<ImmutableArray<Outputs.ValuesItemProperties>> Values { get; private set; } = null!;


        /// <summary>
        /// Create a Pool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pool(string name, PoolArgs? args = null, CustomResourceOptions? options = null)
            : base("constellix:pools:Pool", name, args ?? new PoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pool(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("constellix:pools:Pool", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/cloudy-sky-software/pulumi-constellix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pool Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Pool(name, id, options);
        }
    }

    public sealed class PoolArgs : global::Pulumi.ResourceArgs
    {
        [Input("contacts")]
        private InputList<int>? _contacts;

        /// <summary>
        /// Contact lists to be emailed when this pool changes
        /// </summary>
        public InputList<int> Contacts
        {
            get => _contacts ?? (_contacts = new InputList<int>());
            set => _contacts = value;
        }

        /// <summary>
        /// Whether the pool is enabled or not
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("ito")]
        public Input<Inputs.PoolitoArgs>? Ito { get; set; }

        /// <summary>
        /// The number of records that must be available for this pool to be used for failover. Between 0 and 64.
        /// </summary>
        [Input("minimumFailover")]
        public Input<int>? MinimumFailover { get; set; }

        /// <summary>
        /// A name for the pool
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The minimum number of entries from the pool to return when queried. Between 0 and 64.
        /// </summary>
        [Input("return")]
        public Input<int>? Return { get; set; }

        /// <summary>
        /// The type of pool, either A, AAAA or CNAME
        /// </summary>
        [Input("type")]
        public Input<Pulumi.CONSTELLIX.Pools.Type>? Type { get; set; }

        [Input("values")]
        private InputList<Inputs.ValuesItemPropertiesArgs>? _values;

        /// <summary>
        /// The values for this pool
        /// </summary>
        public InputList<Inputs.ValuesItemPropertiesArgs> Values
        {
            get => _values ?? (_values = new InputList<Inputs.ValuesItemPropertiesArgs>());
            set => _values = value;
        }

        public PoolArgs()
        {
        }
        public static new PoolArgs Empty => new PoolArgs();
    }
}
