// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CONSTELLIX.Ipfilters
{
    [CONSTELLIXResourceType("constellix:ipfilters:IPFilter")]
    public partial class IPFilter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// AS Numbers that this rule applies to. Values must be between 0 and 4,294,967,295
        /// </summary>
        [Output("asn")]
        public Output<ImmutableArray<int>> Asn { get; private set; } = null!;

        /// <summary>
        /// A list of continents in this filter
        /// </summary>
        [Output("continents")]
        public Output<ImmutableArray<Pulumi.CONSTELLIX.Ipfilters.ContinentsItem>> Continents { get; private set; } = null!;

        /// <summary>
        /// 2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        /// </summary>
        [Output("countries")]
        public Output<ImmutableArray<string>> Countries { get; private set; } = null!;

        [Output("data")]
        public Output<Outputs.DataProperties?> Data { get; private set; } = null!;

        /// <summary>
        /// IPv4 addresses and CIDRs that this filter applies to
        /// </summary>
        [Output("ipv4")]
        public Output<ImmutableArray<string>> Ipv4 { get; private set; } = null!;

        /// <summary>
        /// IPv6 addresses and CIDRs that this filter applies to
        /// </summary>
        [Output("ipv6")]
        public Output<ImmutableArray<string>> Ipv6 { get; private set; } = null!;

        /// <summary>
        /// The name for this IP filter
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// Combinations of Regions, Countries, Continents and optionally ASNs.
        /// </summary>
        [Output("regions")]
        public Output<ImmutableArray<Outputs.RegionsItemProperties>> Regions { get; private set; } = null!;

        /// <summary>
        /// Values should be multiples of 100. Upper limit is the quota assigned to the account.
        /// </summary>
        [Output("rulesLimit")]
        public Output<int?> RulesLimit { get; private set; } = null!;


        /// <summary>
        /// Create a IPFilter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IPFilter(string name, IPFilterArgs? args = null, CustomResourceOptions? options = null)
            : base("constellix:ipfilters:IPFilter", name, args ?? new IPFilterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IPFilter(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("constellix:ipfilters:IPFilter", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/cloudy-sky-software/pulumi-constellix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IPFilter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IPFilter Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new IPFilter(name, id, options);
        }
    }

    public sealed class IPFilterArgs : global::Pulumi.ResourceArgs
    {
        [Input("asn")]
        private InputList<int>? _asn;

        /// <summary>
        /// AS Numbers that this rule applies to. Values must be between 0 and 4,294,967,295
        /// </summary>
        public InputList<int> Asn
        {
            get => _asn ?? (_asn = new InputList<int>());
            set => _asn = value;
        }

        [Input("continents")]
        private InputList<Pulumi.CONSTELLIX.Ipfilters.ContinentsItem>? _continents;

        /// <summary>
        /// A list of continents in this filter
        /// </summary>
        public InputList<Pulumi.CONSTELLIX.Ipfilters.ContinentsItem> Continents
        {
            get => _continents ?? (_continents = new InputList<Pulumi.CONSTELLIX.Ipfilters.ContinentsItem>());
            set => _continents = value;
        }

        [Input("countries")]
        private InputList<string>? _countries;

        /// <summary>
        /// 2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        /// </summary>
        public InputList<string> Countries
        {
            get => _countries ?? (_countries = new InputList<string>());
            set => _countries = value;
        }

        [Input("ipv4")]
        private InputList<string>? _ipv4;

        /// <summary>
        /// IPv4 addresses and CIDRs that this filter applies to
        /// </summary>
        public InputList<string> Ipv4
        {
            get => _ipv4 ?? (_ipv4 = new InputList<string>());
            set => _ipv4 = value;
        }

        [Input("ipv6")]
        private InputList<string>? _ipv6;

        /// <summary>
        /// IPv6 addresses and CIDRs that this filter applies to
        /// </summary>
        public InputList<string> Ipv6
        {
            get => _ipv6 ?? (_ipv6 = new InputList<string>());
            set => _ipv6 = value;
        }

        /// <summary>
        /// The name for this IP filter
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("regions")]
        private InputList<Inputs.RegionsItemPropertiesArgs>? _regions;

        /// <summary>
        /// Combinations of Regions, Countries, Continents and optionally ASNs.
        /// </summary>
        public InputList<Inputs.RegionsItemPropertiesArgs> Regions
        {
            get => _regions ?? (_regions = new InputList<Inputs.RegionsItemPropertiesArgs>());
            set => _regions = value;
        }

        /// <summary>
        /// Values should be multiples of 100. Upper limit is the quota assigned to the account.
        /// </summary>
        [Input("rulesLimit")]
        public Input<int>? RulesLimit { get; set; }

        public IPFilterArgs()
        {
        }
        public static new IPFilterArgs Empty => new IPFilterArgs();
    }
}
