// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CloudySkySoftware.Pulumi.Constellix.Pools.Outputs
{

    /// <summary>
    /// A possible value for the pool. Depends on the type of pool.
    /// </summary>
    [OutputType]
    public sealed class PoolValuesItemProperties
    {
        /// <summary>
        /// Is the value active or not?
        /// </summary>
        public readonly bool? Activated;
        /// <summary>
        /// Is this value enabled or not?
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Is this value considered failed by monitoring
        /// </summary>
        public readonly bool? Failed;
        /// <summary>
        /// A handicap for this value
        /// </summary>
        public readonly double? Handicap;
        /// <summary>
        /// The failover/check policy for this value
        /// </summary>
        public readonly CloudySkySoftware.Pulumi.Constellix.Pools.PoolValuesItemPropertiesPolicy? Policy;
        /// <summary>
        /// The ID of the check to use from Sonar
        /// </summary>
        public readonly int? SonarCheckId;
        /// <summary>
        /// The response time in the last check
        /// </summary>
        public readonly double? Speed;
        public readonly string? Value;
        /// <summary>
        /// A weight for the value. Must be between 1 and 1000000
        /// </summary>
        public readonly int? Weight;

        [OutputConstructor]
        private PoolValuesItemProperties(
            bool? activated,

            bool? enabled,

            bool? failed,

            double? handicap,

            CloudySkySoftware.Pulumi.Constellix.Pools.PoolValuesItemPropertiesPolicy? policy,

            int? sonarCheckId,

            double? speed,

            string? value,

            int? weight)
        {
            Activated = activated;
            Enabled = enabled;
            Failed = failed;
            Handicap = handicap;
            Policy = policy;
            SonarCheckId = sonarCheckId;
            Speed = speed;
            Value = value;
            Weight = weight;
        }
    }
}
