// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CONSTELLIX.Vanitynameservers
{
    /// <summary>
    /// A rebranded nameserver using your own domain name.
    /// </summary>
    [CONSTELLIXResourceType("constellix:vanitynameservers:VanityNameserver")]
    public partial class VanityNameserver : global::Pulumi.CustomResource
    {
        [Output("data")]
        public Output<Outputs.DataProperties?> Data { get; private set; } = null!;

        /// <summary>
        /// Is this the default nameserver for domains in the account
        /// </summary>
        [Output("default")]
        public Output<bool?> Default { get; private set; } = null!;

        /// <summary>
        /// A unique name for this vanity nameserver
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        [Output("nameserverGroup")]
        public Output<Outputs.NameserverGroupProperties?> NameserverGroup { get; private set; } = null!;

        /// <summary>
        /// The nameserver hostnames
        /// </summary>
        [Output("nameservers")]
        public Output<ImmutableArray<string>> Nameservers { get; private set; } = null!;


        /// <summary>
        /// Create a VanityNameserver resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VanityNameserver(string name, VanityNameserverArgs? args = null, CustomResourceOptions? options = null)
            : base("constellix:vanitynameservers:VanityNameserver", name, args ?? new VanityNameserverArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VanityNameserver(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("constellix:vanitynameservers:VanityNameserver", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/cloudy-sky-software/pulumi-constellix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VanityNameserver resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VanityNameserver Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VanityNameserver(name, id, options);
        }
    }

    public sealed class VanityNameserverArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is this the default nameserver for domains in the account
        /// </summary>
        [Input("default")]
        public Input<bool>? Default { get; set; }

        /// <summary>
        /// A unique name for this vanity nameserver
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameserverGroup")]
        public Input<Inputs.NameserverGroupPropertiesArgs>? NameserverGroup { get; set; }

        [Input("nameservers")]
        private InputList<string>? _nameservers;

        /// <summary>
        /// The nameserver hostnames
        /// </summary>
        public InputList<string> Nameservers
        {
            get => _nameservers ?? (_nameservers = new InputList<string>());
            set => _nameservers = value;
        }

        public VanityNameserverArgs()
        {
        }
        public static new VanityNameserverArgs Empty => new VanityNameserverArgs();
    }
}
