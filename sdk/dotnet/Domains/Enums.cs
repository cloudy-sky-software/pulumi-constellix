// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.CONSTELLIX.Domains
{
    /// <summary>
    /// Optional region for this record. Will default to 'default'.
    /// </summary>
    [EnumType]
    public readonly struct DomainRecordPropertiesRegion : IEquatable<DomainRecordPropertiesRegion>
    {
        private readonly string _value;

        private DomainRecordPropertiesRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainRecordPropertiesRegion Default { get; } = new DomainRecordPropertiesRegion("default");
        public static DomainRecordPropertiesRegion Europe { get; } = new DomainRecordPropertiesRegion("europe");
        public static DomainRecordPropertiesRegion UsEast { get; } = new DomainRecordPropertiesRegion("us-east");
        public static DomainRecordPropertiesRegion UsWest { get; } = new DomainRecordPropertiesRegion("us-west");
        public static DomainRecordPropertiesRegion AsiaPacific { get; } = new DomainRecordPropertiesRegion("asia-pacific");
        public static DomainRecordPropertiesRegion Oceania { get; } = new DomainRecordPropertiesRegion("oceania");
        public static DomainRecordPropertiesRegion SouthAmerica { get; } = new DomainRecordPropertiesRegion("south-america");

        public static bool operator ==(DomainRecordPropertiesRegion left, DomainRecordPropertiesRegion right) => left.Equals(right);
        public static bool operator !=(DomainRecordPropertiesRegion left, DomainRecordPropertiesRegion right) => !left.Equals(right);

        public static explicit operator string(DomainRecordPropertiesRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainRecordPropertiesRegion other && Equals(other);
        public bool Equals(DomainRecordPropertiesRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DomainStatus : IEquatable<DomainStatus>
    {
        private readonly string _value;

        private DomainStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainStatus Active { get; } = new DomainStatus("ACTIVE");
        public static DomainStatus Suspended { get; } = new DomainStatus("SUSPENDED");
        public static DomainStatus Terminated { get; } = new DomainStatus("TERMINATED");

        public static bool operator ==(DomainStatus left, DomainStatus right) => left.Equals(right);
        public static bool operator !=(DomainStatus left, DomainStatus right) => !left.Equals(right);

        public static explicit operator string(DomainStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainStatus other && Equals(other);
        public bool Equals(DomainStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of query the analytics are for
    /// </summary>
    [EnumType]
    public readonly struct DomainanalyticsQueriesItemPropertiesType : IEquatable<DomainanalyticsQueriesItemPropertiesType>
    {
        private readonly string _value;

        private DomainanalyticsQueriesItemPropertiesType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainanalyticsQueriesItemPropertiesType GeoProximity { get; } = new DomainanalyticsQueriesItemPropertiesType("geo_proximity");
        public static DomainanalyticsQueriesItemPropertiesType Standard { get; } = new DomainanalyticsQueriesItemPropertiesType("standard");
        public static DomainanalyticsQueriesItemPropertiesType GeoFilter { get; } = new DomainanalyticsQueriesItemPropertiesType("geo_filter");

        public static bool operator ==(DomainanalyticsQueriesItemPropertiesType left, DomainanalyticsQueriesItemPropertiesType right) => left.Equals(right);
        public static bool operator !=(DomainanalyticsQueriesItemPropertiesType left, DomainanalyticsQueriesItemPropertiesType right) => !left.Equals(right);

        public static explicit operator string(DomainanalyticsQueriesItemPropertiesType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainanalyticsQueriesItemPropertiesType other && Equals(other);
        public bool Equals(DomainanalyticsQueriesItemPropertiesType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SimpleDomainStatus : IEquatable<SimpleDomainStatus>
    {
        private readonly string _value;

        private SimpleDomainStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SimpleDomainStatus Active { get; } = new SimpleDomainStatus("ACTIVE");
        public static SimpleDomainStatus Suspended { get; } = new SimpleDomainStatus("SUSPENDED");
        public static SimpleDomainStatus Terminated { get; } = new SimpleDomainStatus("TERMINATED");

        public static bool operator ==(SimpleDomainStatus left, SimpleDomainStatus right) => left.Equals(right);
        public static bool operator !=(SimpleDomainStatus left, SimpleDomainStatus right) => !left.Equals(right);

        public static explicit operator string(SimpleDomainStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SimpleDomainStatus other && Equals(other);
        public bool Equals(SimpleDomainStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
