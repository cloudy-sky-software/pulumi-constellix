// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CONSTELLIX.Domains
{
    [CONSTELLIXResourceType("constellix:domains:Domain")]
    public partial class Domain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Contactlists to be notified if the domain is updated
        /// </summary>
        [Output("contacts")]
        public Output<ImmutableArray<int>> Contacts { get; private set; } = null!;

        [Output("data")]
        public Output<Outputs.DataProperties?> Data { get; private set; } = null!;

        /// <summary>
        /// Is the domain enabled
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Is GeoIP functionality enabled for the domain
        /// </summary>
        [Output("geoip")]
        public Output<bool?> Geoip { get; private set; } = null!;

        /// <summary>
        /// Is Global Traffic Director enabled for the domain
        /// </summary>
        [Output("gtd")]
        public Output<bool?> Gtd { get; private set; } = null!;

        /// <summary>
        /// The name of the domain
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// A note for the domain
        /// </summary>
        [Output("note")]
        public Output<string?> Note { get; private set; } = null!;

        /// <summary>
        /// The SOA details for the domain
        /// </summary>
        [Output("soa")]
        public Output<Outputs.SoaProperties?> Soa { get; private set; } = null!;

        /// <summary>
        /// The numeric IDs of tags you want to apply to this domain
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<int>> Tags { get; private set; } = null!;

        /// <summary>
        /// The template to use for creating this domain. It will be linked to this template so any changes made to the template will apply to this domain.
        /// </summary>
        [Output("template")]
        public Output<int?> Template { get; private set; } = null!;

        /// <summary>
        /// The vanity nameserver to use for this domain.
        /// </summary>
        [Output("vanityNameserver")]
        public Output<int?> VanityNameserver { get; private set; } = null!;


        /// <summary>
        /// Create a Domain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Domain(string name, DomainArgs? args = null, CustomResourceOptions? options = null)
            : base("constellix:domains:Domain", name, args ?? new DomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Domain(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("constellix:domains:Domain", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/cloudy-sky-software/pulumi-constellix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Domain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Domain Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Domain(name, id, options);
        }
    }

    public sealed class DomainArgs : global::Pulumi.ResourceArgs
    {
        [Input("contacts")]
        private InputList<int>? _contacts;

        /// <summary>
        /// Contactlists to be notified if the domain is updated
        /// </summary>
        public InputList<int> Contacts
        {
            get => _contacts ?? (_contacts = new InputList<int>());
            set => _contacts = value;
        }

        /// <summary>
        /// Is the domain enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Is GeoIP functionality enabled for the domain
        /// </summary>
        [Input("geoip")]
        public Input<bool>? Geoip { get; set; }

        /// <summary>
        /// Is Global Traffic Director enabled for the domain
        /// </summary>
        [Input("gtd")]
        public Input<bool>? Gtd { get; set; }

        /// <summary>
        /// The name of the domain
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A note for the domain
        /// </summary>
        [Input("note")]
        public Input<string>? Note { get; set; }

        /// <summary>
        /// The SOA details for the domain
        /// </summary>
        [Input("soa")]
        public Input<Inputs.SoaPropertiesArgs>? Soa { get; set; }

        [Input("tags")]
        private InputList<int>? _tags;

        /// <summary>
        /// The numeric IDs of tags you want to apply to this domain
        /// </summary>
        public InputList<int> Tags
        {
            get => _tags ?? (_tags = new InputList<int>());
            set => _tags = value;
        }

        /// <summary>
        /// The template to use for creating this domain. It will be linked to this template so any changes made to the template will apply to this domain.
        /// </summary>
        [Input("template")]
        public Input<int>? Template { get; set; }

        /// <summary>
        /// The vanity nameserver to use for this domain.
        /// </summary>
        [Input("vanityNameserver")]
        public Input<int>? VanityNameserver { get; set; }

        public DomainArgs()
        {
        }
        public static new DomainArgs Empty => new DomainArgs();
    }
}
