# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'SoaPropertiesArgs',
    'SoaPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class SoaPropertiesArgsDict(TypedDict):
        """
        The SOA details for the domain
        """
        email: NotRequired[pulumi.Input[str]]
        """
        Email of the administrator for the domain. @ should be replaced with .
        """
        expire: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after which secondary nameservers should stop responding to queries, if the master does not respond
        """
        negative_cache: NotRequired[pulumi.Input[int]]
        """
        How long NXDOMAIN responses should be cached for
        """
        primary_nameserver: NotRequired[pulumi.Input[str]]
        """
        Primary master nameserver for the domain
        """
        refresh: NotRequired[pulumi.Input[int]]
        """
        The interval for secondary nameservers should query for the SOA record
        """
        retry: NotRequired[pulumi.Input[int]]
        """
        The number of seconds after which secondary servers should retry to request the serial number if the master does not respond
        """
        ttl: NotRequired[pulumi.Input[int]]
        """
        The Time To Live (TTL) in seconds for the SOA record
        """
elif False:
    SoaPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SoaPropertiesArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[str]] = None,
                 expire: Optional[pulumi.Input[int]] = None,
                 negative_cache: Optional[pulumi.Input[int]] = None,
                 primary_nameserver: Optional[pulumi.Input[str]] = None,
                 refresh: Optional[pulumi.Input[int]] = None,
                 retry: Optional[pulumi.Input[int]] = None,
                 ttl: Optional[pulumi.Input[int]] = None):
        """
        The SOA details for the domain
        :param pulumi.Input[str] email: Email of the administrator for the domain. @ should be replaced with .
        :param pulumi.Input[int] expire: Number of seconds after which secondary nameservers should stop responding to queries, if the master does not respond
        :param pulumi.Input[int] negative_cache: How long NXDOMAIN responses should be cached for
        :param pulumi.Input[str] primary_nameserver: Primary master nameserver for the domain
        :param pulumi.Input[int] refresh: The interval for secondary nameservers should query for the SOA record
        :param pulumi.Input[int] retry: The number of seconds after which secondary servers should retry to request the serial number if the master does not respond
        :param pulumi.Input[int] ttl: The Time To Live (TTL) in seconds for the SOA record
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expire is not None:
            pulumi.set(__self__, "expire", expire)
        if negative_cache is not None:
            pulumi.set(__self__, "negative_cache", negative_cache)
        if primary_nameserver is not None:
            pulumi.set(__self__, "primary_nameserver", primary_nameserver)
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the administrator for the domain. @ should be replaced with .
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def expire(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which secondary nameservers should stop responding to queries, if the master does not respond
        """
        return pulumi.get(self, "expire")

    @expire.setter
    def expire(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire", value)

    @property
    @pulumi.getter(name="negativeCache")
    def negative_cache(self) -> Optional[pulumi.Input[int]]:
        """
        How long NXDOMAIN responses should be cached for
        """
        return pulumi.get(self, "negative_cache")

    @negative_cache.setter
    def negative_cache(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "negative_cache", value)

    @property
    @pulumi.getter(name="primaryNameserver")
    def primary_nameserver(self) -> Optional[pulumi.Input[str]]:
        """
        Primary master nameserver for the domain
        """
        return pulumi.get(self, "primary_nameserver")

    @primary_nameserver.setter
    def primary_nameserver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_nameserver", value)

    @property
    @pulumi.getter
    def refresh(self) -> Optional[pulumi.Input[int]]:
        """
        The interval for secondary nameservers should query for the SOA record
        """
        return pulumi.get(self, "refresh")

    @refresh.setter
    def refresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh", value)

    @property
    @pulumi.getter
    def retry(self) -> Optional[pulumi.Input[int]]:
        """
        The number of seconds after which secondary servers should retry to request the serial number if the master does not respond
        """
        return pulumi.get(self, "retry")

    @retry.setter
    def retry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The Time To Live (TTL) in seconds for the SOA record
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)


