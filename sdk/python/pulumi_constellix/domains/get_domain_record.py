# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetDomainRecord',
    'AwaitableGetDomainRecord',
    'get_domain_record',
    'get_domain_record_output',
]

@pulumi.output_type
class GetDomainRecord:
    def __init__(__self__, domain=None, links=None):
        if domain and not isinstance(domain, dict):
            raise TypeError("Expected argument 'domain' to be a dict")
        pulumi.set(__self__, "domain", domain)
        if links and not isinstance(links, dict):
            raise TypeError("Expected argument 'links' to be a dict")
        pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def domain(self) -> Optional['outputs.SimpleDomain']:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.DomainrecordPropertiesLinksProperties']:
        """
        Links for the domain record
        """
        return pulumi.get(self, "links")


class AwaitableGetDomainRecord(GetDomainRecord):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainRecord(
            domain=self.domain,
            links=self.links)


def get_domain_record(domain_id: Optional[str] = None,
                      id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainRecord:
    """
    Use this data source to access information about an existing resource.

    :param str domain_id: The ID of the domain object
    :param str id: The ID of the record
    """
    __args__ = dict()
    __args__['domainId'] = domain_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('constellix:domains:getDomainRecord', __args__, opts=opts, typ=GetDomainRecord).value

    return AwaitableGetDomainRecord(
        domain=pulumi.get(__ret__, 'domain'),
        links=pulumi.get(__ret__, 'links'))
def get_domain_record_output(domain_id: Optional[pulumi.Input[str]] = None,
                             id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainRecord]:
    """
    Use this data source to access information about an existing resource.

    :param str domain_id: The ID of the domain object
    :param str id: The ID of the record
    """
    __args__ = dict()
    __args__['domainId'] = domain_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('constellix:domains:getDomainRecord', __args__, opts=opts, typ=GetDomainRecord)
    return __ret__.apply(lambda __response__: GetDomainRecord(
        domain=pulumi.get(__response__, 'domain'),
        links=pulumi.get(__response__, 'links')))
