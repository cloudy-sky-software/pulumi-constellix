# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'DataProperties',
    'DataPropertiesLinksProperties',
    'Domain',
    'DomainLinksProperties',
    'Domainanalytics',
    'DomainanalyticsIntervalProperties',
    'DomainanalyticsLinksProperties',
    'DomainanalyticsQueriesItemProperties',
    'DomainanalyticsQueriesItemPropertiesStatsProperties',
    'DomainanalyticsQueriesItemPropertiesValuesItemProperties',
    'DomainanalyticsStatsProperties',
    'Domainhistory',
    'Domainsnapshot',
    'GetAAAAPropertiesLastValuesProperties',
    'GetAAAAPropertiesLastValuesPropertiesFailoverProperties',
    'GetAAAAPropertiesLastValuesPropertiesFailoverPropertiesValuesItem',
    'GetAAAAPropertiesLastValuesPropertiesRoundRobinFailoverItem',
    'GetAAAAPropertiesLastValuesPropertiesStandardItemProperties',
    'GetANAMEPropertiesLastValuesProperties',
    'GetANAMEPropertiesLastValuesPropertiesFailoverProperties',
    'GetANAMEPropertiesLastValuesPropertiesFailoverPropertiesValuesItem',
    'GetANAMEPropertiesLastValuesPropertiesStandardItemProperties',
    'GetAPropertiesLastValuesProperties',
    'GetAPropertiesLastValuesPropertiesFailoverProperties',
    'GetAPropertiesLastValuesPropertiesFailoverPropertiesValuesItem',
    'GetAPropertiesLastValuesPropertiesRoundRobinFailoverItem',
    'GetAPropertiesLastValuesPropertiesStandardItemProperties',
    'GetCAAPropertiesLastValuesProperties',
    'GetCERTPropertiesLastValuesProperties',
    'GetCNAMEPropertiesLastValuesProperties',
    'GetCNAMEPropertiesLastValuesPropertiesFailoverProperties',
    'GetCNAMEPropertiesLastValuesPropertiesFailoverPropertiesValuesItem',
    'GetCNAMEPropertiesLastValuesPropertiesStandardItemProperties',
    'GetDomainNameserverPropertiesDataProperties',
    'GetDomainNameserverPropertiesDataPropertiesLinksProperties',
    'GetHINFOPropertiesLastValuesProperties',
    'GetHttpPropertiesLastValuesProperties',
    'GetMXPropertiesLastValuesProperties',
    'GetNAPTRPropertiesLastValuesProperties',
    'GetNSPropertiesLastValuesProperties',
    'GetPTRPropertiesLastValuesProperties',
    'GetRPPropertiesLastValuesProperties',
    'GetSPFPropertiesLastValuesProperties',
    'GetSRVPropertiesLastValuesProperties',
    'GetTXTPropertiesLastValuesProperties',
    'Items',
    'ListDomainHistoryPropertiesDataItem',
    'ListDomainRecordsPropertiesDataItem',
    'ListDomainRecordsPropertiesDataItemPropertiesLinksProperties',
    'ListDomainSnapshotsPropertiesDataItem',
    'ListMetadata',
    'ListMetadataLinksProperties',
    'ListMetadataPaginationProperties',
    'PropertiesValueItems',
    'SimpleContactlist',
    'SimpleContactlistLinksProperties',
    'SimpleDomain',
    'SimpleDomainLinksProperties',
    'SimpleGeoproximity',
    'SimpleGeoproximityLinksProperties',
    'SimpleIpfilter',
    'SimpleIpfilterLinksProperties',
    'SimplePool',
    'SimplePoolLinksProperties',
    'SimpleTemplate',
    'SimpleTemplateLinksProperties',
    'SimpleVanitynameserver',
    'SimpleVanitynameserverLinksProperties',
    'Soa',
    'SoaProperties',
    'Tag',
    'TagLinksProperties',
    'TemplaterecordLinksProperties',
    'Value',
    'ValueARequestValueItemProperties',
    'ValueARequestValueProperties',
    'ValueARequestValuePropertiesValuesItemProperties',
    'ValueAValue',
    'ValueAValuePropertiesValuesItem',
    'ValueAaaaRequestValueItemProperties',
    'ValueAaaaRequestValueProperties',
    'ValueAaaaRequestValuePropertiesValuesItemProperties',
    'ValueAaaaValue',
    'ValueAaaaValuePropertiesValuesItem',
    'ValueAnameRequestValueItemProperties',
    'ValueAnameRequestValueProperties',
    'ValueAnameRequestValuePropertiesValuesItemProperties',
    'ValueAnameValueItemProperties',
    'ValueAnameValueProperties',
    'ValueAnameValuePropertiesValuesItem',
    'ValueCaaValueItemProperties',
    'ValueCertValueItemProperties',
    'ValueCnameRequestValueItemProperties',
    'ValueCnameRequestValueProperties',
    'ValueCnameRequestValuePropertiesValuesItemProperties',
    'ValueCnameValue',
    'ValueCnameValuePropertiesValuesItem',
    'ValueHinfoValueItemProperties',
    'ValueHttpValueProperties',
    'ValueItems',
    'ValueMxPropertiesValueItems',
    'ValueMxValueItemProperties',
    'ValueNaptrPropertiesValueItems',
    'ValueNaptrValueItemProperties',
    'ValueNsPropertiesValueItems',
    'ValueNsValueItemProperties',
    'ValuePtrPropertiesValueItems',
    'ValuePtrValueItemProperties',
    'ValueRpPropertiesValueItems',
    'ValueRpValueItemProperties',
    'ValueSpfPropertiesValueItems',
    'ValueSpfValueItemProperties',
    'ValueSrvPropertiesValueItems',
    'ValueSrvValueItemProperties',
    'ValueTxtPropertiesValueItems',
    'ValueTxtValueItemProperties',
]

@pulumi.output_type
class DataProperties(dict):
    def __init__(__self__, *,
                 links: Optional['outputs.DataPropertiesLinksProperties'] = None,
                 version: Optional[int] = None):
        """
        :param int version: The version of the snapshot
        """
        if links is not None:
            pulumi.set(__self__, "links", links)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.DataPropertiesLinksProperties']:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version of the snapshot
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DataPropertiesLinksProperties(dict):
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        :param str self: The URL for the new object
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        """
        The URL for the new object
        """
        return pulumi.get(self, "self")


@pulumi.output_type
class Domain(dict):
    def __init__(__self__, *,
                 contacts: Optional[Sequence['outputs.SimpleContactlist']] = None,
                 created_at: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 geoip: Optional[bool] = None,
                 gtd: Optional[bool] = None,
                 id: Optional[int] = None,
                 links: Optional['outputs.DomainLinksProperties'] = None,
                 name: Optional[str] = None,
                 nameservers: Optional[Sequence[str]] = None,
                 note: Optional[str] = None,
                 soa: Optional['outputs.Soa'] = None,
                 status: Optional['DomainStatus'] = None,
                 tags: Optional[Sequence['outputs.Tag']] = None,
                 template: Optional['outputs.SimpleTemplate'] = None,
                 updated_at: Optional[str] = None,
                 vanity_nameserver: Optional['outputs.SimpleVanitynameserver'] = None,
                 version: Optional[int] = None):
        """
        :param Sequence['SimpleContactlist'] contacts: An array of contact lists that will be notified when records in this domain change.
        :param bool enabled: Is the domain enabled
        :param bool geoip: Is GeoIP functionality enabled for the domain
        :param bool gtd: Is Global Traffic Director enabled for the domain
        :param int id: A unique numeric ID for this domain
        :param 'DomainLinksProperties' links: Links for domain objects
        :param str name: The name of the domain
        :param Sequence[str] nameservers: The nameservers for the domain
        :param str note: A note for the domain
        :param 'Soa' soa: SOA (Start of Authority) Record
        :param Sequence['Tag'] tags: An array of tags for this domain.
        :param 'SimpleVanitynameserver' vanity_nameserver: A simplied version of a rebranded nameserver using your own domain name.
        :param int version: The version of the domain resource
        """
        if contacts is not None:
            pulumi.set(__self__, "contacts", contacts)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if geoip is not None:
            pulumi.set(__self__, "geoip", geoip)
        if gtd is not None:
            pulumi.set(__self__, "gtd", gtd)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if soa is not None:
            pulumi.set(__self__, "soa", soa)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vanity_nameserver is not None:
            pulumi.set(__self__, "vanity_nameserver", vanity_nameserver)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def contacts(self) -> Optional[Sequence['outputs.SimpleContactlist']]:
        """
        An array of contact lists that will be notified when records in this domain change.
        """
        return pulumi.get(self, "contacts")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is the domain enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def geoip(self) -> Optional[bool]:
        """
        Is GeoIP functionality enabled for the domain
        """
        return pulumi.get(self, "geoip")

    @property
    @pulumi.getter
    def gtd(self) -> Optional[bool]:
        """
        Is Global Traffic Director enabled for the domain
        """
        return pulumi.get(self, "gtd")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        A unique numeric ID for this domain
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.DomainLinksProperties']:
        """
        Links for domain objects
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the domain
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[Sequence[str]]:
        """
        The nameservers for the domain
        """
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter
    def note(self) -> Optional[str]:
        """
        A note for the domain
        """
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def soa(self) -> Optional['outputs.Soa']:
        """
        SOA (Start of Authority) Record
        """
        return pulumi.get(self, "soa")

    @property
    @pulumi.getter
    def status(self) -> Optional['DomainStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.Tag']]:
        """
        An array of tags for this domain.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.SimpleTemplate']:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vanityNameserver")
    def vanity_nameserver(self) -> Optional['outputs.SimpleVanitynameserver']:
        """
        A simplied version of a rebranded nameserver using your own domain name.
        """
        return pulumi.get(self, "vanity_nameserver")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version of the domain resource
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainLinksProperties(dict):
    """
    Links for domain objects
    """
    def __init__(__self__, *,
                 records: Optional[str] = None,
                 self: Optional[str] = None):
        """
        Links for domain objects
        """
        if records is not None:
            pulumi.set(__self__, "records", records)
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def records(self) -> Optional[str]:
        return pulumi.get(self, "records")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class Domainanalytics(dict):
    """
    Analytics for a specific domain
    """
    def __init__(__self__, *,
                 domain: Optional['outputs.SimpleDomain'] = None,
                 end: Optional[str] = None,
                 interval: Optional['outputs.DomainanalyticsIntervalProperties'] = None,
                 links: Optional['outputs.DomainanalyticsLinksProperties'] = None,
                 queries: Optional[Sequence['outputs.DomainanalyticsQueriesItemProperties']] = None,
                 start: Optional[str] = None,
                 stats: Optional['outputs.DomainanalyticsStatsProperties'] = None):
        """
        Analytics for a specific domain
        :param str end: The end date for the analytics
        :param 'DomainanalyticsIntervalProperties' interval: Details about the interval between time periods in the analytics
        :param Sequence['DomainanalyticsQueriesItemProperties'] queries: An array of analytics data for different types of query
        :param str start: The start date for the analytics
        :param 'DomainanalyticsStatsProperties' stats: Some statistics for these analytics
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if start is not None:
            pulumi.set(__self__, "start", start)
        if stats is not None:
            pulumi.set(__self__, "stats", stats)

    @property
    @pulumi.getter
    def domain(self) -> Optional['outputs.SimpleDomain']:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        """
        The end date for the analytics
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def interval(self) -> Optional['outputs.DomainanalyticsIntervalProperties']:
        """
        Details about the interval between time periods in the analytics
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.DomainanalyticsLinksProperties']:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DomainanalyticsQueriesItemProperties']]:
        """
        An array of analytics data for different types of query
        """
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        """
        The start date for the analytics
        """
        return pulumi.get(self, "start")

    @property
    @pulumi.getter
    def stats(self) -> Optional['outputs.DomainanalyticsStatsProperties']:
        """
        Some statistics for these analytics
        """
        return pulumi.get(self, "stats")


@pulumi.output_type
class DomainanalyticsIntervalProperties(dict):
    """
    Details about the interval between time periods in the analytics
    """
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 mean: Optional[float] = None,
                 min: Optional[int] = None):
        """
        Details about the interval between time periods in the analytics
        :param int max: The maximum number of seconds between time periods
        :param float mean: The mean average number of seconds between time periods
        :param int min: The minimum number of seconds between time periods
        """
        if max is not None:
            pulumi.set(__self__, "max", max)
        if mean is not None:
            pulumi.set(__self__, "mean", mean)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        """
        The maximum number of seconds between time periods
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def mean(self) -> Optional[float]:
        """
        The mean average number of seconds between time periods
        """
        return pulumi.get(self, "mean")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        """
        The minimum number of seconds between time periods
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class DomainanalyticsLinksProperties(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 self: Optional[str] = None):
        """
        :param str domain: The URL for the domain
        :param str self: The URL for these analytics
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        The URL for the domain
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        """
        The URL for these analytics
        """
        return pulumi.get(self, "self")


@pulumi.output_type
class DomainanalyticsQueriesItemProperties(dict):
    """
    Analytics for a particular query type
    """
    def __init__(__self__, *,
                 stats: Optional['outputs.DomainanalyticsQueriesItemPropertiesStatsProperties'] = None,
                 type: Optional['DomainanalyticsQueriesItemPropertiesType'] = None,
                 values: Optional[Sequence['outputs.DomainanalyticsQueriesItemPropertiesValuesItemProperties']] = None):
        """
        Analytics for a particular query type
        :param 'DomainanalyticsQueriesItemPropertiesStatsProperties' stats: Some statistics for these analytics
        :param 'DomainanalyticsQueriesItemPropertiesType' type: The type of query the analytics are for
        :param Sequence['DomainanalyticsQueriesItemPropertiesValuesItemProperties'] values: Query counts for all dates within the requested range
        """
        if stats is not None:
            pulumi.set(__self__, "stats", stats)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def stats(self) -> Optional['outputs.DomainanalyticsQueriesItemPropertiesStatsProperties']:
        """
        Some statistics for these analytics
        """
        return pulumi.get(self, "stats")

    @property
    @pulumi.getter
    def type(self) -> Optional['DomainanalyticsQueriesItemPropertiesType']:
        """
        The type of query the analytics are for
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.DomainanalyticsQueriesItemPropertiesValuesItemProperties']]:
        """
        Query counts for all dates within the requested range
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class DomainanalyticsQueriesItemPropertiesStatsProperties(dict):
    """
    Some statistics for these analytics
    """
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 max: Optional[int] = None,
                 mean: Optional[float] = None,
                 min: Optional[int] = None,
                 sum: Optional[int] = None):
        """
        Some statistics for these analytics
        :param int count: The number of time periods
        :param int max: The maximum number of queries for one time period
        :param float mean: The mean average number of queries per time period
        :param int min: The minimum number of queries for one time period
        :param int sum: The sum of queries for this date range
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if mean is not None:
            pulumi.set(__self__, "mean", mean)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if sum is not None:
            pulumi.set(__self__, "sum", sum)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        The number of time periods
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        """
        The maximum number of queries for one time period
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def mean(self) -> Optional[float]:
        """
        The mean average number of queries per time period
        """
        return pulumi.get(self, "mean")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        """
        The minimum number of queries for one time period
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def sum(self) -> Optional[int]:
        """
        The sum of queries for this date range
        """
        return pulumi.get(self, "sum")


@pulumi.output_type
class DomainanalyticsQueriesItemPropertiesValuesItemProperties(dict):
    """
    Query count for a particular date
    """
    def __init__(__self__, *,
                 date: Optional[str] = None,
                 value: Optional[int] = None):
        """
        Query count for a particular date
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainanalyticsStatsProperties(dict):
    """
    Some statistics for these analytics
    """
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 max: Optional[int] = None,
                 mean: Optional[float] = None,
                 min: Optional[int] = None,
                 sum: Optional[int] = None):
        """
        Some statistics for these analytics
        :param int count: The number of time periods
        :param int max: The maximum number of queries for one time period
        :param float mean: The mean average number of queries per time period
        :param int min: The minimum number of queries for one time period
        :param int sum: The sum of queries for this date range
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if mean is not None:
            pulumi.set(__self__, "mean", mean)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if sum is not None:
            pulumi.set(__self__, "sum", sum)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        The number of time periods
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        """
        The maximum number of queries for one time period
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def mean(self) -> Optional[float]:
        """
        The mean average number of queries per time period
        """
        return pulumi.get(self, "mean")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        """
        The minimum number of queries for one time period
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def sum(self) -> Optional[int]:
        """
        The sum of queries for this date range
        """
        return pulumi.get(self, "sum")


@pulumi.output_type
class Domainhistory(dict):
    def __init__(__self__, *,
                 domain: Optional['outputs.SimpleDomain'] = None,
                 name: Optional[str] = None,
                 updated_at: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str name: The name of the domain
        :param int version: The version of the domain resource
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def domain(self) -> Optional['outputs.SimpleDomain']:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the domain
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version of the domain resource
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class Domainsnapshot(dict):
    def __init__(__self__, *,
                 domain: Optional['outputs.SimpleDomain'] = None,
                 name: Optional[str] = None,
                 updated_at: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str name: The name of the domain
        :param int version: The version of the domain resource
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def domain(self) -> Optional['outputs.SimpleDomain']:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the domain
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version of the domain resource
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetAAAAPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 failover: Optional['outputs.GetAAAAPropertiesLastValuesPropertiesFailoverProperties'] = None,
                 pools: Optional[Sequence['outputs.SimplePool']] = None,
                 round_robin_failover: Optional[Sequence['outputs.GetAAAAPropertiesLastValuesPropertiesRoundRobinFailoverItem']] = None,
                 standard: Optional[Sequence['outputs.GetAAAAPropertiesLastValuesPropertiesStandardItemProperties']] = None):
        """
        The previous values of the record in the different modes
        :param 'GetAAAAPropertiesLastValuesPropertiesFailoverProperties' failover: The previous values in failover mode
        :param Sequence['SimplePool'] pools: The previous values in Pools mode
        :param Sequence['GetAAAAPropertiesLastValuesPropertiesRoundRobinFailoverItem'] round_robin_failover: The previous values in Round-Robin Failover mode
        :param Sequence['GetAAAAPropertiesLastValuesPropertiesStandardItemProperties'] standard: The previous values in standard mode
        """
        if failover is not None:
            pulumi.set(__self__, "failover", failover)
        if pools is not None:
            pulumi.set(__self__, "pools", pools)
        if round_robin_failover is not None:
            pulumi.set(__self__, "round_robin_failover", round_robin_failover)
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def failover(self) -> Optional['outputs.GetAAAAPropertiesLastValuesPropertiesFailoverProperties']:
        """
        The previous values in failover mode
        """
        return pulumi.get(self, "failover")

    @property
    @pulumi.getter
    def pools(self) -> Optional[Sequence['outputs.SimplePool']]:
        """
        The previous values in Pools mode
        """
        return pulumi.get(self, "pools")

    @property
    @pulumi.getter(name="roundRobinFailover")
    def round_robin_failover(self) -> Optional[Sequence['outputs.GetAAAAPropertiesLastValuesPropertiesRoundRobinFailoverItem']]:
        """
        The previous values in Round-Robin Failover mode
        """
        return pulumi.get(self, "round_robin_failover")

    @property
    @pulumi.getter
    def standard(self) -> Optional[Sequence['outputs.GetAAAAPropertiesLastValuesPropertiesStandardItemProperties']]:
        """
        The previous values in standard mode
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetAAAAPropertiesLastValuesPropertiesFailoverProperties(dict):
    """
    The previous values in failover mode
    """
    def __init__(__self__, *,
                 mode: Optional['GetAAAAPropertiesLastValuesPropertiesFailoverPropertiesMode'] = None,
                 values: Optional[Sequence['outputs.GetAAAAPropertiesLastValuesPropertiesFailoverPropertiesValuesItem']] = None):
        """
        The previous values in failover mode
        :param 'GetAAAAPropertiesLastValuesPropertiesFailoverPropertiesMode' mode: The failover mode
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def mode(self) -> Optional['GetAAAAPropertiesLastValuesPropertiesFailoverPropertiesMode']:
        """
        The failover mode
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetAAAAPropertiesLastValuesPropertiesFailoverPropertiesValuesItem']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAAAAPropertiesLastValuesPropertiesFailoverPropertiesValuesItem(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 failed: Optional[bool] = None,
                 order: Optional[int] = None,
                 sonar_check_id: Optional[int] = None,
                 status: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool active: Whether this entry is considered active or not
        :param bool enabled: Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        :param bool failed: Does sonar consider this entry to be failed
        :param int order: The sort order of the entry. Lower order entries are preferred over higher order entries
        :param int sonar_check_id: The ID in Sonar to use for checking if the record should be used
        :param str status: The status of the value in Sonar
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether this entry is considered active or not
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        """
        Does sonar consider this entry to be failed
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The sort order of the entry. Lower order entries are preferred over higher order entries
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID in Sonar to use for checking if the record should be used
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the value in Sonar
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAAAAPropertiesLastValuesPropertiesRoundRobinFailoverItem(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 failed: Optional[bool] = None,
                 order: Optional[int] = None,
                 sonar_check_id: Optional[int] = None,
                 status: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool active: Whether this entry is considered active or not
        :param bool enabled: Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        :param bool failed: Does sonar consider this entry to be failed
        :param int order: The sort order of the entry. Lower order entries are preferred over higher order entries
        :param int sonar_check_id: The ID in Sonar to use for checking if the record should be used
        :param str status: The status of the value in Sonar
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether this entry is considered active or not
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        """
        Does sonar consider this entry to be failed
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The sort order of the entry. Lower order entries are preferred over higher order entries
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID in Sonar to use for checking if the record should be used
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the value in Sonar
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAAAAPropertiesLastValuesPropertiesStandardItemProperties(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetANAMEPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 failover: Optional['outputs.GetANAMEPropertiesLastValuesPropertiesFailoverProperties'] = None,
                 pools: Optional[Sequence['outputs.SimplePool']] = None,
                 standard: Optional[Sequence['outputs.GetANAMEPropertiesLastValuesPropertiesStandardItemProperties']] = None):
        """
        The previous values of the record in the different modes
        :param 'GetANAMEPropertiesLastValuesPropertiesFailoverProperties' failover: The previous values in failover mode
        :param Sequence['SimplePool'] pools: The previous values in Pools mode
        :param Sequence['GetANAMEPropertiesLastValuesPropertiesStandardItemProperties'] standard: The previous values in standard mode
        """
        if failover is not None:
            pulumi.set(__self__, "failover", failover)
        if pools is not None:
            pulumi.set(__self__, "pools", pools)
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def failover(self) -> Optional['outputs.GetANAMEPropertiesLastValuesPropertiesFailoverProperties']:
        """
        The previous values in failover mode
        """
        return pulumi.get(self, "failover")

    @property
    @pulumi.getter
    def pools(self) -> Optional[Sequence['outputs.SimplePool']]:
        """
        The previous values in Pools mode
        """
        return pulumi.get(self, "pools")

    @property
    @pulumi.getter
    def standard(self) -> Optional[Sequence['outputs.GetANAMEPropertiesLastValuesPropertiesStandardItemProperties']]:
        """
        The previous values in standard mode
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetANAMEPropertiesLastValuesPropertiesFailoverProperties(dict):
    """
    The previous values in failover mode
    """
    def __init__(__self__, *,
                 mode: Optional['GetANAMEPropertiesLastValuesPropertiesFailoverPropertiesMode'] = None,
                 values: Optional[Sequence['outputs.GetANAMEPropertiesLastValuesPropertiesFailoverPropertiesValuesItem']] = None):
        """
        The previous values in failover mode
        :param 'GetANAMEPropertiesLastValuesPropertiesFailoverPropertiesMode' mode: The failover mode
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def mode(self) -> Optional['GetANAMEPropertiesLastValuesPropertiesFailoverPropertiesMode']:
        """
        The failover mode
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetANAMEPropertiesLastValuesPropertiesFailoverPropertiesValuesItem']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetANAMEPropertiesLastValuesPropertiesFailoverPropertiesValuesItem(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 failed: Optional[bool] = None,
                 order: Optional[int] = None,
                 sonar_check_id: Optional[int] = None,
                 status: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool active: Whether this entry is considered active or not
        :param bool enabled: Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        :param bool failed: Does sonar consider this entry to be failed
        :param int order: The sort order of the entry. Lower order entries are preferred over higher order entries
        :param int sonar_check_id: The ID in Sonar to use for checking if the record should be used
        :param str status: The status of the value in Sonar
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether this entry is considered active or not
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        """
        Does sonar consider this entry to be failed
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The sort order of the entry. Lower order entries are preferred over higher order entries
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID in Sonar to use for checking if the record should be used
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the value in Sonar
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetANAMEPropertiesLastValuesPropertiesStandardItemProperties(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 failover: Optional['outputs.GetAPropertiesLastValuesPropertiesFailoverProperties'] = None,
                 pools: Optional[Sequence['outputs.SimplePool']] = None,
                 round_robin_failover: Optional[Sequence['outputs.GetAPropertiesLastValuesPropertiesRoundRobinFailoverItem']] = None,
                 standard: Optional[Sequence['outputs.GetAPropertiesLastValuesPropertiesStandardItemProperties']] = None):
        """
        The previous values of the record in the different modes
        :param 'GetAPropertiesLastValuesPropertiesFailoverProperties' failover: The previous values in failover mode
        :param Sequence['SimplePool'] pools: The previous values in Pools mode
        :param Sequence['GetAPropertiesLastValuesPropertiesRoundRobinFailoverItem'] round_robin_failover: The previous values in Round-Robin Failover mode
        :param Sequence['GetAPropertiesLastValuesPropertiesStandardItemProperties'] standard: The previous values in standard mode
        """
        if failover is not None:
            pulumi.set(__self__, "failover", failover)
        if pools is not None:
            pulumi.set(__self__, "pools", pools)
        if round_robin_failover is not None:
            pulumi.set(__self__, "round_robin_failover", round_robin_failover)
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def failover(self) -> Optional['outputs.GetAPropertiesLastValuesPropertiesFailoverProperties']:
        """
        The previous values in failover mode
        """
        return pulumi.get(self, "failover")

    @property
    @pulumi.getter
    def pools(self) -> Optional[Sequence['outputs.SimplePool']]:
        """
        The previous values in Pools mode
        """
        return pulumi.get(self, "pools")

    @property
    @pulumi.getter(name="roundRobinFailover")
    def round_robin_failover(self) -> Optional[Sequence['outputs.GetAPropertiesLastValuesPropertiesRoundRobinFailoverItem']]:
        """
        The previous values in Round-Robin Failover mode
        """
        return pulumi.get(self, "round_robin_failover")

    @property
    @pulumi.getter
    def standard(self) -> Optional[Sequence['outputs.GetAPropertiesLastValuesPropertiesStandardItemProperties']]:
        """
        The previous values in standard mode
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetAPropertiesLastValuesPropertiesFailoverProperties(dict):
    """
    The previous values in failover mode
    """
    def __init__(__self__, *,
                 mode: Optional['GetAPropertiesLastValuesPropertiesFailoverPropertiesMode'] = None,
                 values: Optional[Sequence['outputs.GetAPropertiesLastValuesPropertiesFailoverPropertiesValuesItem']] = None):
        """
        The previous values in failover mode
        :param 'GetAPropertiesLastValuesPropertiesFailoverPropertiesMode' mode: The failover mode
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def mode(self) -> Optional['GetAPropertiesLastValuesPropertiesFailoverPropertiesMode']:
        """
        The failover mode
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetAPropertiesLastValuesPropertiesFailoverPropertiesValuesItem']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAPropertiesLastValuesPropertiesFailoverPropertiesValuesItem(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 failed: Optional[bool] = None,
                 order: Optional[int] = None,
                 sonar_check_id: Optional[int] = None,
                 status: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool active: Whether this entry is considered active or not
        :param bool enabled: Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        :param bool failed: Does sonar consider this entry to be failed
        :param int order: The sort order of the entry. Lower order entries are preferred over higher order entries
        :param int sonar_check_id: The ID in Sonar to use for checking if the record should be used
        :param str status: The status of the value in Sonar
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether this entry is considered active or not
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        """
        Does sonar consider this entry to be failed
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The sort order of the entry. Lower order entries are preferred over higher order entries
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID in Sonar to use for checking if the record should be used
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the value in Sonar
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAPropertiesLastValuesPropertiesRoundRobinFailoverItem(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 failed: Optional[bool] = None,
                 order: Optional[int] = None,
                 sonar_check_id: Optional[int] = None,
                 status: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool active: Whether this entry is considered active or not
        :param bool enabled: Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        :param bool failed: Does sonar consider this entry to be failed
        :param int order: The sort order of the entry. Lower order entries are preferred over higher order entries
        :param int sonar_check_id: The ID in Sonar to use for checking if the record should be used
        :param str status: The status of the value in Sonar
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether this entry is considered active or not
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        """
        Does sonar consider this entry to be failed
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The sort order of the entry. Lower order entries are preferred over higher order entries
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID in Sonar to use for checking if the record should be used
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the value in Sonar
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAPropertiesLastValuesPropertiesStandardItemProperties(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCAAPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 standard: Optional[Sequence['outputs.Items']] = None):
        """
        The previous values of the record in the different modes
        :param Sequence['Items'] standard: The previous values in standard mode
        """
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def standard(self) -> Optional[Sequence['outputs.Items']]:
        """
        The previous values in standard mode
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetCERTPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 standard: Optional[Sequence['outputs.ValueItems']] = None):
        """
        The previous values of the record in the different modes
        :param Sequence['ValueItems'] standard: The previous values in standard mode
        """
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def standard(self) -> Optional[Sequence['outputs.ValueItems']]:
        """
        The previous values in standard mode
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetCNAMEPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 failover: Optional['outputs.GetCNAMEPropertiesLastValuesPropertiesFailoverProperties'] = None,
                 pools: Optional[Sequence['outputs.SimplePool']] = None,
                 standard: Optional[Sequence['outputs.GetCNAMEPropertiesLastValuesPropertiesStandardItemProperties']] = None):
        """
        The previous values of the record in the different modes
        :param 'GetCNAMEPropertiesLastValuesPropertiesFailoverProperties' failover: The previous values in failover mode
        :param Sequence['SimplePool'] pools: The previous values in Pools mode
        :param Sequence['GetCNAMEPropertiesLastValuesPropertiesStandardItemProperties'] standard: The previous values in standard mode
        """
        if failover is not None:
            pulumi.set(__self__, "failover", failover)
        if pools is not None:
            pulumi.set(__self__, "pools", pools)
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def failover(self) -> Optional['outputs.GetCNAMEPropertiesLastValuesPropertiesFailoverProperties']:
        """
        The previous values in failover mode
        """
        return pulumi.get(self, "failover")

    @property
    @pulumi.getter
    def pools(self) -> Optional[Sequence['outputs.SimplePool']]:
        """
        The previous values in Pools mode
        """
        return pulumi.get(self, "pools")

    @property
    @pulumi.getter
    def standard(self) -> Optional[Sequence['outputs.GetCNAMEPropertiesLastValuesPropertiesStandardItemProperties']]:
        """
        The previous values in standard mode
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetCNAMEPropertiesLastValuesPropertiesFailoverProperties(dict):
    """
    The previous values in failover mode
    """
    def __init__(__self__, *,
                 mode: Optional['GetCNAMEPropertiesLastValuesPropertiesFailoverPropertiesMode'] = None,
                 values: Optional[Sequence['outputs.GetCNAMEPropertiesLastValuesPropertiesFailoverPropertiesValuesItem']] = None):
        """
        The previous values in failover mode
        :param 'GetCNAMEPropertiesLastValuesPropertiesFailoverPropertiesMode' mode: The failover mode
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def mode(self) -> Optional['GetCNAMEPropertiesLastValuesPropertiesFailoverPropertiesMode']:
        """
        The failover mode
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetCNAMEPropertiesLastValuesPropertiesFailoverPropertiesValuesItem']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCNAMEPropertiesLastValuesPropertiesFailoverPropertiesValuesItem(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 failed: Optional[bool] = None,
                 order: Optional[int] = None,
                 sonar_check_id: Optional[int] = None,
                 status: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool active: Whether this entry is considered active or not
        :param bool enabled: Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        :param bool failed: Does sonar consider this entry to be failed
        :param int order: The sort order of the entry. Lower order entries are preferred over higher order entries
        :param int sonar_check_id: The ID in Sonar to use for checking if the record should be used
        :param str status: The status of the value in Sonar
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether this entry is considered active or not
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        """
        Does sonar consider this entry to be failed
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The sort order of the entry. Lower order entries are preferred over higher order entries
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID in Sonar to use for checking if the record should be used
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the value in Sonar
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCNAMEPropertiesLastValuesPropertiesStandardItemProperties(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainNameserverPropertiesDataProperties(dict):
    def __init__(__self__, *,
                 domain: Optional['outputs.SimpleDomain'] = None,
                 links: Optional['outputs.GetDomainNameserverPropertiesDataPropertiesLinksProperties'] = None,
                 nameservers: Optional[Sequence[str]] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)

    @property
    @pulumi.getter
    def domain(self) -> Optional['outputs.SimpleDomain']:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.GetDomainNameserverPropertiesDataPropertiesLinksProperties']:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nameservers")


@pulumi.output_type
class GetDomainNameserverPropertiesDataPropertiesLinksProperties(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 self: Optional[str] = None):
        """
        :param str domain: The URL for the domain
        :param str self: The URL for these nameservers
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        The URL for the domain
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        """
        The URL for these nameservers
        """
        return pulumi.get(self, "self")


@pulumi.output_type
class GetHINFOPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 standard: Optional[Sequence['outputs.PropertiesValueItems']] = None):
        """
        The previous values of the record in the different modes
        :param Sequence['PropertiesValueItems'] standard: The previous values in standard mode
        """
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def standard(self) -> Optional[Sequence['outputs.PropertiesValueItems']]:
        """
        The previous values in standard mode
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetHttpPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 standard: Optional['outputs.Value'] = None):
        """
        The previous values of the record in the different modes
        """
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def standard(self) -> Optional['outputs.Value']:
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetMXPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 standard: Optional[Sequence['outputs.ValueMxPropertiesValueItems']] = None):
        """
        The previous values of the record in the different modes
        :param Sequence['ValueMxPropertiesValueItems'] standard: The previous values in standard mode
        """
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def standard(self) -> Optional[Sequence['outputs.ValueMxPropertiesValueItems']]:
        """
        The previous values in standard mode
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetNAPTRPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 standard: Optional[Sequence['outputs.ValueNaptrPropertiesValueItems']] = None):
        """
        The previous values of the record in the different modes
        :param Sequence['ValueNaptrPropertiesValueItems'] standard: The previous values in standard mode
        """
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def standard(self) -> Optional[Sequence['outputs.ValueNaptrPropertiesValueItems']]:
        """
        The previous values in standard mode
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetNSPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 standard: Optional[Sequence['outputs.ValueNsPropertiesValueItems']] = None):
        """
        The previous values of the record in the different modes
        :param Sequence['ValueNsPropertiesValueItems'] standard: The previous values in standard mode
        """
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def standard(self) -> Optional[Sequence['outputs.ValueNsPropertiesValueItems']]:
        """
        The previous values in standard mode
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetPTRPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 standard: Optional[Sequence['outputs.ValuePtrPropertiesValueItems']] = None):
        """
        The previous values of the record in the different modes
        :param Sequence['ValuePtrPropertiesValueItems'] standard: The previous values in standard mode
        """
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def standard(self) -> Optional[Sequence['outputs.ValuePtrPropertiesValueItems']]:
        """
        The previous values in standard mode
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetRPPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 standard: Optional[Sequence['outputs.ValueRpPropertiesValueItems']] = None):
        """
        The previous values of the record in the different modes
        :param Sequence['ValueRpPropertiesValueItems'] standard: The previous values in standard mode
        """
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def standard(self) -> Optional[Sequence['outputs.ValueRpPropertiesValueItems']]:
        """
        The previous values in standard mode
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetSPFPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 standard: Optional[Sequence['outputs.ValueSpfPropertiesValueItems']] = None):
        """
        The previous values of the record in the different modes
        :param Sequence['ValueSpfPropertiesValueItems'] standard: The previous values in standard mode
        """
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def standard(self) -> Optional[Sequence['outputs.ValueSpfPropertiesValueItems']]:
        """
        The previous values in standard mode
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetSRVPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 standard: Optional[Sequence['outputs.ValueSrvPropertiesValueItems']] = None):
        """
        The previous values of the record in the different modes
        :param Sequence['ValueSrvPropertiesValueItems'] standard: The previous values in standard mode
        """
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def standard(self) -> Optional[Sequence['outputs.ValueSrvPropertiesValueItems']]:
        """
        The previous values in standard mode
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetTXTPropertiesLastValuesProperties(dict):
    """
    The previous values of the record in the different modes
    """
    def __init__(__self__, *,
                 standard: Optional[Sequence['outputs.ValueTxtPropertiesValueItems']] = None):
        """
        The previous values of the record in the different modes
        :param Sequence['ValueTxtPropertiesValueItems'] standard: The previous values in standard mode
        """
        if standard is not None:
            pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def standard(self) -> Optional[Sequence['outputs.ValueTxtPropertiesValueItems']]:
        """
        The previous values in standard mode
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class Items(dict):
    def __init__(__self__, *,
                 data: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 flags: Optional[int] = None,
                 tag: Optional['ItemsTag'] = None):
        """
        :param str data: The value for this tag
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param int flags: A flag byte for any flags on the record.
        :param 'ItemsTag' tag: Foo
        """
        if data is not None:
            pulumi.set(__self__, "data", data)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        """
        The value for this tag
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        """
        A flag byte for any flags on the record.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def tag(self) -> Optional['ItemsTag']:
        """
        Foo
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class ListDomainHistoryPropertiesDataItem(dict):
    def __init__(__self__, *,
                 domain: Optional['outputs.SimpleDomain'] = None,
                 name: Optional[str] = None,
                 updated_at: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str name: The name of the domain
        :param int version: The version of the domain resource
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def domain(self) -> Optional['outputs.SimpleDomain']:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the domain
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version of the domain resource
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ListDomainRecordsPropertiesDataItem(dict):
    def __init__(__self__, *,
                 domain: Optional['outputs.SimpleDomain'] = None,
                 links: Optional['outputs.ListDomainRecordsPropertiesDataItemPropertiesLinksProperties'] = None):
        """
        :param 'ListDomainRecordsPropertiesDataItemPropertiesLinksProperties' links: Links for the domain record
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def domain(self) -> Optional['outputs.SimpleDomain']:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.ListDomainRecordsPropertiesDataItemPropertiesLinksProperties']:
        """
        Links for the domain record
        """
        return pulumi.get(self, "links")


@pulumi.output_type
class ListDomainRecordsPropertiesDataItemPropertiesLinksProperties(dict):
    """
    Links for the domain record
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for the domain record
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class ListDomainSnapshotsPropertiesDataItem(dict):
    def __init__(__self__, *,
                 domain: Optional['outputs.SimpleDomain'] = None,
                 name: Optional[str] = None,
                 updated_at: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str name: The name of the domain
        :param int version: The version of the domain resource
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def domain(self) -> Optional['outputs.SimpleDomain']:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the domain
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version of the domain resource
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ListMetadata(dict):
    """
    Metadata for list responses
    """
    def __init__(__self__, *,
                 links: Optional['outputs.ListMetadataLinksProperties'] = None,
                 pagination: Optional['outputs.ListMetadataPaginationProperties'] = None):
        """
        Metadata for list responses
        :param 'ListMetadataLinksProperties' links: Relevant links for this list
        :param 'ListMetadataPaginationProperties' pagination: Pagination details
        """
        if links is not None:
            pulumi.set(__self__, "links", links)
        if pagination is not None:
            pulumi.set(__self__, "pagination", pagination)

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.ListMetadataLinksProperties']:
        """
        Relevant links for this list
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def pagination(self) -> Optional['outputs.ListMetadataPaginationProperties']:
        """
        Pagination details
        """
        return pulumi.get(self, "pagination")


@pulumi.output_type
class ListMetadataLinksProperties(dict):
    """
    Relevant links for this list
    """
    def __init__(__self__, *,
                 first: Optional[str] = None,
                 last: Optional[str] = None,
                 next: Optional[str] = None,
                 previous: Optional[str] = None,
                 self: Optional[str] = None):
        """
        Relevant links for this list
        """
        if first is not None:
            pulumi.set(__self__, "first", first)
        if last is not None:
            pulumi.set(__self__, "last", last)
        if next is not None:
            pulumi.set(__self__, "next", next)
        if previous is not None:
            pulumi.set(__self__, "previous", previous)
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def first(self) -> Optional[str]:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def last(self) -> Optional[str]:
        return pulumi.get(self, "last")

    @property
    @pulumi.getter
    def next(self) -> Optional[str]:
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def previous(self) -> Optional[str]:
        return pulumi.get(self, "previous")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class ListMetadataPaginationProperties(dict):
    """
    Pagination details
    """
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 current_page: Optional[int] = None,
                 per_page: Optional[int] = None,
                 total: Optional[int] = None,
                 total_pages: Optional[int] = None):
        """
        Pagination details
        :param int count: The number of items in this page of the response
        :param int current_page: The current results page
        :param int per_page: The number of items per page
        :param int total: The total number of objects matching the query
        :param int total_pages: The total number of pages
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if current_page is not None:
            pulumi.set(__self__, "current_page", current_page)
        if per_page is not None:
            pulumi.set(__self__, "per_page", per_page)
        if total is not None:
            pulumi.set(__self__, "total", total)
        if total_pages is not None:
            pulumi.set(__self__, "total_pages", total_pages)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        The number of items in this page of the response
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="currentPage")
    def current_page(self) -> Optional[int]:
        """
        The current results page
        """
        return pulumi.get(self, "current_page")

    @property
    @pulumi.getter(name="perPage")
    def per_page(self) -> Optional[int]:
        """
        The number of items per page
        """
        return pulumi.get(self, "per_page")

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        """
        The total number of objects matching the query
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter(name="totalPages")
    def total_pages(self) -> Optional[int]:
        """
        The total number of pages
        """
        return pulumi.get(self, "total_pages")


@pulumi.output_type
class PropertiesValueItems(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 os: Optional[str] = None):
        """
        :param str cpu: Text representing the CPU
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str os: Text representing the OS
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        """
        Text representing the CPU
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def os(self) -> Optional[str]:
        """
        Text representing the OS
        """
        return pulumi.get(self, "os")


@pulumi.output_type
class SimpleContactlist(dict):
    """
    A simple version of a contact list when inclued with other resources
    """
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.SimpleContactlistLinksProperties'] = None):
        """
        A simple version of a contact list when inclued with other resources
        :param int id: Unique ID for the contact list
        :param 'SimpleContactlistLinksProperties' links: Links for domain objects
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique ID for the contact list
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.SimpleContactlistLinksProperties']:
        """
        Links for domain objects
        """
        return pulumi.get(self, "links")


@pulumi.output_type
class SimpleContactlistLinksProperties(dict):
    """
    Links for domain objects
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for domain objects
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class SimpleDomain(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 geoip: Optional[bool] = None,
                 gtd: Optional[bool] = None,
                 id: Optional[int] = None,
                 links: Optional['outputs.SimpleDomainLinksProperties'] = None,
                 name: Optional[str] = None,
                 note: Optional[str] = None,
                 status: Optional['SimpleDomainStatus'] = None,
                 tags: Optional[Sequence['outputs.Tag']] = None,
                 updated_at: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param bool enabled: Is the domain enabled
        :param bool geoip: Is GeoIP functionality enabled for the domain
        :param bool gtd: Is Global Traffic Director enabled for the domain
        :param int id: A unique numeric ID for this domain
        :param 'SimpleDomainLinksProperties' links: Links for domain objects
        :param str name: The name of the domain
        :param str note: A note for the domain
        :param Sequence['Tag'] tags: An array of tags for this domain.
        :param int version: The version of the domain resource
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if geoip is not None:
            pulumi.set(__self__, "geoip", geoip)
        if gtd is not None:
            pulumi.set(__self__, "gtd", gtd)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is the domain enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def geoip(self) -> Optional[bool]:
        """
        Is GeoIP functionality enabled for the domain
        """
        return pulumi.get(self, "geoip")

    @property
    @pulumi.getter
    def gtd(self) -> Optional[bool]:
        """
        Is Global Traffic Director enabled for the domain
        """
        return pulumi.get(self, "gtd")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        A unique numeric ID for this domain
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.SimpleDomainLinksProperties']:
        """
        Links for domain objects
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the domain
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def note(self) -> Optional[str]:
        """
        A note for the domain
        """
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def status(self) -> Optional['SimpleDomainStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.Tag']]:
        """
        An array of tags for this domain.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version of the domain resource
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class SimpleDomainLinksProperties(dict):
    """
    Links for domain objects
    """
    def __init__(__self__, *,
                 records: Optional[str] = None,
                 self: Optional[str] = None):
        """
        Links for domain objects
        """
        if records is not None:
            pulumi.set(__self__, "records", records)
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def records(self) -> Optional[str]:
        return pulumi.get(self, "records")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class SimpleGeoproximity(dict):
    """
    Geo Proximity Location
    """
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.SimpleGeoproximityLinksProperties'] = None,
                 name: Optional[str] = None):
        """
        Geo Proximity Location
        :param int id: The unique ID for the Geo Proximity location
        :param 'SimpleGeoproximityLinksProperties' links: Links for domain objects
        :param str name: The name of the Geo Proximity location
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The unique ID for the Geo Proximity location
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.SimpleGeoproximityLinksProperties']:
        """
        Links for domain objects
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the Geo Proximity location
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SimpleGeoproximityLinksProperties(dict):
    """
    Links for domain objects
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for domain objects
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class SimpleIpfilter(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.SimpleIpfilterLinksProperties'] = None,
                 name: Optional[str] = None):
        """
        :param int id: The unique ID for this IP filter
        :param 'SimpleIpfilterLinksProperties' links: Links for domain objects
        :param str name: The name for this IP filter
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The unique ID for this IP filter
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.SimpleIpfilterLinksProperties']:
        """
        Links for domain objects
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for this IP filter
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SimpleIpfilterLinksProperties(dict):
    """
    Links for domain objects
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for domain objects
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class SimplePool(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.SimplePoolLinksProperties'] = None):
        """
        :param 'SimplePoolLinksProperties' links: Links for the pool
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.SimplePoolLinksProperties']:
        """
        Links for the pool
        """
        return pulumi.get(self, "links")


@pulumi.output_type
class SimplePoolLinksProperties(dict):
    """
    Links for the pool
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for the pool
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class SimpleTemplate(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.SimpleTemplateLinksProperties'] = None,
                 name: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param int id: The unique ID for this template
        :param 'SimpleTemplateLinksProperties' links: Links for the template
        :param str name: The name for the template
        :param int version: The version of the template resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The unique ID for this template
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.SimpleTemplateLinksProperties']:
        """
        Links for the template
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the template
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version of the template resource
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class SimpleTemplateLinksProperties(dict):
    """
    Links for the template
    """
    def __init__(__self__, *,
                 records: Optional[str] = None,
                 self: Optional[str] = None):
        """
        Links for the template
        """
        if records is not None:
            pulumi.set(__self__, "records", records)
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def records(self) -> Optional[str]:
        return pulumi.get(self, "records")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class SimpleVanitynameserver(dict):
    """
    A simplied version of a rebranded nameserver using your own domain name.
    """
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.SimpleVanitynameserverLinksProperties'] = None):
        """
        A simplied version of a rebranded nameserver using your own domain name.
        :param int id: A unique ID for the vanity nameserver
        :param 'SimpleVanitynameserverLinksProperties' links: Links relevant to this object
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        A unique ID for the vanity nameserver
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.SimpleVanitynameserverLinksProperties']:
        """
        Links relevant to this object
        """
        return pulumi.get(self, "links")


@pulumi.output_type
class SimpleVanitynameserverLinksProperties(dict):
    """
    Links relevant to this object
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links relevant to this object
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class Soa(dict):
    """
    SOA (Start of Authority) Record
    """
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 expire: Optional[int] = None,
                 negative_cache: Optional[int] = None,
                 primary_nameserver: Optional[str] = None,
                 refresh: Optional[int] = None,
                 retry: Optional[int] = None,
                 serial: Optional[int] = None,
                 ttl: Optional[int] = None):
        """
        SOA (Start of Authority) Record
        :param str email: Email of the administrator for the domain. @ should be replaced with .
        :param int expire: Number of seconds after which secondary nameservers should stop responding to queries, if the master does not respond
        :param int negative_cache: How long NXDOMAIN responses should be cached for
        :param str primary_nameserver: Primary master nameserver for the domain
        :param int refresh: The interval for secondary nameservers should query for the SOA record
        :param int retry: The number of seconds after which secondary servers should retry to request the serial number if the master does not respond
        :param int serial: A serial number for this version of the records for this domain
        :param int ttl: The Time To Live (TTL) in seconds for the SOA record
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expire is not None:
            pulumi.set(__self__, "expire", expire)
        if negative_cache is not None:
            pulumi.set(__self__, "negative_cache", negative_cache)
        if primary_nameserver is not None:
            pulumi.set(__self__, "primary_nameserver", primary_nameserver)
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email of the administrator for the domain. @ should be replaced with .
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def expire(self) -> Optional[int]:
        """
        Number of seconds after which secondary nameservers should stop responding to queries, if the master does not respond
        """
        return pulumi.get(self, "expire")

    @property
    @pulumi.getter(name="negativeCache")
    def negative_cache(self) -> Optional[int]:
        """
        How long NXDOMAIN responses should be cached for
        """
        return pulumi.get(self, "negative_cache")

    @property
    @pulumi.getter(name="primaryNameserver")
    def primary_nameserver(self) -> Optional[str]:
        """
        Primary master nameserver for the domain
        """
        return pulumi.get(self, "primary_nameserver")

    @property
    @pulumi.getter
    def refresh(self) -> Optional[int]:
        """
        The interval for secondary nameservers should query for the SOA record
        """
        return pulumi.get(self, "refresh")

    @property
    @pulumi.getter
    def retry(self) -> Optional[int]:
        """
        The number of seconds after which secondary servers should retry to request the serial number if the master does not respond
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter
    def serial(self) -> Optional[int]:
        """
        A serial number for this version of the records for this domain
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        """
        The Time To Live (TTL) in seconds for the SOA record
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class SoaProperties(dict):
    """
    The SOA details for the domain
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "negativeCache":
            suggest = "negative_cache"
        elif key == "primaryNameserver":
            suggest = "primary_nameserver"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoaProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoaProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoaProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: Optional[str] = None,
                 expire: Optional[int] = None,
                 negative_cache: Optional[int] = None,
                 primary_nameserver: Optional[str] = None,
                 refresh: Optional[int] = None,
                 retry: Optional[int] = None,
                 ttl: Optional[int] = None):
        """
        The SOA details for the domain
        :param str email: Email of the administrator for the domain. @ should be replaced with .
        :param int expire: Number of seconds after which secondary nameservers should stop responding to queries, if the master does not respond
        :param int negative_cache: How long NXDOMAIN responses should be cached for
        :param str primary_nameserver: Primary master nameserver for the domain
        :param int refresh: The interval for secondary nameservers should query for the SOA record
        :param int retry: The number of seconds after which secondary servers should retry to request the serial number if the master does not respond
        :param int ttl: The Time To Live (TTL) in seconds for the SOA record
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expire is not None:
            pulumi.set(__self__, "expire", expire)
        if negative_cache is not None:
            pulumi.set(__self__, "negative_cache", negative_cache)
        if primary_nameserver is not None:
            pulumi.set(__self__, "primary_nameserver", primary_nameserver)
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email of the administrator for the domain. @ should be replaced with .
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def expire(self) -> Optional[int]:
        """
        Number of seconds after which secondary nameservers should stop responding to queries, if the master does not respond
        """
        return pulumi.get(self, "expire")

    @property
    @pulumi.getter(name="negativeCache")
    def negative_cache(self) -> Optional[int]:
        """
        How long NXDOMAIN responses should be cached for
        """
        return pulumi.get(self, "negative_cache")

    @property
    @pulumi.getter(name="primaryNameserver")
    def primary_nameserver(self) -> Optional[str]:
        """
        Primary master nameserver for the domain
        """
        return pulumi.get(self, "primary_nameserver")

    @property
    @pulumi.getter
    def refresh(self) -> Optional[int]:
        """
        The interval for secondary nameservers should query for the SOA record
        """
        return pulumi.get(self, "refresh")

    @property
    @pulumi.getter
    def retry(self) -> Optional[int]:
        """
        The number of seconds after which secondary servers should retry to request the serial number if the master does not respond
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        """
        The Time To Live (TTL) in seconds for the SOA record
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class Tag(dict):
    """
    A tag is used to group resources together
    """
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.TagLinksProperties'] = None,
                 name: Optional[str] = None):
        """
        A tag is used to group resources together
        :param int id: Unique ID for the tag
        :param 'TagLinksProperties' links: Links for tags
        :param str name: A name for this tag
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique ID for the tag
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.TagLinksProperties']:
        """
        Links for tags
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A name for this tag
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TagLinksProperties(dict):
    """
    Links for tags
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for tags
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class TemplaterecordLinksProperties(dict):
    """
    Links for the domain record
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for the domain record
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class Value(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 hard: Optional[bool] = None,
                 keywords: Optional[str] = None,
                 redirect_type: Optional[str] = None,
                 title: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str description: The description to include in meta tags
        :param bool hard: If this is a frame redirect, don't include the URL entered in the browser
        :param str keywords: Meta keywords for the page containing the frame
        :param str redirect_type: The type of redirect, either 301, 302 or frame.
        :param str title: The title of the page containing the redirect frame
        :param str url: The URL to redirect to
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hard is not None:
            pulumi.set(__self__, "hard", hard)
        if keywords is not None:
            pulumi.set(__self__, "keywords", keywords)
        if redirect_type is not None:
            pulumi.set(__self__, "redirect_type", redirect_type)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description to include in meta tags
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hard(self) -> Optional[bool]:
        """
        If this is a frame redirect, don't include the URL entered in the browser
        """
        return pulumi.get(self, "hard")

    @property
    @pulumi.getter
    def keywords(self) -> Optional[str]:
        """
        Meta keywords for the page containing the frame
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter(name="redirectType")
    def redirect_type(self) -> Optional[str]:
        """
        The type of redirect, either 301, 302 or frame.
        """
        return pulumi.get(self, "redirect_type")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the page containing the redirect frame
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The URL to redirect to
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ValueARequestValueItemProperties(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ValueARequestValueProperties(dict):
    """
    Failover record mode
    """
    def __init__(__self__, *,
                 mode: Optional['ValueARequestValuePropertiesMode'] = None,
                 values: Optional[Sequence['outputs.ValueARequestValuePropertiesValuesItemProperties']] = None):
        """
        Failover record mode
        :param 'ValueARequestValuePropertiesMode' mode: The failover mode
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def mode(self) -> Optional['ValueARequestValuePropertiesMode']:
        """
        The failover mode
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.ValueARequestValuePropertiesValuesItemProperties']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ValueARequestValuePropertiesValuesItemProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sonarCheckId":
            suggest = "sonar_check_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ValueARequestValuePropertiesValuesItemProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ValueARequestValuePropertiesValuesItemProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ValueARequestValuePropertiesValuesItemProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 order: Optional[int] = None,
                 sonar_check_id: Optional[int] = None,
                 value: Optional[str] = None):
        """
        :param bool enabled: Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        :param int order: The sort order of the entry. Lower order entries are preferred over higher order entries
        :param int sonar_check_id: The ID in Sonar to use for checking if the record should be used
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The sort order of the entry. Lower order entries are preferred over higher order entries
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID in Sonar to use for checking if the record should be used
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ValueAValue(dict):
    def __init__(__self__, *,
                 mode: Optional['ValueAValuePropertiesMode'] = None,
                 values: Optional[Sequence['outputs.ValueAValuePropertiesValuesItem']] = None):
        """
        :param 'ValueAValuePropertiesMode' mode: The failover mode
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def mode(self) -> Optional['ValueAValuePropertiesMode']:
        """
        The failover mode
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.ValueAValuePropertiesValuesItem']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ValueAValuePropertiesValuesItem(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 failed: Optional[bool] = None,
                 order: Optional[int] = None,
                 sonar_check_id: Optional[int] = None,
                 status: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool active: Whether this entry is considered active or not
        :param bool enabled: Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        :param bool failed: Does sonar consider this entry to be failed
        :param int order: The sort order of the entry. Lower order entries are preferred over higher order entries
        :param int sonar_check_id: The ID in Sonar to use for checking if the record should be used
        :param str status: The status of the value in Sonar
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether this entry is considered active or not
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        """
        Does sonar consider this entry to be failed
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The sort order of the entry. Lower order entries are preferred over higher order entries
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID in Sonar to use for checking if the record should be used
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the value in Sonar
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ValueAaaaRequestValueItemProperties(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ValueAaaaRequestValueProperties(dict):
    """
    Failover record mode
    """
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 mode: Optional['ValueAaaaRequestValuePropertiesMode'] = None,
                 values: Optional[Sequence['outputs.ValueAaaaRequestValuePropertiesValuesItemProperties']] = None):
        """
        Failover record mode
        :param bool enabled: Whether this failover value is enabled or not
        :param 'ValueAaaaRequestValuePropertiesMode' mode: The failover mode
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether this failover value is enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def mode(self) -> Optional['ValueAaaaRequestValuePropertiesMode']:
        """
        The failover mode
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.ValueAaaaRequestValuePropertiesValuesItemProperties']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ValueAaaaRequestValuePropertiesValuesItemProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sonarCheckId":
            suggest = "sonar_check_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ValueAaaaRequestValuePropertiesValuesItemProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ValueAaaaRequestValuePropertiesValuesItemProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ValueAaaaRequestValuePropertiesValuesItemProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 order: Optional[int] = None,
                 sonar_check_id: Optional[int] = None,
                 value: Optional[str] = None):
        """
        :param bool active: Whether this entry is considered active or not
        :param bool enabled: Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        :param int order: The sort order of the entry. Lower order entries are preferred over higher order entries
        :param int sonar_check_id: The ID in Sonar to use for checking if the record should be used
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether this entry is considered active or not
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The sort order of the entry. Lower order entries are preferred over higher order entries
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID in Sonar to use for checking if the record should be used
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ValueAaaaValue(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 mode: Optional['ValueAaaaValuePropertiesMode'] = None,
                 values: Optional[Sequence['outputs.ValueAaaaValuePropertiesValuesItem']] = None):
        """
        :param bool enabled: Whether this failover value is enabled or not
        :param 'ValueAaaaValuePropertiesMode' mode: The failover mode
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether this failover value is enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def mode(self) -> Optional['ValueAaaaValuePropertiesMode']:
        """
        The failover mode
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.ValueAaaaValuePropertiesValuesItem']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ValueAaaaValuePropertiesValuesItem(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 failed: Optional[bool] = None,
                 order: Optional[int] = None,
                 sonar_check_id: Optional[int] = None,
                 status: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool active: Whether this entry is considered active or not
        :param bool enabled: Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        :param bool failed: Does sonar consider this entry to be failed
        :param int order: The sort order of the entry. Lower order entries are preferred over higher order entries
        :param int sonar_check_id: The ID in Sonar to use for checking if the record should be used
        :param str status: The status of the value in Sonar
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether this entry is considered active or not
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        """
        Does sonar consider this entry to be failed
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The sort order of the entry. Lower order entries are preferred over higher order entries
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID in Sonar to use for checking if the record should be used
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the value in Sonar
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ValueAnameRequestValueItemProperties(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ValueAnameRequestValueProperties(dict):
    """
    Failover record mode
    """
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 mode: Optional['ValueAnameRequestValuePropertiesMode'] = None,
                 values: Optional[Sequence['outputs.ValueAnameRequestValuePropertiesValuesItemProperties']] = None):
        """
        Failover record mode
        :param bool enabled: Whether this failover value is enabled or not
        :param 'ValueAnameRequestValuePropertiesMode' mode: The failover mode
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether this failover value is enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def mode(self) -> Optional['ValueAnameRequestValuePropertiesMode']:
        """
        The failover mode
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.ValueAnameRequestValuePropertiesValuesItemProperties']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ValueAnameRequestValuePropertiesValuesItemProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sonarCheckId":
            suggest = "sonar_check_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ValueAnameRequestValuePropertiesValuesItemProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ValueAnameRequestValuePropertiesValuesItemProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ValueAnameRequestValuePropertiesValuesItemProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 order: Optional[int] = None,
                 sonar_check_id: Optional[int] = None,
                 value: Optional[str] = None):
        """
        :param bool active: Whether this entry is considered active or not
        :param bool enabled: Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        :param int order: The sort order of the entry. Lower order entries are preferred over higher order entries
        :param int sonar_check_id: The ID in Sonar to use for checking if the record should be used
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether this entry is considered active or not
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The sort order of the entry. Lower order entries are preferred over higher order entries
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID in Sonar to use for checking if the record should be used
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ValueAnameValueItemProperties(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ValueAnameValueProperties(dict):
    """
    Failover record mode
    """
    def __init__(__self__, *,
                 mode: Optional['ValueAnameValuePropertiesMode'] = None,
                 values: Optional[Sequence['outputs.ValueAnameValuePropertiesValuesItem']] = None):
        """
        Failover record mode
        :param 'ValueAnameValuePropertiesMode' mode: The failover mode
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def mode(self) -> Optional['ValueAnameValuePropertiesMode']:
        """
        The failover mode
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.ValueAnameValuePropertiesValuesItem']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ValueAnameValuePropertiesValuesItem(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 failed: Optional[bool] = None,
                 order: Optional[int] = None,
                 sonar_check_id: Optional[int] = None,
                 status: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool active: Whether this entry is considered active or not
        :param bool enabled: Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        :param bool failed: Does sonar consider this entry to be failed
        :param int order: The sort order of the entry. Lower order entries are preferred over higher order entries
        :param int sonar_check_id: The ID in Sonar to use for checking if the record should be used
        :param str status: The status of the value in Sonar
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether this entry is considered active or not
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        """
        Does sonar consider this entry to be failed
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The sort order of the entry. Lower order entries are preferred over higher order entries
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID in Sonar to use for checking if the record should be used
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the value in Sonar
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ValueCaaValueItemProperties(dict):
    def __init__(__self__, *,
                 data: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 flags: Optional[int] = None,
                 tag: Optional['ValueCaaValueItemPropertiesTag'] = None):
        """
        :param str data: The value for this tag
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param int flags: A flag byte for any flags on the record.
        :param 'ValueCaaValueItemPropertiesTag' tag: Foo
        """
        if data is not None:
            pulumi.set(__self__, "data", data)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        """
        The value for this tag
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        """
        A flag byte for any flags on the record.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def tag(self) -> Optional['ValueCaaValueItemPropertiesTag']:
        """
        Foo
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class ValueCertValueItemProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateType":
            suggest = "certificate_type"
        elif key == "keyTag":
            suggest = "key_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ValueCertValueItemProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ValueCertValueItemProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ValueCertValueItemProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm: Optional[int] = None,
                 certificate: Optional[str] = None,
                 certificate_type: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 key_tag: Optional[int] = None):
        """
        :param int algorithm: An integer representing the algorithm
        :param str certificate: A base 64 encoded string containing the certificate information
        :param int certificate_type: An integer representing the type of certificate
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param int key_tag: An integer representing the key tag
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if certificate_type is not None:
            pulumi.set(__self__, "certificate_type", certificate_type)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if key_tag is not None:
            pulumi.set(__self__, "key_tag", key_tag)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[int]:
        """
        An integer representing the algorithm
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        """
        A base 64 encoded string containing the certificate information
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> Optional[int]:
        """
        An integer representing the type of certificate
        """
        return pulumi.get(self, "certificate_type")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="keyTag")
    def key_tag(self) -> Optional[int]:
        """
        An integer representing the key tag
        """
        return pulumi.get(self, "key_tag")


@pulumi.output_type
class ValueCnameRequestValueItemProperties(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ValueCnameRequestValueProperties(dict):
    """
    Failover record mode
    """
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 mode: Optional['ValueCnameRequestValuePropertiesMode'] = None,
                 values: Optional[Sequence['outputs.ValueCnameRequestValuePropertiesValuesItemProperties']] = None):
        """
        Failover record mode
        :param bool enabled: Whether this failover value is enabled or not
        :param 'ValueCnameRequestValuePropertiesMode' mode: The failover mode
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether this failover value is enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def mode(self) -> Optional['ValueCnameRequestValuePropertiesMode']:
        """
        The failover mode
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.ValueCnameRequestValuePropertiesValuesItemProperties']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ValueCnameRequestValuePropertiesValuesItemProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sonarCheckId":
            suggest = "sonar_check_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ValueCnameRequestValuePropertiesValuesItemProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ValueCnameRequestValuePropertiesValuesItemProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ValueCnameRequestValuePropertiesValuesItemProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 order: Optional[int] = None,
                 sonar_check_id: Optional[int] = None,
                 value: Optional[str] = None):
        """
        :param bool active: Whether this entry is considered active or not
        :param bool enabled: Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        :param int order: The sort order of the entry. Lower order entries are preferred over higher order entries
        :param int sonar_check_id: The ID in Sonar to use for checking if the record should be used
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether this entry is considered active or not
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The sort order of the entry. Lower order entries are preferred over higher order entries
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID in Sonar to use for checking if the record should be used
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ValueCnameValue(dict):
    def __init__(__self__, *,
                 mode: Optional['ValueCnameValuePropertiesMode'] = None,
                 values: Optional[Sequence['outputs.ValueCnameValuePropertiesValuesItem']] = None):
        """
        :param 'ValueCnameValuePropertiesMode' mode: The failover mode
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def mode(self) -> Optional['ValueCnameValuePropertiesMode']:
        """
        The failover mode
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.ValueCnameValuePropertiesValuesItem']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ValueCnameValuePropertiesValuesItem(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 failed: Optional[bool] = None,
                 order: Optional[int] = None,
                 sonar_check_id: Optional[int] = None,
                 status: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool active: Whether this entry is considered active or not
        :param bool enabled: Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        :param bool failed: Does sonar consider this entry to be failed
        :param int order: The sort order of the entry. Lower order entries are preferred over higher order entries
        :param int sonar_check_id: The ID in Sonar to use for checking if the record should be used
        :param str status: The status of the value in Sonar
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether this entry is considered active or not
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the failover entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        """
        Does sonar consider this entry to be failed
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The sort order of the entry. Lower order entries are preferred over higher order entries
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID in Sonar to use for checking if the record should be used
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the value in Sonar
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ValueHinfoValueItemProperties(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 os: Optional[str] = None):
        """
        :param str cpu: Text representing the CPU
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str os: Text representing the OS
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        """
        Text representing the CPU
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def os(self) -> Optional[str]:
        """
        Text representing the OS
        """
        return pulumi.get(self, "os")


@pulumi.output_type
class ValueHttpValueProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redirectType":
            suggest = "redirect_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ValueHttpValueProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ValueHttpValueProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ValueHttpValueProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 hard: Optional[bool] = None,
                 keywords: Optional[str] = None,
                 redirect_type: Optional[str] = None,
                 title: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str description: The description to include in meta tags
        :param bool hard: If this is a frame redirect, don't include the URL entered in the browser
        :param str keywords: Meta keywords for the page containing the frame
        :param str redirect_type: The type of redirect, either 301, 302 or frame.
        :param str title: The title of the page containing the redirect frame
        :param str url: The URL to redirect to
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hard is not None:
            pulumi.set(__self__, "hard", hard)
        if keywords is not None:
            pulumi.set(__self__, "keywords", keywords)
        if redirect_type is not None:
            pulumi.set(__self__, "redirect_type", redirect_type)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description to include in meta tags
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hard(self) -> Optional[bool]:
        """
        If this is a frame redirect, don't include the URL entered in the browser
        """
        return pulumi.get(self, "hard")

    @property
    @pulumi.getter
    def keywords(self) -> Optional[str]:
        """
        Meta keywords for the page containing the frame
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter(name="redirectType")
    def redirect_type(self) -> Optional[str]:
        """
        The type of redirect, either 301, 302 or frame.
        """
        return pulumi.get(self, "redirect_type")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the page containing the redirect frame
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The URL to redirect to
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ValueItems(dict):
    def __init__(__self__, *,
                 algorithm: Optional[int] = None,
                 certificate: Optional[str] = None,
                 certificate_type: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 key_tag: Optional[int] = None):
        """
        :param int algorithm: An integer representing the algorithm
        :param str certificate: A base 64 encoded string containing the certificate information
        :param int certificate_type: An integer representing the type of certificate
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param int key_tag: An integer representing the key tag
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if certificate_type is not None:
            pulumi.set(__self__, "certificate_type", certificate_type)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if key_tag is not None:
            pulumi.set(__self__, "key_tag", key_tag)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[int]:
        """
        An integer representing the algorithm
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        """
        A base 64 encoded string containing the certificate information
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> Optional[int]:
        """
        An integer representing the type of certificate
        """
        return pulumi.get(self, "certificate_type")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="keyTag")
    def key_tag(self) -> Optional[int]:
        """
        An integer representing the key tag
        """
        return pulumi.get(self, "key_tag")


@pulumi.output_type
class ValueMxPropertiesValueItems(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 priority: Optional[int] = None,
                 server: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param int priority: A number representing the priority of the mail server
        :param str server: The hostname of the mail server
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        A number representing the priority of the mail server
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        The hostname of the mail server
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ValueMxValueItemProperties(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 priority: Optional[int] = None,
                 server: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param int priority: A number representing the priority of the mail server
        :param str server: The hostname of the mail server
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        A number representing the priority of the mail server
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        The hostname of the mail server
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ValueNaptrPropertiesValueItems(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 flags: Optional[str] = None,
                 order: Optional[int] = None,
                 preference: Optional[int] = None,
                 regular_expression: Optional[str] = None,
                 replacement: Optional[str] = None,
                 service: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str flags: Any flags for this record
        :param int order: The order of the record
        :param int preference: The preference for the record
        :param str regular_expression: A regular expression to use
        :param str replacement: The replacement for the regular expression
        :param str service: The service the record is used for
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if replacement is not None:
            pulumi.set(__self__, "replacement", replacement)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def flags(self) -> Optional[str]:
        """
        Any flags for this record
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The order of the record
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        """
        The preference for the record
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional[str]:
        """
        A regular expression to use
        """
        return pulumi.get(self, "regular_expression")

    @property
    @pulumi.getter
    def replacement(self) -> Optional[str]:
        """
        The replacement for the regular expression
        """
        return pulumi.get(self, "replacement")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        """
        The service the record is used for
        """
        return pulumi.get(self, "service")


@pulumi.output_type
class ValueNaptrValueItemProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "regularExpression":
            suggest = "regular_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ValueNaptrValueItemProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ValueNaptrValueItemProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ValueNaptrValueItemProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 flags: Optional[str] = None,
                 order: Optional[int] = None,
                 preference: Optional[int] = None,
                 regular_expression: Optional[str] = None,
                 replacement: Optional[str] = None,
                 service: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str flags: Any flags for this record
        :param int order: The order of the record
        :param int preference: The preference for the record
        :param str regular_expression: A regular expression to use
        :param str replacement: The replacement for the regular expression
        :param str service: The service the record is used for
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if replacement is not None:
            pulumi.set(__self__, "replacement", replacement)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def flags(self) -> Optional[str]:
        """
        Any flags for this record
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        The order of the record
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        """
        The preference for the record
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional[str]:
        """
        A regular expression to use
        """
        return pulumi.get(self, "regular_expression")

    @property
    @pulumi.getter
    def replacement(self) -> Optional[str]:
        """
        The replacement for the regular expression
        """
        return pulumi.get(self, "replacement")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        """
        The service the record is used for
        """
        return pulumi.get(self, "service")


@pulumi.output_type
class ValueNsPropertiesValueItems(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 host: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str host: The hostname for the nameserver
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The hostname for the nameserver
        """
        return pulumi.get(self, "host")


@pulumi.output_type
class ValueNsValueItemProperties(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 host: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str host: The hostname for the nameserver
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The hostname for the nameserver
        """
        return pulumi.get(self, "host")


@pulumi.output_type
class ValuePtrPropertiesValueItems(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 system: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str system: The hostname for the IP address
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if system is not None:
            pulumi.set(__self__, "system", system)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def system(self) -> Optional[str]:
        """
        The hostname for the IP address
        """
        return pulumi.get(self, "system")


@pulumi.output_type
class ValuePtrValueItemProperties(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 system: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str system: The hostname for the IP address
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if system is not None:
            pulumi.set(__self__, "system", system)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def system(self) -> Optional[str]:
        """
        The hostname for the IP address
        """
        return pulumi.get(self, "system")


@pulumi.output_type
class ValueRpPropertiesValueItems(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 mailbox: Optional[str] = None,
                 txt: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str mailbox: The email of the person responsible. Replace @ with .
        :param str txt: The name of a TXT record containing more information
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if mailbox is not None:
            pulumi.set(__self__, "mailbox", mailbox)
        if txt is not None:
            pulumi.set(__self__, "txt", txt)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def mailbox(self) -> Optional[str]:
        """
        The email of the person responsible. Replace @ with .
        """
        return pulumi.get(self, "mailbox")

    @property
    @pulumi.getter
    def txt(self) -> Optional[str]:
        """
        The name of a TXT record containing more information
        """
        return pulumi.get(self, "txt")


@pulumi.output_type
class ValueRpValueItemProperties(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 mailbox: Optional[str] = None,
                 txt: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str mailbox: The email of the person responsible. Replace @ with .
        :param str txt: The name of a TXT record containing more information
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if mailbox is not None:
            pulumi.set(__self__, "mailbox", mailbox)
        if txt is not None:
            pulumi.set(__self__, "txt", txt)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def mailbox(self) -> Optional[str]:
        """
        The email of the person responsible. Replace @ with .
        """
        return pulumi.get(self, "mailbox")

    @property
    @pulumi.getter
    def txt(self) -> Optional[str]:
        """
        The name of a TXT record containing more information
        """
        return pulumi.get(self, "txt")


@pulumi.output_type
class ValueSpfPropertiesValueItems(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str value: The SPF record value
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The SPF record value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ValueSpfValueItemProperties(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str value: The SPF record value
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The SPF record value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ValueSrvPropertiesValueItems(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 host: Optional[str] = None,
                 port: Optional[int] = None,
                 priority: Optional[int] = None,
                 weight: Optional[int] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str host: The hostname for the service
        :param int port: The port the service runs on
        :param int priority: A priority for this record
        :param int weight: A weight for this record
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The hostname for the service
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        The port the service runs on
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        A priority for this record
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        A weight for this record
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ValueSrvValueItemProperties(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 host: Optional[str] = None,
                 port: Optional[int] = None,
                 priority: Optional[int] = None,
                 weight: Optional[int] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str host: The hostname for the service
        :param int port: The port the service runs on
        :param int priority: A priority for this record
        :param int weight: A weight for this record
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The hostname for the service
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        The port the service runs on
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        A priority for this record
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        A weight for this record
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ValueTxtPropertiesValueItems(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str value: The text record value
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The text record value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ValueTxtValueItemProperties(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param bool enabled: Whether the entry is enabled or not. Disabled entries will not be included in a response
        :param str value: The text record value
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the entry is enabled or not. Disabled entries will not be included in a response
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The text record value
        """
        return pulumi.get(self, "value")


