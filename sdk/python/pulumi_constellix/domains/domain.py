# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DomainArgs', 'Domain']

@pulumi.input_type
class DomainArgs:
    def __init__(__self__, *,
                 contacts: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 geoip: Optional[pulumi.Input[bool]] = None,
                 gtd: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 soa: Optional[pulumi.Input['SoaPropertiesArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 template: Optional[pulumi.Input[int]] = None,
                 vanity_nameserver: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Domain resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] contacts: Contactlists to be notified if the domain is updated
        :param pulumi.Input[bool] enabled: Is the domain enabled
        :param pulumi.Input[bool] geoip: Is GeoIP functionality enabled for the domain
        :param pulumi.Input[bool] gtd: Is Global Traffic Director enabled for the domain
        :param pulumi.Input[str] name: The name of the domain
        :param pulumi.Input[str] note: A note for the domain
        :param pulumi.Input['SoaPropertiesArgs'] soa: The SOA details for the domain
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: The numeric IDs of tags you want to apply to this domain
        :param pulumi.Input[int] template: The template to use for creating this domain. It will be linked to this template so any changes made to the template will apply to this domain.
        :param pulumi.Input[int] vanity_nameserver: The vanity nameserver to use for this domain.
        """
        if contacts is not None:
            pulumi.set(__self__, "contacts", contacts)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if geoip is not None:
            pulumi.set(__self__, "geoip", geoip)
        if gtd is not None:
            pulumi.set(__self__, "gtd", gtd)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if soa is not None:
            pulumi.set(__self__, "soa", soa)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if vanity_nameserver is not None:
            pulumi.set(__self__, "vanity_nameserver", vanity_nameserver)

    @property
    @pulumi.getter
    def contacts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Contactlists to be notified if the domain is updated
        """
        return pulumi.get(self, "contacts")

    @contacts.setter
    def contacts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "contacts", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the domain enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def geoip(self) -> Optional[pulumi.Input[bool]]:
        """
        Is GeoIP functionality enabled for the domain
        """
        return pulumi.get(self, "geoip")

    @geoip.setter
    def geoip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "geoip", value)

    @property
    @pulumi.getter
    def gtd(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Global Traffic Director enabled for the domain
        """
        return pulumi.get(self, "gtd")

    @gtd.setter
    def gtd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "gtd", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the domain
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[str]]:
        """
        A note for the domain
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter
    def soa(self) -> Optional[pulumi.Input['SoaPropertiesArgs']]:
        """
        The SOA details for the domain
        """
        return pulumi.get(self, "soa")

    @soa.setter
    def soa(self, value: Optional[pulumi.Input['SoaPropertiesArgs']]):
        pulumi.set(self, "soa", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The numeric IDs of tags you want to apply to this domain
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[int]]:
        """
        The template to use for creating this domain. It will be linked to this template so any changes made to the template will apply to this domain.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="vanityNameserver")
    def vanity_nameserver(self) -> Optional[pulumi.Input[int]]:
        """
        The vanity nameserver to use for this domain.
        """
        return pulumi.get(self, "vanity_nameserver")

    @vanity_nameserver.setter
    def vanity_nameserver(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vanity_nameserver", value)


class Domain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contacts: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 geoip: Optional[pulumi.Input[bool]] = None,
                 gtd: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 soa: Optional[pulumi.Input[Union['SoaPropertiesArgs', 'SoaPropertiesArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 template: Optional[pulumi.Input[int]] = None,
                 vanity_nameserver: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Domain resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] contacts: Contactlists to be notified if the domain is updated
        :param pulumi.Input[bool] enabled: Is the domain enabled
        :param pulumi.Input[bool] geoip: Is GeoIP functionality enabled for the domain
        :param pulumi.Input[bool] gtd: Is Global Traffic Director enabled for the domain
        :param pulumi.Input[str] name: The name of the domain
        :param pulumi.Input[str] note: A note for the domain
        :param pulumi.Input[Union['SoaPropertiesArgs', 'SoaPropertiesArgsDict']] soa: The SOA details for the domain
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: The numeric IDs of tags you want to apply to this domain
        :param pulumi.Input[int] template: The template to use for creating this domain. It will be linked to this template so any changes made to the template will apply to this domain.
        :param pulumi.Input[int] vanity_nameserver: The vanity nameserver to use for this domain.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DomainArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Domain resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contacts: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 geoip: Optional[pulumi.Input[bool]] = None,
                 gtd: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 soa: Optional[pulumi.Input[Union['SoaPropertiesArgs', 'SoaPropertiesArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 template: Optional[pulumi.Input[int]] = None,
                 vanity_nameserver: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DomainArgs.__new__(DomainArgs)

            __props__.__dict__["contacts"] = contacts
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["geoip"] = geoip
            __props__.__dict__["gtd"] = gtd
            __props__.__dict__["name"] = name
            __props__.__dict__["note"] = note
            __props__.__dict__["soa"] = soa
            __props__.__dict__["tags"] = tags
            __props__.__dict__["template"] = template
            __props__.__dict__["vanity_nameserver"] = vanity_nameserver
            __props__.__dict__["data"] = None
        super(Domain, __self__).__init__(
            'constellix:domains:Domain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Domain':
        """
        Get an existing Domain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DomainArgs.__new__(DomainArgs)

        __props__.__dict__["contacts"] = None
        __props__.__dict__["data"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["geoip"] = None
        __props__.__dict__["gtd"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["note"] = None
        __props__.__dict__["soa"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["template"] = None
        __props__.__dict__["vanity_nameserver"] = None
        return Domain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def contacts(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Contactlists to be notified if the domain is updated
        """
        return pulumi.get(self, "contacts")

    @property
    @pulumi.getter
    def data(self) -> pulumi.Output[Optional['outputs.DataProperties']]:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Is the domain enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def geoip(self) -> pulumi.Output[Optional[bool]]:
        """
        Is GeoIP functionality enabled for the domain
        """
        return pulumi.get(self, "geoip")

    @property
    @pulumi.getter
    def gtd(self) -> pulumi.Output[Optional[bool]]:
        """
        Is Global Traffic Director enabled for the domain
        """
        return pulumi.get(self, "gtd")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the domain
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def note(self) -> pulumi.Output[Optional[str]]:
        """
        A note for the domain
        """
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def soa(self) -> pulumi.Output[Optional['outputs.SoaProperties']]:
        """
        The SOA details for the domain
        """
        return pulumi.get(self, "soa")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        The numeric IDs of tags you want to apply to this domain
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def template(self) -> pulumi.Output[Optional[int]]:
        """
        The template to use for creating this domain. It will be linked to this template so any changes made to the template will apply to this domain.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="vanityNameserver")
    def vanity_nameserver(self) -> pulumi.Output[Optional[int]]:
        """
        The vanity nameserver to use for this domain.
        """
        return pulumi.get(self, "vanity_nameserver")

