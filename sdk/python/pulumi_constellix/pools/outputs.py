# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'DataProperties',
    'DataPropertiesLinksProperties',
    'ListMetadata',
    'ListMetadataLinksProperties',
    'ListMetadataPaginationProperties',
    'Pool',
    'PoolLinksProperties',
    'PoolValuesItemProperties',
    'Poolindex',
    'PoolindexLinksProperties',
    'PoolindexValuesItemProperties',
    'Poolito',
    'PoolitoConfigProperties',
    'SimpleContactlist',
    'SimpleContactlistLinksProperties',
    'SimpleDomain',
    'SimpleDomainLinksProperties',
    'SimpleTemplate',
    'SimpleTemplateLinksProperties',
    'Tag',
    'TagLinksProperties',
    'ValuesItemProperties',
]

@pulumi.output_type
class DataProperties(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.DataPropertiesLinksProperties'] = None):
        """
        :param int id: The ID of the object
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of the object
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.DataPropertiesLinksProperties']:
        return pulumi.get(self, "links")


@pulumi.output_type
class DataPropertiesLinksProperties(dict):
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        :param str self: The URL for the new object
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        """
        The URL for the new object
        """
        return pulumi.get(self, "self")


@pulumi.output_type
class ListMetadata(dict):
    """
    Metadata for list responses
    """
    def __init__(__self__, *,
                 links: Optional['outputs.ListMetadataLinksProperties'] = None,
                 pagination: Optional['outputs.ListMetadataPaginationProperties'] = None):
        """
        Metadata for list responses
        :param 'ListMetadataLinksProperties' links: Relevant links for this list
        :param 'ListMetadataPaginationProperties' pagination: Pagination details
        """
        if links is not None:
            pulumi.set(__self__, "links", links)
        if pagination is not None:
            pulumi.set(__self__, "pagination", pagination)

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.ListMetadataLinksProperties']:
        """
        Relevant links for this list
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def pagination(self) -> Optional['outputs.ListMetadataPaginationProperties']:
        """
        Pagination details
        """
        return pulumi.get(self, "pagination")


@pulumi.output_type
class ListMetadataLinksProperties(dict):
    """
    Relevant links for this list
    """
    def __init__(__self__, *,
                 first: Optional[str] = None,
                 last: Optional[str] = None,
                 next: Optional[str] = None,
                 previous: Optional[str] = None,
                 self: Optional[str] = None):
        """
        Relevant links for this list
        """
        if first is not None:
            pulumi.set(__self__, "first", first)
        if last is not None:
            pulumi.set(__self__, "last", last)
        if next is not None:
            pulumi.set(__self__, "next", next)
        if previous is not None:
            pulumi.set(__self__, "previous", previous)
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def first(self) -> Optional[str]:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def last(self) -> Optional[str]:
        return pulumi.get(self, "last")

    @property
    @pulumi.getter
    def next(self) -> Optional[str]:
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def previous(self) -> Optional[str]:
        return pulumi.get(self, "previous")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class ListMetadataPaginationProperties(dict):
    """
    Pagination details
    """
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 current_page: Optional[int] = None,
                 per_page: Optional[int] = None,
                 total: Optional[int] = None,
                 total_pages: Optional[int] = None):
        """
        Pagination details
        :param int count: The number of items in this page of the response
        :param int current_page: The current results page
        :param int per_page: The number of items per page
        :param int total: The total number of objects matching the query
        :param int total_pages: The total number of pages
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if current_page is not None:
            pulumi.set(__self__, "current_page", current_page)
        if per_page is not None:
            pulumi.set(__self__, "per_page", per_page)
        if total is not None:
            pulumi.set(__self__, "total", total)
        if total_pages is not None:
            pulumi.set(__self__, "total_pages", total_pages)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        The number of items in this page of the response
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="currentPage")
    def current_page(self) -> Optional[int]:
        """
        The current results page
        """
        return pulumi.get(self, "current_page")

    @property
    @pulumi.getter(name="perPage")
    def per_page(self) -> Optional[int]:
        """
        The number of items per page
        """
        return pulumi.get(self, "per_page")

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        """
        The total number of objects matching the query
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter(name="totalPages")
    def total_pages(self) -> Optional[int]:
        """
        The total number of pages
        """
        return pulumi.get(self, "total_pages")


@pulumi.output_type
class Pool(dict):
    def __init__(__self__, *,
                 contacts: Optional[Sequence['outputs.SimpleContactlist']] = None,
                 created_at: Optional[str] = None,
                 domains: Optional[Sequence['outputs.SimpleDomain']] = None,
                 enabled: Optional[bool] = None,
                 failed: Optional[bool] = None,
                 id: Optional[int] = None,
                 ito: Optional['outputs.Poolito'] = None,
                 links: Optional['outputs.PoolLinksProperties'] = None,
                 minimum_failover: Optional[int] = None,
                 name: Optional[str] = None,
                 return_: Optional[int] = None,
                 templates: Optional[Sequence['outputs.SimpleTemplate']] = None,
                 type: Optional['PoolType'] = None,
                 updated_at: Optional[str] = None,
                 values: Optional[Sequence['outputs.PoolValuesItemProperties']] = None):
        """
        :param Sequence['SimpleContactlist'] contacts: Contactlists that will be notified when the pool is updated
        :param Sequence['SimpleDomain'] domains: Domains that are using this pool
        :param bool enabled: Whether the pool is enabled or not
        :param bool failed: Whether the pool is considered failed or not
        :param 'PoolLinksProperties' links: Links for the pool
        :param int minimum_failover: The number of records that must be available for this pool to be used for failover. Between 0 and 64.
        :param int return_: The minimum number of entries from the pool to return when queried. Between 0 and 64.
        :param Sequence['SimpleTemplate'] templates: Templates that are using this pool
        :param 'PoolType' type: The type of pool
        :param Sequence['PoolValuesItemProperties'] values: The values for this pool
        """
        if contacts is not None:
            pulumi.set(__self__, "contacts", contacts)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ito is not None:
            pulumi.set(__self__, "ito", ito)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if minimum_failover is not None:
            pulumi.set(__self__, "minimum_failover", minimum_failover)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)
        if templates is not None:
            pulumi.set(__self__, "templates", templates)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def contacts(self) -> Optional[Sequence['outputs.SimpleContactlist']]:
        """
        Contactlists that will be notified when the pool is updated
        """
        return pulumi.get(self, "contacts")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def domains(self) -> Optional[Sequence['outputs.SimpleDomain']]:
        """
        Domains that are using this pool
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the pool is enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        """
        Whether the pool is considered failed or not
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ito(self) -> Optional['outputs.Poolito']:
        return pulumi.get(self, "ito")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.PoolLinksProperties']:
        """
        Links for the pool
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter(name="minimumFailover")
    def minimum_failover(self) -> Optional[int]:
        """
        The number of records that must be available for this pool to be used for failover. Between 0 and 64.
        """
        return pulumi.get(self, "minimum_failover")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional[int]:
        """
        The minimum number of entries from the pool to return when queried. Between 0 and 64.
        """
        return pulumi.get(self, "return_")

    @property
    @pulumi.getter
    def templates(self) -> Optional[Sequence['outputs.SimpleTemplate']]:
        """
        Templates that are using this pool
        """
        return pulumi.get(self, "templates")

    @property
    @pulumi.getter
    def type(self) -> Optional['PoolType']:
        """
        The type of pool
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.PoolValuesItemProperties']]:
        """
        The values for this pool
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class PoolLinksProperties(dict):
    """
    Links for the pool
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for the pool
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class PoolValuesItemProperties(dict):
    """
    A possible value for the pool. Depends on the type of pool.
    """
    def __init__(__self__, *,
                 activated: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 failed: Optional[bool] = None,
                 handicap: Optional[float] = None,
                 policy: Optional['PoolValuesItemPropertiesPolicy'] = None,
                 sonar_check_id: Optional[int] = None,
                 speed: Optional[float] = None,
                 value: Optional[Any] = None,
                 weight: Optional[int] = None):
        """
        A possible value for the pool. Depends on the type of pool.
        :param bool activated: Is the value active or not?
        :param bool enabled: Is this value enabled or not?
        :param bool failed: Is this value considered failed by monitoring
        :param float handicap: A handicap for this value
        :param 'PoolValuesItemPropertiesPolicy' policy: The failover/check policy for this value
        :param int sonar_check_id: The ID of the check to use from Sonar
        :param float speed: The response time in the last check
        :param int weight: A weight for the value. Must be between 1 and 1000000
        """
        if activated is not None:
            pulumi.set(__self__, "activated", activated)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if handicap is not None:
            pulumi.set(__self__, "handicap", handicap)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def activated(self) -> Optional[bool]:
        """
        Is the value active or not?
        """
        return pulumi.get(self, "activated")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is this value enabled or not?
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        """
        Is this value considered failed by monitoring
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def handicap(self) -> Optional[float]:
        """
        A handicap for this value
        """
        return pulumi.get(self, "handicap")

    @property
    @pulumi.getter
    def policy(self) -> Optional['PoolValuesItemPropertiesPolicy']:
        """
        The failover/check policy for this value
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID of the check to use from Sonar
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def speed(self) -> Optional[float]:
        """
        The response time in the last check
        """
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter
    def value(self) -> Optional[Any]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        A weight for the value. Must be between 1 and 1000000
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class Poolindex(dict):
    def __init__(__self__, *,
                 contacts: Optional[Sequence['outputs.SimpleContactlist']] = None,
                 created_at: Optional[str] = None,
                 domains: Optional[Sequence['outputs.SimpleDomain']] = None,
                 enabled: Optional[bool] = None,
                 failed: Optional[bool] = None,
                 id: Optional[int] = None,
                 ito: Optional['outputs.Poolito'] = None,
                 links: Optional['outputs.PoolindexLinksProperties'] = None,
                 minimum_failover: Optional[int] = None,
                 name: Optional[str] = None,
                 return_: Optional[int] = None,
                 templates: Optional[Sequence['outputs.SimpleTemplate']] = None,
                 type: Optional['PoolindexType'] = None,
                 updated_at: Optional[str] = None,
                 values: Optional[Sequence['outputs.PoolindexValuesItemProperties']] = None):
        """
        :param Sequence['SimpleContactlist'] contacts: Contactlists that will be notified when the pool is updated
        :param Sequence['SimpleDomain'] domains: Domains that are using this pool
        :param bool enabled: Whether the pool is enabled or not
        :param bool failed: Whether the pool is considered failed or not
        :param 'PoolindexLinksProperties' links: Links for the pool
        :param int minimum_failover: The number of records that must be available for this pool to be used for failover. Between 0 and 64.
        :param int return_: The minimum number of entries from the pool to return when queried. Between 0 and 64.
        :param Sequence['SimpleTemplate'] templates: Templates that are using this pool
        :param 'PoolindexType' type: The type of pool
        :param Sequence['PoolindexValuesItemProperties'] values: The values for this pool
        """
        if contacts is not None:
            pulumi.set(__self__, "contacts", contacts)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ito is not None:
            pulumi.set(__self__, "ito", ito)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if minimum_failover is not None:
            pulumi.set(__self__, "minimum_failover", minimum_failover)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)
        if templates is not None:
            pulumi.set(__self__, "templates", templates)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def contacts(self) -> Optional[Sequence['outputs.SimpleContactlist']]:
        """
        Contactlists that will be notified when the pool is updated
        """
        return pulumi.get(self, "contacts")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def domains(self) -> Optional[Sequence['outputs.SimpleDomain']]:
        """
        Domains that are using this pool
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the pool is enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        """
        Whether the pool is considered failed or not
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ito(self) -> Optional['outputs.Poolito']:
        return pulumi.get(self, "ito")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.PoolindexLinksProperties']:
        """
        Links for the pool
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter(name="minimumFailover")
    def minimum_failover(self) -> Optional[int]:
        """
        The number of records that must be available for this pool to be used for failover. Between 0 and 64.
        """
        return pulumi.get(self, "minimum_failover")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional[int]:
        """
        The minimum number of entries from the pool to return when queried. Between 0 and 64.
        """
        return pulumi.get(self, "return_")

    @property
    @pulumi.getter
    def templates(self) -> Optional[Sequence['outputs.SimpleTemplate']]:
        """
        Templates that are using this pool
        """
        return pulumi.get(self, "templates")

    @property
    @pulumi.getter
    def type(self) -> Optional['PoolindexType']:
        """
        The type of pool
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.PoolindexValuesItemProperties']]:
        """
        The values for this pool
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class PoolindexLinksProperties(dict):
    """
    Links for the pool
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for the pool
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class PoolindexValuesItemProperties(dict):
    """
    A possible value for the pool. Depends on the type of pool.
    """
    def __init__(__self__, *,
                 value: Optional[Any] = None,
                 weight: Optional[int] = None):
        """
        A possible value for the pool. Depends on the type of pool.
        :param int weight: A weight for the value. Must be between 1 amd 1000000
        """
        if value is not None:
            pulumi.set(__self__, "value", value)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def value(self) -> Optional[Any]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        A weight for the value. Must be between 1 amd 1000000
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class Poolito(dict):
    def __init__(__self__, *,
                 config: Optional['outputs.PoolitoConfigProperties'] = None,
                 enabled: Optional[bool] = None):
        """
        :param 'PoolitoConfigProperties' config: The Ito configuration
        :param bool enabled: Is Ito enabled for this pool?
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.PoolitoConfigProperties']:
        """
        The Ito configuration
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is Ito enabled for this pool?
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class PoolitoConfigProperties(dict):
    """
    The Ito configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviationAllowance":
            suggest = "deviation_allowance"
        elif key == "handicapFactor":
            suggest = "handicap_factor"
        elif key == "maximumNumberOfResults":
            suggest = "maximum_number_of_results"
        elif key == "monitoringRegion":
            suggest = "monitoring_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PoolitoConfigProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PoolitoConfigProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PoolitoConfigProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deviation_allowance: Optional['PoolitoConfigPropertiesDeviationAllowance'] = None,
                 handicap_factor: Optional['PoolitoConfigPropertiesHandicapFactor'] = None,
                 maximum_number_of_results: Optional[int] = None,
                 monitoring_region: Optional['PoolitoConfigPropertiesMonitoringRegion'] = None,
                 period: Optional['PoolitoConfigPropertiesPeriod'] = None):
        """
        The Ito configuration
        :param 'PoolitoConfigPropertiesDeviationAllowance' deviation_allowance: Percentage of how much is the response time allowed to deviate?
        :param int maximum_number_of_results: The maximum number of results to return
        :param 'PoolitoConfigPropertiesMonitoringRegion' monitoring_region: Where monitoring should be performed from
        :param 'PoolitoConfigPropertiesPeriod' period: The number of seconds between each check
        """
        if deviation_allowance is not None:
            pulumi.set(__self__, "deviation_allowance", deviation_allowance)
        if handicap_factor is not None:
            pulumi.set(__self__, "handicap_factor", handicap_factor)
        if maximum_number_of_results is not None:
            pulumi.set(__self__, "maximum_number_of_results", maximum_number_of_results)
        if monitoring_region is not None:
            pulumi.set(__self__, "monitoring_region", monitoring_region)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @property
    @pulumi.getter(name="deviationAllowance")
    def deviation_allowance(self) -> Optional['PoolitoConfigPropertiesDeviationAllowance']:
        """
        Percentage of how much is the response time allowed to deviate?
        """
        return pulumi.get(self, "deviation_allowance")

    @property
    @pulumi.getter(name="handicapFactor")
    def handicap_factor(self) -> Optional['PoolitoConfigPropertiesHandicapFactor']:
        return pulumi.get(self, "handicap_factor")

    @property
    @pulumi.getter(name="maximumNumberOfResults")
    def maximum_number_of_results(self) -> Optional[int]:
        """
        The maximum number of results to return
        """
        return pulumi.get(self, "maximum_number_of_results")

    @property
    @pulumi.getter(name="monitoringRegion")
    def monitoring_region(self) -> Optional['PoolitoConfigPropertiesMonitoringRegion']:
        """
        Where monitoring should be performed from
        """
        return pulumi.get(self, "monitoring_region")

    @property
    @pulumi.getter
    def period(self) -> Optional['PoolitoConfigPropertiesPeriod']:
        """
        The number of seconds between each check
        """
        return pulumi.get(self, "period")


@pulumi.output_type
class SimpleContactlist(dict):
    """
    A simple version of a contact list when inclued with other resources
    """
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.SimpleContactlistLinksProperties'] = None):
        """
        A simple version of a contact list when inclued with other resources
        :param int id: Unique ID for the contact list
        :param 'SimpleContactlistLinksProperties' links: Links for domain objects
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique ID for the contact list
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.SimpleContactlistLinksProperties']:
        """
        Links for domain objects
        """
        return pulumi.get(self, "links")


@pulumi.output_type
class SimpleContactlistLinksProperties(dict):
    """
    Links for domain objects
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for domain objects
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class SimpleDomain(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 geoip: Optional[bool] = None,
                 gtd: Optional[bool] = None,
                 id: Optional[int] = None,
                 links: Optional['outputs.SimpleDomainLinksProperties'] = None,
                 name: Optional[str] = None,
                 note: Optional[str] = None,
                 status: Optional['SimpleDomainStatus'] = None,
                 tags: Optional[Sequence['outputs.Tag']] = None,
                 updated_at: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param bool enabled: Is the domain enabled
        :param bool geoip: Is GeoIP functionality enabled for the domain
        :param bool gtd: Is Global Traffic Director enabled for the domain
        :param int id: A unique numeric ID for this domain
        :param 'SimpleDomainLinksProperties' links: Links for domain objects
        :param str name: The name of the domain
        :param str note: A note for the domain
        :param Sequence['Tag'] tags: An array of tags for this domain.
        :param int version: The version of the domain resource
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if geoip is not None:
            pulumi.set(__self__, "geoip", geoip)
        if gtd is not None:
            pulumi.set(__self__, "gtd", gtd)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is the domain enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def geoip(self) -> Optional[bool]:
        """
        Is GeoIP functionality enabled for the domain
        """
        return pulumi.get(self, "geoip")

    @property
    @pulumi.getter
    def gtd(self) -> Optional[bool]:
        """
        Is Global Traffic Director enabled for the domain
        """
        return pulumi.get(self, "gtd")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        A unique numeric ID for this domain
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.SimpleDomainLinksProperties']:
        """
        Links for domain objects
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the domain
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def note(self) -> Optional[str]:
        """
        A note for the domain
        """
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def status(self) -> Optional['SimpleDomainStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.Tag']]:
        """
        An array of tags for this domain.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version of the domain resource
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class SimpleDomainLinksProperties(dict):
    """
    Links for domain objects
    """
    def __init__(__self__, *,
                 records: Optional[str] = None,
                 self: Optional[str] = None):
        """
        Links for domain objects
        """
        if records is not None:
            pulumi.set(__self__, "records", records)
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def records(self) -> Optional[str]:
        return pulumi.get(self, "records")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class SimpleTemplate(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.SimpleTemplateLinksProperties'] = None,
                 name: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param int id: The unique ID for this template
        :param 'SimpleTemplateLinksProperties' links: Links for the template
        :param str name: The name for the template
        :param int version: The version of the template resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The unique ID for this template
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.SimpleTemplateLinksProperties']:
        """
        Links for the template
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the template
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version of the template resource
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class SimpleTemplateLinksProperties(dict):
    """
    Links for the template
    """
    def __init__(__self__, *,
                 records: Optional[str] = None,
                 self: Optional[str] = None):
        """
        Links for the template
        """
        if records is not None:
            pulumi.set(__self__, "records", records)
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def records(self) -> Optional[str]:
        return pulumi.get(self, "records")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class Tag(dict):
    """
    A tag is used to group resources together
    """
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.TagLinksProperties'] = None,
                 name: Optional[str] = None):
        """
        A tag is used to group resources together
        :param int id: Unique ID for the tag
        :param 'TagLinksProperties' links: Links for tags
        :param str name: A name for this tag
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique ID for the tag
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.TagLinksProperties']:
        """
        Links for tags
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A name for this tag
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TagLinksProperties(dict):
    """
    Links for tags
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for tags
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class ValuesItemProperties(dict):
    """
    A possible value for the pool. Depends on the type of pool.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sonarCheckId":
            suggest = "sonar_check_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ValuesItemProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ValuesItemProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ValuesItemProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 handicap: Optional[int] = None,
                 policy: Optional['ValuesItemPropertiesPolicy'] = None,
                 sonar_check_id: Optional[int] = None,
                 value: Optional[Any] = None,
                 weight: Optional[int] = None):
        """
        A possible value for the pool. Depends on the type of pool.
        :param bool enabled: Is this value enabled or not?
        :param int handicap: A handicap for this value
        :param 'ValuesItemPropertiesPolicy' policy: The failover/check policy for this value
        :param int sonar_check_id: The ID of the check to use from Sonar
        :param int weight: A weight for the value. Must be between 1 and 1000000
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if handicap is not None:
            pulumi.set(__self__, "handicap", handicap)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is this value enabled or not?
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def handicap(self) -> Optional[int]:
        """
        A handicap for this value
        """
        return pulumi.get(self, "handicap")

    @property
    @pulumi.getter
    def policy(self) -> Optional['ValuesItemPropertiesPolicy']:
        """
        The failover/check policy for this value
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[int]:
        """
        The ID of the check to use from Sonar
        """
        return pulumi.get(self, "sonar_check_id")

    @property
    @pulumi.getter
    def value(self) -> Optional[Any]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        A weight for the value. Must be between 1 and 1000000
        """
        return pulumi.get(self, "weight")


