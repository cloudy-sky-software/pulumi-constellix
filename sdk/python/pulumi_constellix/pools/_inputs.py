# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'PoolitoConfigPropertiesArgs',
    'PoolitoConfigPropertiesArgsDict',
    'PoolitoArgs',
    'PoolitoArgsDict',
    'ValuesItemPropertiesArgs',
    'ValuesItemPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class PoolitoConfigPropertiesArgsDict(TypedDict):
        """
        The Ito configuration
        """
        deviation_allowance: NotRequired[pulumi.Input['PoolitoConfigPropertiesDeviationAllowance']]
        """
        Percentage of how much is the response time allowed to deviate?
        """
        handicap_factor: NotRequired[pulumi.Input['PoolitoConfigPropertiesHandicapFactor']]
        maximum_number_of_results: NotRequired[pulumi.Input[int]]
        """
        The maximum number of results to return
        """
        monitoring_region: NotRequired[pulumi.Input['PoolitoConfigPropertiesMonitoringRegion']]
        """
        Where monitoring should be performed from
        """
        period: NotRequired[pulumi.Input['PoolitoConfigPropertiesPeriod']]
        """
        The number of seconds between each check
        """
elif False:
    PoolitoConfigPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PoolitoConfigPropertiesArgs:
    def __init__(__self__, *,
                 deviation_allowance: Optional[pulumi.Input['PoolitoConfigPropertiesDeviationAllowance']] = None,
                 handicap_factor: Optional[pulumi.Input['PoolitoConfigPropertiesHandicapFactor']] = None,
                 maximum_number_of_results: Optional[pulumi.Input[int]] = None,
                 monitoring_region: Optional[pulumi.Input['PoolitoConfigPropertiesMonitoringRegion']] = None,
                 period: Optional[pulumi.Input['PoolitoConfigPropertiesPeriod']] = None):
        """
        The Ito configuration
        :param pulumi.Input['PoolitoConfigPropertiesDeviationAllowance'] deviation_allowance: Percentage of how much is the response time allowed to deviate?
        :param pulumi.Input[int] maximum_number_of_results: The maximum number of results to return
        :param pulumi.Input['PoolitoConfigPropertiesMonitoringRegion'] monitoring_region: Where monitoring should be performed from
        :param pulumi.Input['PoolitoConfigPropertiesPeriod'] period: The number of seconds between each check
        """
        if deviation_allowance is not None:
            pulumi.set(__self__, "deviation_allowance", deviation_allowance)
        if handicap_factor is not None:
            pulumi.set(__self__, "handicap_factor", handicap_factor)
        if maximum_number_of_results is not None:
            pulumi.set(__self__, "maximum_number_of_results", maximum_number_of_results)
        if monitoring_region is not None:
            pulumi.set(__self__, "monitoring_region", monitoring_region)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @property
    @pulumi.getter(name="deviationAllowance")
    def deviation_allowance(self) -> Optional[pulumi.Input['PoolitoConfigPropertiesDeviationAllowance']]:
        """
        Percentage of how much is the response time allowed to deviate?
        """
        return pulumi.get(self, "deviation_allowance")

    @deviation_allowance.setter
    def deviation_allowance(self, value: Optional[pulumi.Input['PoolitoConfigPropertiesDeviationAllowance']]):
        pulumi.set(self, "deviation_allowance", value)

    @property
    @pulumi.getter(name="handicapFactor")
    def handicap_factor(self) -> Optional[pulumi.Input['PoolitoConfigPropertiesHandicapFactor']]:
        return pulumi.get(self, "handicap_factor")

    @handicap_factor.setter
    def handicap_factor(self, value: Optional[pulumi.Input['PoolitoConfigPropertiesHandicapFactor']]):
        pulumi.set(self, "handicap_factor", value)

    @property
    @pulumi.getter(name="maximumNumberOfResults")
    def maximum_number_of_results(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of results to return
        """
        return pulumi.get(self, "maximum_number_of_results")

    @maximum_number_of_results.setter
    def maximum_number_of_results(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_number_of_results", value)

    @property
    @pulumi.getter(name="monitoringRegion")
    def monitoring_region(self) -> Optional[pulumi.Input['PoolitoConfigPropertiesMonitoringRegion']]:
        """
        Where monitoring should be performed from
        """
        return pulumi.get(self, "monitoring_region")

    @monitoring_region.setter
    def monitoring_region(self, value: Optional[pulumi.Input['PoolitoConfigPropertiesMonitoringRegion']]):
        pulumi.set(self, "monitoring_region", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input['PoolitoConfigPropertiesPeriod']]:
        """
        The number of seconds between each check
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input['PoolitoConfigPropertiesPeriod']]):
        pulumi.set(self, "period", value)


if not MYPY:
    class PoolitoArgsDict(TypedDict):
        config: NotRequired[pulumi.Input['PoolitoConfigPropertiesArgsDict']]
        """
        The Ito configuration
        """
        enabled: NotRequired[pulumi.Input[bool]]
        """
        Is Ito enabled for this pool?
        """
elif False:
    PoolitoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PoolitoArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['PoolitoConfigPropertiesArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['PoolitoConfigPropertiesArgs'] config: The Ito configuration
        :param pulumi.Input[bool] enabled: Is Ito enabled for this pool?
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['PoolitoConfigPropertiesArgs']]:
        """
        The Ito configuration
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['PoolitoConfigPropertiesArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Ito enabled for this pool?
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class ValuesItemPropertiesArgsDict(TypedDict):
        """
        A possible value for the pool. Depends on the type of pool.
        """
        enabled: NotRequired[pulumi.Input[bool]]
        """
        Is this value enabled or not?
        """
        handicap: NotRequired[pulumi.Input[int]]
        """
        A handicap for this value
        """
        policy: NotRequired[pulumi.Input['ValuesItemPropertiesPolicy']]
        """
        The failover/check policy for this value
        """
        sonar_check_id: NotRequired[pulumi.Input[int]]
        """
        The ID of the check to use from Sonar
        """
        value: NotRequired[pulumi.Input[str]]
        weight: NotRequired[pulumi.Input[int]]
        """
        A weight for the value. Must be between 1 and 1000000
        """
elif False:
    ValuesItemPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ValuesItemPropertiesArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 handicap: Optional[pulumi.Input[int]] = None,
                 policy: Optional[pulumi.Input['ValuesItemPropertiesPolicy']] = None,
                 sonar_check_id: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        A possible value for the pool. Depends on the type of pool.
        :param pulumi.Input[bool] enabled: Is this value enabled or not?
        :param pulumi.Input[int] handicap: A handicap for this value
        :param pulumi.Input['ValuesItemPropertiesPolicy'] policy: The failover/check policy for this value
        :param pulumi.Input[int] sonar_check_id: The ID of the check to use from Sonar
        :param pulumi.Input[int] weight: A weight for the value. Must be between 1 and 1000000
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if handicap is not None:
            pulumi.set(__self__, "handicap", handicap)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if sonar_check_id is not None:
            pulumi.set(__self__, "sonar_check_id", sonar_check_id)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is this value enabled or not?
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def handicap(self) -> Optional[pulumi.Input[int]]:
        """
        A handicap for this value
        """
        return pulumi.get(self, "handicap")

    @handicap.setter
    def handicap(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "handicap", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input['ValuesItemPropertiesPolicy']]:
        """
        The failover/check policy for this value
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input['ValuesItemPropertiesPolicy']]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="sonarCheckId")
    def sonar_check_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the check to use from Sonar
        """
        return pulumi.get(self, "sonar_check_id")

    @sonar_check_id.setter
    def sonar_check_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sonar_check_id", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        A weight for the value. Must be between 1 and 1000000
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


