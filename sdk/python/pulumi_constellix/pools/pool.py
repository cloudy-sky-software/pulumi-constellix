# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['PoolArgs', 'Pool']

@pulumi.input_type
class PoolArgs:
    def __init__(__self__, *,
                 contacts: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ito: Optional[pulumi.Input['PoolitoArgs']] = None,
                 minimum_failover: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 return_: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input['Type']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['ValuesItemPropertiesArgs']]]] = None):
        """
        The set of arguments for constructing a Pool resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] contacts: Contact lists to be emailed when this pool changes
        :param pulumi.Input[bool] enabled: Whether the pool is enabled or not
        :param pulumi.Input[int] minimum_failover: The number of records that must be available for this pool to be used for failover. Between 0 and 64.
        :param pulumi.Input[str] name: A name for the pool
        :param pulumi.Input[int] return_: The minimum number of entries from the pool to return when queried. Between 0 and 64.
        :param pulumi.Input['Type'] type: The type of pool, either A, AAAA or CNAME
        :param pulumi.Input[Sequence[pulumi.Input['ValuesItemPropertiesArgs']]] values: The values for this pool
        """
        if contacts is not None:
            pulumi.set(__self__, "contacts", contacts)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ito is not None:
            pulumi.set(__self__, "ito", ito)
        if minimum_failover is not None:
            pulumi.set(__self__, "minimum_failover", minimum_failover)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def contacts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Contact lists to be emailed when this pool changes
        """
        return pulumi.get(self, "contacts")

    @contacts.setter
    def contacts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "contacts", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the pool is enabled or not
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ito(self) -> Optional[pulumi.Input['PoolitoArgs']]:
        return pulumi.get(self, "ito")

    @ito.setter
    def ito(self, value: Optional[pulumi.Input['PoolitoArgs']]):
        pulumi.set(self, "ito", value)

    @property
    @pulumi.getter(name="minimumFailover")
    def minimum_failover(self) -> Optional[pulumi.Input[int]]:
        """
        The number of records that must be available for this pool to be used for failover. Between 0 and 64.
        """
        return pulumi.get(self, "minimum_failover")

    @minimum_failover.setter
    def minimum_failover(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_failover", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for the pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum number of entries from the pool to return when queried. Between 0 and 64.
        """
        return pulumi.get(self, "return_")

    @return_.setter
    def return_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "return_", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['Type']]:
        """
        The type of pool, either A, AAAA or CNAME
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['Type']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ValuesItemPropertiesArgs']]]]:
        """
        The values for this pool
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ValuesItemPropertiesArgs']]]]):
        pulumi.set(self, "values", value)


class Pool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contacts: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ito: Optional[pulumi.Input[Union['PoolitoArgs', 'PoolitoArgsDict']]] = None,
                 minimum_failover: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 return_: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input['Type']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ValuesItemPropertiesArgs', 'ValuesItemPropertiesArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a Pool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] contacts: Contact lists to be emailed when this pool changes
        :param pulumi.Input[bool] enabled: Whether the pool is enabled or not
        :param pulumi.Input[int] minimum_failover: The number of records that must be available for this pool to be used for failover. Between 0 and 64.
        :param pulumi.Input[str] name: A name for the pool
        :param pulumi.Input[int] return_: The minimum number of entries from the pool to return when queried. Between 0 and 64.
        :param pulumi.Input['Type'] type: The type of pool, either A, AAAA or CNAME
        :param pulumi.Input[Sequence[pulumi.Input[Union['ValuesItemPropertiesArgs', 'ValuesItemPropertiesArgsDict']]]] values: The values for this pool
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PoolArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Pool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contacts: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ito: Optional[pulumi.Input[Union['PoolitoArgs', 'PoolitoArgsDict']]] = None,
                 minimum_failover: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 return_: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input['Type']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ValuesItemPropertiesArgs', 'ValuesItemPropertiesArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PoolArgs.__new__(PoolArgs)

            __props__.__dict__["contacts"] = contacts
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["ito"] = ito
            __props__.__dict__["minimum_failover"] = minimum_failover
            __props__.__dict__["name"] = name
            __props__.__dict__["return_"] = return_
            __props__.__dict__["type"] = type
            __props__.__dict__["values"] = values
            __props__.__dict__["data"] = None
        super(Pool, __self__).__init__(
            'constellix:pools:Pool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Pool':
        """
        Get an existing Pool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PoolArgs.__new__(PoolArgs)

        __props__.__dict__["contacts"] = None
        __props__.__dict__["data"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["ito"] = None
        __props__.__dict__["minimum_failover"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["return_"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["values"] = None
        return Pool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def contacts(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Contact lists to be emailed when this pool changes
        """
        return pulumi.get(self, "contacts")

    @property
    @pulumi.getter
    def data(self) -> pulumi.Output[Optional['outputs.DataProperties']]:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the pool is enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ito(self) -> pulumi.Output[Optional['outputs.Poolito']]:
        return pulumi.get(self, "ito")

    @property
    @pulumi.getter(name="minimumFailover")
    def minimum_failover(self) -> pulumi.Output[Optional[int]]:
        """
        The number of records that must be available for this pool to be used for failover. Between 0 and 64.
        """
        return pulumi.get(self, "minimum_failover")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        """
        A name for the pool
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="return")
    def return_(self) -> pulumi.Output[Optional[int]]:
        """
        The minimum number of entries from the pool to return when queried. Between 0 and 64.
        """
        return pulumi.get(self, "return_")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional['Type']]:
        """
        The type of pool, either A, AAAA or CNAME
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> pulumi.Output[Optional[Sequence['outputs.ValuesItemProperties']]]:
        """
        The values for this pool
        """
        return pulumi.get(self, "values")

