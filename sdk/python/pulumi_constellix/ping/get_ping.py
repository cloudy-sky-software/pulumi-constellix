# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'Ping',
    'AwaitablePing',
    'get_ping',
    'get_ping_output',
]

@pulumi.output_type
class Ping:
    def __init__(__self__, ip=None, timestamp=None, version=None):
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if timestamp and not isinstance(timestamp, str):
            raise TypeError("Expected argument 'timestamp' to be a str")
        pulumi.set(__self__, "timestamp", timestamp)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


class AwaitablePing(Ping):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return Ping(
            ip=self.ip,
            timestamp=self.timestamp,
            version=self.version)


def get_ping(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitablePing:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('constellix:ping:getPing', __args__, opts=opts, typ=Ping).value

    return AwaitablePing(
        ip=pulumi.get(__ret__, 'ip'),
        timestamp=pulumi.get(__ret__, 'timestamp'),
        version=pulumi.get(__ret__, 'version'))
def get_ping_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[Ping]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('constellix:ping:getPing', __args__, opts=opts, typ=Ping)
    return __ret__.apply(lambda __response__: Ping(
        ip=pulumi.get(__response__, 'ip'),
        timestamp=pulumi.get(__response__, 'timestamp'),
        version=pulumi.get(__response__, 'version')))
