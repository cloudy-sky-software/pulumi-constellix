# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Contactlist',
    'ContactlistEmail',
    'ContactlistEmailContactlistProperties',
    'ContactlistEmailContactlistPropertiesLinksProperties',
    'ContactlistEmailLinksProperties',
    'ContactlistEmailsItemProperties',
    'ContactlistLinksProperties',
    'ContactlistSlack',
    'ContactlistSlackContactlistProperties',
    'ContactlistSlackContactlistPropertiesLinksProperties',
    'ContactlistSlackLinksProperties',
    'ContactlistTeams',
    'ContactlistTeamsContactlistProperties',
    'ContactlistTeamsContactlistPropertiesLinksProperties',
    'ContactlistTeamsLinksProperties',
    'Contactlistwithoutemails',
    'ContactlistwithoutemailsLinksProperties',
    'DataProperties',
    'DataPropertiesLinksProperties',
    'ListMetadata',
    'ListMetadataLinksProperties',
    'ListMetadataPaginationProperties',
]

@pulumi.output_type
class Contactlist(dict):
    """
    Lists of email addresses used for notifications and messages about domains and records.
    """
    def __init__(__self__, *,
                 email_count: Optional[int] = None,
                 emails: Optional[Sequence['outputs.ContactlistEmailsItemProperties']] = None,
                 id: Optional[int] = None,
                 links: Optional['outputs.ContactlistLinksProperties'] = None,
                 name: Optional[str] = None):
        """
        Lists of email addresses used for notifications and messages about domains and records.
        :param int email_count: The number of emails in this contact list
        :param Sequence['ContactlistEmailsItemProperties'] emails: The emails in this list
        :param int id: Unique ID for the contact list
        :param 'ContactlistLinksProperties' links: Links for the object
        :param str name: A name for this contact list
        """
        if email_count is not None:
            pulumi.set(__self__, "email_count", email_count)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="emailCount")
    def email_count(self) -> Optional[int]:
        """
        The number of emails in this contact list
        """
        return pulumi.get(self, "email_count")

    @property
    @pulumi.getter
    def emails(self) -> Optional[Sequence['outputs.ContactlistEmailsItemProperties']]:
        """
        The emails in this list
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique ID for the contact list
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.ContactlistLinksProperties']:
        """
        Links for the object
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A name for this contact list
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ContactlistEmail(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 contactlist: Optional['outputs.ContactlistEmailContactlistProperties'] = None,
                 id: Optional[int] = None,
                 links: Optional['outputs.ContactlistEmailLinksProperties'] = None,
                 verified: Optional[bool] = None):
        """
        :param 'ContactlistEmailLinksProperties' links: Links for the email address
        :param bool verified: Has the email been verified or not
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if contactlist is not None:
            pulumi.set(__self__, "contactlist", contactlist)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if verified is not None:
            pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def contactlist(self) -> Optional['outputs.ContactlistEmailContactlistProperties']:
        return pulumi.get(self, "contactlist")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.ContactlistEmailLinksProperties']:
        """
        Links for the email address
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def verified(self) -> Optional[bool]:
        """
        Has the email been verified or not
        """
        return pulumi.get(self, "verified")


@pulumi.output_type
class ContactlistEmailContactlistProperties(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.ContactlistEmailContactlistPropertiesLinksProperties'] = None):
        """
        :param int id: Unique ID for the contact list
        :param 'ContactlistEmailContactlistPropertiesLinksProperties' links: Links for the contact list
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique ID for the contact list
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.ContactlistEmailContactlistPropertiesLinksProperties']:
        """
        Links for the contact list
        """
        return pulumi.get(self, "links")


@pulumi.output_type
class ContactlistEmailContactlistPropertiesLinksProperties(dict):
    """
    Links for the contact list
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for the contact list
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class ContactlistEmailLinksProperties(dict):
    """
    Links for the email address
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for the email address
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class ContactlistEmailsItemProperties(dict):
    """
    An object for a single email in the contact list
    """
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 verified: Optional[bool] = None):
        """
        An object for a single email in the contact list
        :param bool verified: Has the email been verified or not
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if verified is not None:
            pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def verified(self) -> Optional[bool]:
        """
        Has the email been verified or not
        """
        return pulumi.get(self, "verified")


@pulumi.output_type
class ContactlistLinksProperties(dict):
    """
    Links for the object
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for the object
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class ContactlistSlack(dict):
    def __init__(__self__, *,
                 channel: Optional[str] = None,
                 contactlist: Optional['outputs.ContactlistSlackContactlistProperties'] = None,
                 id: Optional[int] = None,
                 links: Optional['outputs.ContactlistSlackLinksProperties'] = None,
                 webhook: Optional[str] = None):
        """
        :param str channel: The channel to send the message to
        :param 'ContactlistSlackLinksProperties' links: Links for the Slack webhook
        :param str webhook: The inbound webhook URL for Slack
        """
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if contactlist is not None:
            pulumi.set(__self__, "contactlist", contactlist)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter
    def channel(self) -> Optional[str]:
        """
        The channel to send the message to
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def contactlist(self) -> Optional['outputs.ContactlistSlackContactlistProperties']:
        return pulumi.get(self, "contactlist")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.ContactlistSlackLinksProperties']:
        """
        Links for the Slack webhook
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def webhook(self) -> Optional[str]:
        """
        The inbound webhook URL for Slack
        """
        return pulumi.get(self, "webhook")


@pulumi.output_type
class ContactlistSlackContactlistProperties(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.ContactlistSlackContactlistPropertiesLinksProperties'] = None):
        """
        :param int id: Unique ID for the contact list
        :param 'ContactlistSlackContactlistPropertiesLinksProperties' links: Links for the contact list
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique ID for the contact list
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.ContactlistSlackContactlistPropertiesLinksProperties']:
        """
        Links for the contact list
        """
        return pulumi.get(self, "links")


@pulumi.output_type
class ContactlistSlackContactlistPropertiesLinksProperties(dict):
    """
    Links for the contact list
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for the contact list
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class ContactlistSlackLinksProperties(dict):
    """
    Links for the Slack webhook
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for the Slack webhook
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class ContactlistTeams(dict):
    def __init__(__self__, *,
                 channel: Optional[str] = None,
                 contactlist: Optional['outputs.ContactlistTeamsContactlistProperties'] = None,
                 id: Optional[int] = None,
                 links: Optional['outputs.ContactlistTeamsLinksProperties'] = None,
                 webhook: Optional[str] = None):
        """
        :param str channel: The channel to send the message to
        :param 'ContactlistTeamsLinksProperties' links: Links for the MS Teams Webhook
        :param str webhook: The inbound webhook URL for MS Teams
        """
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if contactlist is not None:
            pulumi.set(__self__, "contactlist", contactlist)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter
    def channel(self) -> Optional[str]:
        """
        The channel to send the message to
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def contactlist(self) -> Optional['outputs.ContactlistTeamsContactlistProperties']:
        return pulumi.get(self, "contactlist")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.ContactlistTeamsLinksProperties']:
        """
        Links for the MS Teams Webhook
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def webhook(self) -> Optional[str]:
        """
        The inbound webhook URL for MS Teams
        """
        return pulumi.get(self, "webhook")


@pulumi.output_type
class ContactlistTeamsContactlistProperties(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.ContactlistTeamsContactlistPropertiesLinksProperties'] = None):
        """
        :param int id: Unique ID for the contact list
        :param 'ContactlistTeamsContactlistPropertiesLinksProperties' links: Links for the contact list
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique ID for the contact list
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.ContactlistTeamsContactlistPropertiesLinksProperties']:
        """
        Links for the contact list
        """
        return pulumi.get(self, "links")


@pulumi.output_type
class ContactlistTeamsContactlistPropertiesLinksProperties(dict):
    """
    Links for the contact list
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for the contact list
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class ContactlistTeamsLinksProperties(dict):
    """
    Links for the MS Teams Webhook
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for the MS Teams Webhook
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class Contactlistwithoutemails(dict):
    """
    Lists of email addresses used for notifications and messages about domains and records.
    """
    def __init__(__self__, *,
                 email_count: Optional[int] = None,
                 id: Optional[int] = None,
                 links: Optional['outputs.ContactlistwithoutemailsLinksProperties'] = None,
                 name: Optional[str] = None):
        """
        Lists of email addresses used for notifications and messages about domains and records.
        :param int email_count: The number of emails in this contact list
        :param int id: Unique ID for the contact list
        :param 'ContactlistwithoutemailsLinksProperties' links: Links for the object
        :param str name: A name for this contact list
        """
        if email_count is not None:
            pulumi.set(__self__, "email_count", email_count)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="emailCount")
    def email_count(self) -> Optional[int]:
        """
        The number of emails in this contact list
        """
        return pulumi.get(self, "email_count")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique ID for the contact list
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.ContactlistwithoutemailsLinksProperties']:
        """
        Links for the object
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A name for this contact list
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ContactlistwithoutemailsLinksProperties(dict):
    """
    Links for the object
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for the object
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class DataProperties(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.DataPropertiesLinksProperties'] = None):
        """
        :param int id: The ID of the email address
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of the email address
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.DataPropertiesLinksProperties']:
        return pulumi.get(self, "links")


@pulumi.output_type
class DataPropertiesLinksProperties(dict):
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        :param str self: The URL for the new object
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        """
        The URL for the new object
        """
        return pulumi.get(self, "self")


@pulumi.output_type
class ListMetadata(dict):
    """
    Metadata for list responses
    """
    def __init__(__self__, *,
                 links: Optional['outputs.ListMetadataLinksProperties'] = None,
                 pagination: Optional['outputs.ListMetadataPaginationProperties'] = None):
        """
        Metadata for list responses
        :param 'ListMetadataLinksProperties' links: Relevant links for this list
        :param 'ListMetadataPaginationProperties' pagination: Pagination details
        """
        if links is not None:
            pulumi.set(__self__, "links", links)
        if pagination is not None:
            pulumi.set(__self__, "pagination", pagination)

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.ListMetadataLinksProperties']:
        """
        Relevant links for this list
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def pagination(self) -> Optional['outputs.ListMetadataPaginationProperties']:
        """
        Pagination details
        """
        return pulumi.get(self, "pagination")


@pulumi.output_type
class ListMetadataLinksProperties(dict):
    """
    Relevant links for this list
    """
    def __init__(__self__, *,
                 first: Optional[str] = None,
                 last: Optional[str] = None,
                 next: Optional[str] = None,
                 previous: Optional[str] = None,
                 self: Optional[str] = None):
        """
        Relevant links for this list
        """
        if first is not None:
            pulumi.set(__self__, "first", first)
        if last is not None:
            pulumi.set(__self__, "last", last)
        if next is not None:
            pulumi.set(__self__, "next", next)
        if previous is not None:
            pulumi.set(__self__, "previous", previous)
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def first(self) -> Optional[str]:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def last(self) -> Optional[str]:
        return pulumi.get(self, "last")

    @property
    @pulumi.getter
    def next(self) -> Optional[str]:
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def previous(self) -> Optional[str]:
        return pulumi.get(self, "previous")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class ListMetadataPaginationProperties(dict):
    """
    Pagination details
    """
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 current_page: Optional[int] = None,
                 per_page: Optional[int] = None,
                 total: Optional[int] = None,
                 total_pages: Optional[int] = None):
        """
        Pagination details
        :param int count: The number of items in this page of the response
        :param int current_page: The current results page
        :param int per_page: The number of items per page
        :param int total: The total number of objects matching the query
        :param int total_pages: The total number of pages
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if current_page is not None:
            pulumi.set(__self__, "current_page", current_page)
        if per_page is not None:
            pulumi.set(__self__, "per_page", per_page)
        if total is not None:
            pulumi.set(__self__, "total", total)
        if total_pages is not None:
            pulumi.set(__self__, "total_pages", total_pages)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        The number of items in this page of the response
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="currentPage")
    def current_page(self) -> Optional[int]:
        """
        The current results page
        """
        return pulumi.get(self, "current_page")

    @property
    @pulumi.getter(name="perPage")
    def per_page(self) -> Optional[int]:
        """
        The number of items per page
        """
        return pulumi.get(self, "per_page")

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        """
        The total number of objects matching the query
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter(name="totalPages")
    def total_pages(self) -> Optional[int]:
        """
        The total number of pages
        """
        return pulumi.get(self, "total_pages")


