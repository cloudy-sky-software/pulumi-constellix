# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['IPFilterArgs', 'IPFilter']

@pulumi.input_type
class IPFilterArgs:
    def __init__(__self__, *,
                 asn: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 continents: Optional[pulumi.Input[Sequence[pulumi.Input['ContinentsItem']]]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv4: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv6: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input['RegionsItemPropertiesArgs']]]] = None,
                 rules_limit: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a IPFilter resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] asn: AS Numbers that this rule applies to. Values must be between 0 and 4,294,967,295
        :param pulumi.Input[Sequence[pulumi.Input['ContinentsItem']]] continents: A list of continents in this filter
        :param pulumi.Input[Sequence[pulumi.Input[str]]] countries: 2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv4: IPv4 addresses and CIDRs that this filter applies to
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv6: IPv6 addresses and CIDRs that this filter applies to
        :param pulumi.Input[str] name: The name for this IP filter
        :param pulumi.Input[Sequence[pulumi.Input['RegionsItemPropertiesArgs']]] regions: Combinations of Regions, Countries, Continents and optionally ASNs.
        :param pulumi.Input[int] rules_limit: Values should be multiples of 100. Upper limit is the quota assigned to the account.
        """
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if continents is not None:
            pulumi.set(__self__, "continents", continents)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if rules_limit is not None:
            pulumi.set(__self__, "rules_limit", rules_limit)

    @property
    @pulumi.getter
    def asn(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        AS Numbers that this rule applies to. Values must be between 0 and 4,294,967,295
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "asn", value)

    @property
    @pulumi.getter
    def continents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContinentsItem']]]]:
        """
        A list of continents in this filter
        """
        return pulumi.get(self, "continents")

    @continents.setter
    def continents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContinentsItem']]]]):
        pulumi.set(self, "continents", value)

    @property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "countries", value)

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IPv4 addresses and CIDRs that this filter applies to
        """
        return pulumi.get(self, "ipv4")

    @ipv4.setter
    def ipv4(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ipv4", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IPv6 addresses and CIDRs that this filter applies to
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for this IP filter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RegionsItemPropertiesArgs']]]]:
        """
        Combinations of Regions, Countries, Continents and optionally ASNs.
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RegionsItemPropertiesArgs']]]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="rulesLimit")
    def rules_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Values should be multiples of 100. Upper limit is the quota assigned to the account.
        """
        return pulumi.get(self, "rules_limit")

    @rules_limit.setter
    def rules_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rules_limit", value)


class IPFilter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asn: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 continents: Optional[pulumi.Input[Sequence[pulumi.Input['ContinentsItem']]]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv4: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv6: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RegionsItemPropertiesArgs', 'RegionsItemPropertiesArgsDict']]]]] = None,
                 rules_limit: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a IPFilter resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] asn: AS Numbers that this rule applies to. Values must be between 0 and 4,294,967,295
        :param pulumi.Input[Sequence[pulumi.Input['ContinentsItem']]] continents: A list of continents in this filter
        :param pulumi.Input[Sequence[pulumi.Input[str]]] countries: 2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv4: IPv4 addresses and CIDRs that this filter applies to
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv6: IPv6 addresses and CIDRs that this filter applies to
        :param pulumi.Input[str] name: The name for this IP filter
        :param pulumi.Input[Sequence[pulumi.Input[Union['RegionsItemPropertiesArgs', 'RegionsItemPropertiesArgsDict']]]] regions: Combinations of Regions, Countries, Continents and optionally ASNs.
        :param pulumi.Input[int] rules_limit: Values should be multiples of 100. Upper limit is the quota assigned to the account.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IPFilterArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IPFilter resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IPFilterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IPFilterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asn: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 continents: Optional[pulumi.Input[Sequence[pulumi.Input['ContinentsItem']]]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv4: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv6: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RegionsItemPropertiesArgs', 'RegionsItemPropertiesArgsDict']]]]] = None,
                 rules_limit: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IPFilterArgs.__new__(IPFilterArgs)

            __props__.__dict__["asn"] = asn
            __props__.__dict__["continents"] = continents
            __props__.__dict__["countries"] = countries
            __props__.__dict__["ipv4"] = ipv4
            __props__.__dict__["ipv6"] = ipv6
            __props__.__dict__["name"] = name
            __props__.__dict__["regions"] = regions
            __props__.__dict__["rules_limit"] = rules_limit
            __props__.__dict__["data"] = None
        super(IPFilter, __self__).__init__(
            'constellix:ipfilters:IPFilter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'IPFilter':
        """
        Get an existing IPFilter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = IPFilterArgs.__new__(IPFilterArgs)

        __props__.__dict__["asn"] = None
        __props__.__dict__["continents"] = None
        __props__.__dict__["countries"] = None
        __props__.__dict__["data"] = None
        __props__.__dict__["ipv4"] = None
        __props__.__dict__["ipv6"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["regions"] = None
        __props__.__dict__["rules_limit"] = None
        return IPFilter(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def asn(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        AS Numbers that this rule applies to. Values must be between 0 and 4,294,967,295
        """
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def continents(self) -> pulumi.Output[Optional[Sequence['ContinentsItem']]]:
        """
        A list of continents in this filter
        """
        return pulumi.get(self, "continents")

    @property
    @pulumi.getter
    def countries(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        """
        return pulumi.get(self, "countries")

    @property
    @pulumi.getter
    def data(self) -> pulumi.Output[Optional['outputs.DataProperties']]:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def ipv4(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        IPv4 addresses and CIDRs that this filter applies to
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        IPv6 addresses and CIDRs that this filter applies to
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        """
        The name for this IP filter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Output[Optional[Sequence['outputs.RegionsItemProperties']]]:
        """
        Combinations of Regions, Countries, Continents and optionally ASNs.
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="rulesLimit")
    def rules_limit(self) -> pulumi.Output[Optional[int]]:
        """
        Values should be multiples of 100. Upper limit is the quota assigned to the account.
        """
        return pulumi.get(self, "rules_limit")

