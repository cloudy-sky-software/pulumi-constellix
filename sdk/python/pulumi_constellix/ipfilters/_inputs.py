# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'RegionsItemPropertiesArgs',
    'RegionsItemPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class RegionsItemPropertiesArgsDict(TypedDict):
        asn: NotRequired[pulumi.Input[int]]
        """
        Optional AS Number that this rule applies to. Values must be between 0 and 4,294,967,295
        """
        continent: NotRequired[pulumi.Input['RegionsItemPropertiesContinent']]
        """
        The continent for this region
        """
        country: NotRequired[pulumi.Input[str]]
        """
        Optional 2 digit ISO code for the country - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        """
        region: NotRequired[pulumi.Input[str]]
        """
        Optional 2 digit code for the region
        """
elif False:
    RegionsItemPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RegionsItemPropertiesArgs:
    def __init__(__self__, *,
                 asn: Optional[pulumi.Input[int]] = None,
                 continent: Optional[pulumi.Input['RegionsItemPropertiesContinent']] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] asn: Optional AS Number that this rule applies to. Values must be between 0 and 4,294,967,295
        :param pulumi.Input['RegionsItemPropertiesContinent'] continent: The continent for this region
        :param pulumi.Input[str] country: Optional 2 digit ISO code for the country - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        :param pulumi.Input[str] region: Optional 2 digit code for the region
        """
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if continent is not None:
            pulumi.set(__self__, "continent", continent)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def asn(self) -> Optional[pulumi.Input[int]]:
        """
        Optional AS Number that this rule applies to. Values must be between 0 and 4,294,967,295
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "asn", value)

    @property
    @pulumi.getter
    def continent(self) -> Optional[pulumi.Input['RegionsItemPropertiesContinent']]:
        """
        The continent for this region
        """
        return pulumi.get(self, "continent")

    @continent.setter
    def continent(self, value: Optional[pulumi.Input['RegionsItemPropertiesContinent']]):
        pulumi.set(self, "continent", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        Optional 2 digit ISO code for the country - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Optional 2 digit code for the region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


