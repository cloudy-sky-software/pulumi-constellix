# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'DataProperties',
    'DataPropertiesLinksProperties',
    'Ipfilter',
    'IpfilterLinksProperties',
    'ListMetadata',
    'ListMetadataLinksProperties',
    'ListMetadataPaginationProperties',
    'Region',
    'RegionsItemProperties',
]

@pulumi.output_type
class DataProperties(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 links: Optional['outputs.DataPropertiesLinksProperties'] = None):
        """
        :param int id: The ID of the object
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of the object
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.DataPropertiesLinksProperties']:
        return pulumi.get(self, "links")


@pulumi.output_type
class DataPropertiesLinksProperties(dict):
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        :param str self: The URL for the new object
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        """
        The URL for the new object
        """
        return pulumi.get(self, "self")


@pulumi.output_type
class Ipfilter(dict):
    def __init__(__self__, *,
                 asn: Optional[Sequence[int]] = None,
                 continents: Optional[Sequence['IpfilterContinentsItem']] = None,
                 countries: Optional[Sequence[str]] = None,
                 id: Optional[int] = None,
                 ipv4: Optional[Sequence[str]] = None,
                 ipv6: Optional[Sequence[str]] = None,
                 links: Optional['outputs.IpfilterLinksProperties'] = None,
                 name: Optional[str] = None,
                 regions: Optional[Sequence['outputs.Region']] = None,
                 rules_limit: Optional[int] = None):
        """
        :param Sequence[int] asn: AS Numbers that this rule applies to. Values must be between 0 and 4,294,967,295
        :param Sequence['IpfilterContinentsItem'] continents: A list of continents in this filter
        :param Sequence[str] countries: 2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        :param int id: The unique ID for this IP filter
        :param Sequence[str] ipv4: IPv4 addresses and CIDRs that this filter applies to
        :param Sequence[str] ipv6: IPv6 addresses and CIDRs that this filter applies to
        :param 'IpfilterLinksProperties' links: Links for domain objects
        :param str name: The name for this IP filter
        :param Sequence['Region'] regions: Regions for this IP filter.
        :param int rules_limit: Values should be multiples of 100. Upper limit is the quota assigned to the account.
        """
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if continents is not None:
            pulumi.set(__self__, "continents", continents)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if rules_limit is not None:
            pulumi.set(__self__, "rules_limit", rules_limit)

    @property
    @pulumi.getter
    def asn(self) -> Optional[Sequence[int]]:
        """
        AS Numbers that this rule applies to. Values must be between 0 and 4,294,967,295
        """
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def continents(self) -> Optional[Sequence['IpfilterContinentsItem']]:
        """
        A list of continents in this filter
        """
        return pulumi.get(self, "continents")

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        """
        2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        """
        return pulumi.get(self, "countries")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The unique ID for this IP filter
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[Sequence[str]]:
        """
        IPv4 addresses and CIDRs that this filter applies to
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[Sequence[str]]:
        """
        IPv6 addresses and CIDRs that this filter applies to
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.IpfilterLinksProperties']:
        """
        Links for domain objects
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for this IP filter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence['outputs.Region']]:
        """
        Regions for this IP filter.
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="rulesLimit")
    def rules_limit(self) -> Optional[int]:
        """
        Values should be multiples of 100. Upper limit is the quota assigned to the account.
        """
        return pulumi.get(self, "rules_limit")


@pulumi.output_type
class IpfilterLinksProperties(dict):
    """
    Links for domain objects
    """
    def __init__(__self__, *,
                 self: Optional[str] = None):
        """
        Links for domain objects
        """
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class ListMetadata(dict):
    """
    Metadata for list responses
    """
    def __init__(__self__, *,
                 links: Optional['outputs.ListMetadataLinksProperties'] = None,
                 pagination: Optional['outputs.ListMetadataPaginationProperties'] = None):
        """
        Metadata for list responses
        :param 'ListMetadataLinksProperties' links: Relevant links for this list
        :param 'ListMetadataPaginationProperties' pagination: Pagination details
        """
        if links is not None:
            pulumi.set(__self__, "links", links)
        if pagination is not None:
            pulumi.set(__self__, "pagination", pagination)

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.ListMetadataLinksProperties']:
        """
        Relevant links for this list
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def pagination(self) -> Optional['outputs.ListMetadataPaginationProperties']:
        """
        Pagination details
        """
        return pulumi.get(self, "pagination")


@pulumi.output_type
class ListMetadataLinksProperties(dict):
    """
    Relevant links for this list
    """
    def __init__(__self__, *,
                 first: Optional[str] = None,
                 last: Optional[str] = None,
                 next: Optional[str] = None,
                 previous: Optional[str] = None,
                 self: Optional[str] = None):
        """
        Relevant links for this list
        """
        if first is not None:
            pulumi.set(__self__, "first", first)
        if last is not None:
            pulumi.set(__self__, "last", last)
        if next is not None:
            pulumi.set(__self__, "next", next)
        if previous is not None:
            pulumi.set(__self__, "previous", previous)
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter
    def first(self) -> Optional[str]:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def last(self) -> Optional[str]:
        return pulumi.get(self, "last")

    @property
    @pulumi.getter
    def next(self) -> Optional[str]:
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def previous(self) -> Optional[str]:
        return pulumi.get(self, "previous")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")


@pulumi.output_type
class ListMetadataPaginationProperties(dict):
    """
    Pagination details
    """
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 current_page: Optional[int] = None,
                 per_page: Optional[int] = None,
                 total: Optional[int] = None,
                 total_pages: Optional[int] = None):
        """
        Pagination details
        :param int count: The number of items in this page of the response
        :param int current_page: The current results page
        :param int per_page: The number of items per page
        :param int total: The total number of objects matching the query
        :param int total_pages: The total number of pages
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if current_page is not None:
            pulumi.set(__self__, "current_page", current_page)
        if per_page is not None:
            pulumi.set(__self__, "per_page", per_page)
        if total is not None:
            pulumi.set(__self__, "total", total)
        if total_pages is not None:
            pulumi.set(__self__, "total_pages", total_pages)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        The number of items in this page of the response
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="currentPage")
    def current_page(self) -> Optional[int]:
        """
        The current results page
        """
        return pulumi.get(self, "current_page")

    @property
    @pulumi.getter(name="perPage")
    def per_page(self) -> Optional[int]:
        """
        The number of items per page
        """
        return pulumi.get(self, "per_page")

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        """
        The total number of objects matching the query
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter(name="totalPages")
    def total_pages(self) -> Optional[int]:
        """
        The total number of pages
        """
        return pulumi.get(self, "total_pages")


@pulumi.output_type
class Region(dict):
    """
    IP Filter Region
    """
    def __init__(__self__, *,
                 asn: Optional[int] = None,
                 continent: Optional[str] = None,
                 country: Optional[str] = None,
                 region: Optional[str] = None):
        """
        IP Filter Region
        :param int asn: AS Number for this region
        :param str continent: The continent for this region
        :param str country: The country for the region
        :param str region: The region code
        """
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if continent is not None:
            pulumi.set(__self__, "continent", continent)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def asn(self) -> Optional[int]:
        """
        AS Number for this region
        """
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def continent(self) -> Optional[str]:
        """
        The continent for this region
        """
        return pulumi.get(self, "continent")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        """
        The country for the region
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region code
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class RegionsItemProperties(dict):
    def __init__(__self__, *,
                 asn: Optional[int] = None,
                 continent: Optional['RegionsItemPropertiesContinent'] = None,
                 country: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param int asn: Optional AS Number that this rule applies to. Values must be between 0 and 4,294,967,295
        :param 'RegionsItemPropertiesContinent' continent: The continent for this region
        :param str country: Optional 2 digit ISO code for the country - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        :param str region: Optional 2 digit code for the region
        """
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if continent is not None:
            pulumi.set(__self__, "continent", continent)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def asn(self) -> Optional[int]:
        """
        Optional AS Number that this rule applies to. Values must be between 0 and 4,294,967,295
        """
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def continent(self) -> Optional['RegionsItemPropertiesContinent']:
        """
        The continent for this region
        """
        return pulumi.get(self, "continent")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        """
        Optional 2 digit ISO code for the country - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Optional 2 digit code for the region
        """
        return pulumi.get(self, "region")


