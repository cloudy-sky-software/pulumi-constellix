# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ListAnalyticsProperties',
    'AwaitableListAnalyticsProperties',
    'list_analytics',
    'list_analytics_output',
]

@pulumi.output_type
class ListAnalyticsProperties:
    def __init__(__self__, data=None):
        if data and not isinstance(data, dict):
            raise TypeError("Expected argument 'data' to be a dict")
        pulumi.set(__self__, "data", data)

    @property
    @pulumi.getter
    def data(self) -> Optional['outputs.Analytics']:
        """
        Analytics for your account
        """
        return pulumi.get(self, "data")


class AwaitableListAnalyticsProperties(ListAnalyticsProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListAnalyticsProperties(
            data=self.data)


def list_analytics(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListAnalyticsProperties:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('constellix:analytics:listAnalytics', __args__, opts=opts, typ=ListAnalyticsProperties).value

    return AwaitableListAnalyticsProperties(
        data=pulumi.get(__ret__, 'data'))
def list_analytics_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ListAnalyticsProperties]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('constellix:analytics:listAnalytics', __args__, opts=opts, typ=ListAnalyticsProperties)
    return __ret__.apply(lambda __response__: ListAnalyticsProperties(
        data=pulumi.get(__response__, 'data')))
