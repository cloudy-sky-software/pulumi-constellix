# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTemplateRecord',
    'AwaitableGetTemplateRecord',
    'get_template_record',
    'get_template_record_output',
]

@pulumi.output_type
class GetTemplateRecord:
    def __init__(__self__, links=None, template=None):
        if links and not isinstance(links, dict):
            raise TypeError("Expected argument 'links' to be a dict")
        pulumi.set(__self__, "links", links)
        if template and not isinstance(template, dict):
            raise TypeError("Expected argument 'template' to be a dict")
        pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.TemplaterecordPropertiesLinksProperties']:
        """
        Links for the domain record
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.SimpleTemplate']:
        return pulumi.get(self, "template")


class AwaitableGetTemplateRecord(GetTemplateRecord):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTemplateRecord(
            links=self.links,
            template=self.template)


def get_template_record(id: Optional[str] = None,
                        template_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTemplateRecord:
    """
    Use this data source to access information about an existing resource.

    :param str id: The ID of the record
    :param str template_id: The ID of the template object
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['templateId'] = template_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('constellix:templates:getTemplateRecord', __args__, opts=opts, typ=GetTemplateRecord).value

    return AwaitableGetTemplateRecord(
        links=pulumi.get(__ret__, 'links'),
        template=pulumi.get(__ret__, 'template'))
def get_template_record_output(id: Optional[pulumi.Input[str]] = None,
                               template_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTemplateRecord]:
    """
    Use this data source to access information about an existing resource.

    :param str id: The ID of the record
    :param str template_id: The ID of the template object
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['templateId'] = template_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('constellix:templates:getTemplateRecord', __args__, opts=opts, typ=GetTemplateRecord)
    return __ret__.apply(lambda __response__: GetTemplateRecord(
        links=pulumi.get(__response__, 'links'),
        template=pulumi.get(__response__, 'template')))
