# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetVanityNameserverProperties',
    'AwaitableGetVanityNameserverProperties',
    'get_vanity_nameserver',
    'get_vanity_nameserver_output',
]

@pulumi.output_type
class GetVanityNameserverProperties:
    def __init__(__self__, data=None):
        if data and not isinstance(data, dict):
            raise TypeError("Expected argument 'data' to be a dict")
        pulumi.set(__self__, "data", data)

    @property
    @pulumi.getter
    def data(self) -> Optional['outputs.Vanitynameserver']:
        """
        A rebranded nameserver using your own domain name.
        """
        return pulumi.get(self, "data")


class AwaitableGetVanityNameserverProperties(GetVanityNameserverProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVanityNameserverProperties(
            data=self.data)


def get_vanity_nameserver(id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVanityNameserverProperties:
    """
    Use this data source to access information about an existing resource.

    :param str id: The ID of the Vanity Nameserver
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('constellix:vanitynameservers:getVanityNameserver', __args__, opts=opts, typ=GetVanityNameserverProperties).value

    return AwaitableGetVanityNameserverProperties(
        data=pulumi.get(__ret__, 'data'))
def get_vanity_nameserver_output(id: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVanityNameserverProperties]:
    """
    Use this data source to access information about an existing resource.

    :param str id: The ID of the Vanity Nameserver
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('constellix:vanitynameservers:getVanityNameserver', __args__, opts=opts, typ=GetVanityNameserverProperties)
    return __ret__.apply(lambda __response__: GetVanityNameserverProperties(
        data=pulumi.get(__response__, 'data')))
