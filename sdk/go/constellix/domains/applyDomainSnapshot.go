// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domains

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-constellix/sdk/go/constellix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ApplyDomainSnapshot struct {
	pulumi.CustomResourceState
}

// NewApplyDomainSnapshot registers a new resource with the given unique name, arguments, and options.
func NewApplyDomainSnapshot(ctx *pulumi.Context,
	name string, args *ApplyDomainSnapshotArgs, opts ...pulumi.ResourceOption) (*ApplyDomainSnapshot, error) {
	if args == nil {
		args = &ApplyDomainSnapshotArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplyDomainSnapshot
	err := ctx.RegisterResource("constellix:domains:ApplyDomainSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplyDomainSnapshot gets an existing ApplyDomainSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplyDomainSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplyDomainSnapshotState, opts ...pulumi.ResourceOption) (*ApplyDomainSnapshot, error) {
	var resource ApplyDomainSnapshot
	err := ctx.ReadResource("constellix:domains:ApplyDomainSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplyDomainSnapshot resources.
type applyDomainSnapshotState struct {
}

type ApplyDomainSnapshotState struct {
}

func (ApplyDomainSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*applyDomainSnapshotState)(nil)).Elem()
}

type applyDomainSnapshotArgs struct {
	// The ID of the domain object
	DomainId *string `pulumi:"domainId"`
	// The snapshot version of the domain
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a ApplyDomainSnapshot resource.
type ApplyDomainSnapshotArgs struct {
	// The ID of the domain object
	DomainId pulumi.StringPtrInput
	// The snapshot version of the domain
	Version pulumi.StringPtrInput
}

func (ApplyDomainSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applyDomainSnapshotArgs)(nil)).Elem()
}

type ApplyDomainSnapshotInput interface {
	pulumi.Input

	ToApplyDomainSnapshotOutput() ApplyDomainSnapshotOutput
	ToApplyDomainSnapshotOutputWithContext(ctx context.Context) ApplyDomainSnapshotOutput
}

func (*ApplyDomainSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplyDomainSnapshot)(nil)).Elem()
}

func (i *ApplyDomainSnapshot) ToApplyDomainSnapshotOutput() ApplyDomainSnapshotOutput {
	return i.ToApplyDomainSnapshotOutputWithContext(context.Background())
}

func (i *ApplyDomainSnapshot) ToApplyDomainSnapshotOutputWithContext(ctx context.Context) ApplyDomainSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplyDomainSnapshotOutput)
}

type ApplyDomainSnapshotOutput struct{ *pulumi.OutputState }

func (ApplyDomainSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplyDomainSnapshot)(nil)).Elem()
}

func (o ApplyDomainSnapshotOutput) ToApplyDomainSnapshotOutput() ApplyDomainSnapshotOutput {
	return o
}

func (o ApplyDomainSnapshotOutput) ToApplyDomainSnapshotOutputWithContext(ctx context.Context) ApplyDomainSnapshotOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplyDomainSnapshotInput)(nil)).Elem(), &ApplyDomainSnapshot{})
	pulumi.RegisterOutputType(ApplyDomainSnapshotOutput{})
}
