// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domains

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-constellix/sdk/go/constellix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ApplyDomainHistory struct {
	pulumi.CustomResourceState
}

// NewApplyDomainHistory registers a new resource with the given unique name, arguments, and options.
func NewApplyDomainHistory(ctx *pulumi.Context,
	name string, args *ApplyDomainHistoryArgs, opts ...pulumi.ResourceOption) (*ApplyDomainHistory, error) {
	if args == nil {
		args = &ApplyDomainHistoryArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplyDomainHistory
	err := ctx.RegisterResource("constellix:domains:ApplyDomainHistory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplyDomainHistory gets an existing ApplyDomainHistory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplyDomainHistory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplyDomainHistoryState, opts ...pulumi.ResourceOption) (*ApplyDomainHistory, error) {
	var resource ApplyDomainHistory
	err := ctx.ReadResource("constellix:domains:ApplyDomainHistory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplyDomainHistory resources.
type applyDomainHistoryState struct {
}

type ApplyDomainHistoryState struct {
}

func (ApplyDomainHistoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*applyDomainHistoryState)(nil)).Elem()
}

type applyDomainHistoryArgs struct {
	// The ID of the domain object
	DomainId *string `pulumi:"domainId"`
	// The version number of the domain
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a ApplyDomainHistory resource.
type ApplyDomainHistoryArgs struct {
	// The ID of the domain object
	DomainId pulumi.StringPtrInput
	// The version number of the domain
	Version pulumi.StringPtrInput
}

func (ApplyDomainHistoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applyDomainHistoryArgs)(nil)).Elem()
}

type ApplyDomainHistoryInput interface {
	pulumi.Input

	ToApplyDomainHistoryOutput() ApplyDomainHistoryOutput
	ToApplyDomainHistoryOutputWithContext(ctx context.Context) ApplyDomainHistoryOutput
}

func (*ApplyDomainHistory) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplyDomainHistory)(nil)).Elem()
}

func (i *ApplyDomainHistory) ToApplyDomainHistoryOutput() ApplyDomainHistoryOutput {
	return i.ToApplyDomainHistoryOutputWithContext(context.Background())
}

func (i *ApplyDomainHistory) ToApplyDomainHistoryOutputWithContext(ctx context.Context) ApplyDomainHistoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplyDomainHistoryOutput)
}

type ApplyDomainHistoryOutput struct{ *pulumi.OutputState }

func (ApplyDomainHistoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplyDomainHistory)(nil)).Elem()
}

func (o ApplyDomainHistoryOutput) ToApplyDomainHistoryOutput() ApplyDomainHistoryOutput {
	return o
}

func (o ApplyDomainHistoryOutput) ToApplyDomainHistoryOutputWithContext(ctx context.Context) ApplyDomainHistoryOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplyDomainHistoryInput)(nil)).Elem(), &ApplyDomainHistory{})
	pulumi.RegisterOutputType(ApplyDomainHistoryOutput{})
}
