// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domains

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-constellix/sdk/go/constellix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Spf struct {
	pulumi.CustomResourceState

	// Contact lists to be notified if a failover happens in a failover mode.
	Contacts pulumi.IntArrayOutput   `pulumi:"contacts"`
	Data     DataPropertiesPtrOutput `pulumi:"data"`
	// Whether the record is enabled
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Disable the record if all hosts fail. If all hosts fail, another matching IP Filter, nearest Proximity or World (Default) record will be used instead.
	GeoFailover pulumi.BoolPtrOutput `pulumi:"geoFailover"`
	// The integer ID of a GeoProximity to use for this record. Cannot be used with IP Filter.
	Geoproximity pulumi.IntPtrOutput `pulumi:"geoproximity"`
	// The integer ID of an IP Filter to use for this record. Cannot be used with GeoPeoximity.
	Ipfilter pulumi.IntPtrOutput `pulumi:"ipfilter"`
	// If the requesting IP matches the IP filter, don't return a response
	IpfilterDrop pulumi.BoolPtrOutput `pulumi:"ipfilterDrop"`
	// The current mode for this record
	Mode SpfPropertiesModePtrOutput `pulumi:"mode"`
	// The name for the record
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// A description of the record. It must be 512 characters or less.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// Optional region for this record. Will default to 'default'.
	Region RecordCreateDetailsRegionPtrOutput `pulumi:"region"`
	// Only used on POST or PATCH requests for ANAME records, used to specify whether the hostname should be looked up immediately. Will be null otherwise.
	SkipLookup pulumi.BoolPtrOutput `pulumi:"skipLookup"`
	// How long DNS servers should cache the record for
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
	// The type of record
	Type SpfPropertiesTypePtrOutput `pulumi:"type"`
	// Standard record mode
	Value ValueSpfValueItemPropertiesArrayOutput `pulumi:"value"`
}

// NewSpf registers a new resource with the given unique name, arguments, and options.
func NewSpf(ctx *pulumi.Context,
	name string, args *SpfArgs, opts ...pulumi.ResourceOption) (*Spf, error) {
	if args == nil {
		args = &SpfArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Spf
	err := ctx.RegisterResource("constellix:domains:Spf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpf gets an existing Spf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpfState, opts ...pulumi.ResourceOption) (*Spf, error) {
	var resource Spf
	err := ctx.ReadResource("constellix:domains:Spf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Spf resources.
type spfState struct {
}

type SpfState struct {
}

func (SpfState) ElementType() reflect.Type {
	return reflect.TypeOf((*spfState)(nil)).Elem()
}

type spfArgs struct {
	// Contact lists to be notified if a failover happens in a failover mode.
	Contacts []int `pulumi:"contacts"`
	// The ID of the domain object
	DomainId *string `pulumi:"domainId"`
	// Whether the record is enabled
	Enabled *bool `pulumi:"enabled"`
	// Disable the record if all hosts fail. If all hosts fail, another matching IP Filter, nearest Proximity or World (Default) record will be used instead.
	GeoFailover *bool `pulumi:"geoFailover"`
	// The integer ID of a GeoProximity to use for this record. Cannot be used with IP Filter.
	Geoproximity *int `pulumi:"geoproximity"`
	// The integer ID of an IP Filter to use for this record. Cannot be used with GeoPeoximity.
	Ipfilter *int `pulumi:"ipfilter"`
	// If the requesting IP matches the IP filter, don't return a response
	IpfilterDrop *bool `pulumi:"ipfilterDrop"`
	// The current mode for this record
	Mode *SpfPropertiesMode `pulumi:"mode"`
	// The name for the record
	Name *string `pulumi:"name"`
	// A description of the record. It must be 512 characters or less.
	Notes *string `pulumi:"notes"`
	// Optional region for this record. Will default to 'default'.
	Region *RecordCreateDetailsRegion `pulumi:"region"`
	// Only used on POST or PATCH requests for ANAME records, used to specify whether the hostname should be looked up immediately. Will be null otherwise.
	SkipLookup *bool `pulumi:"skipLookup"`
	// How long DNS servers should cache the record for
	Ttl *int `pulumi:"ttl"`
	// The type of record
	Type *SpfPropertiesType `pulumi:"type"`
	// Standard record mode
	Value []ValueSpfValueItemProperties `pulumi:"value"`
}

// The set of arguments for constructing a Spf resource.
type SpfArgs struct {
	// Contact lists to be notified if a failover happens in a failover mode.
	Contacts pulumi.IntArrayInput
	// The ID of the domain object
	DomainId pulumi.StringPtrInput
	// Whether the record is enabled
	Enabled pulumi.BoolPtrInput
	// Disable the record if all hosts fail. If all hosts fail, another matching IP Filter, nearest Proximity or World (Default) record will be used instead.
	GeoFailover pulumi.BoolPtrInput
	// The integer ID of a GeoProximity to use for this record. Cannot be used with IP Filter.
	Geoproximity pulumi.IntPtrInput
	// The integer ID of an IP Filter to use for this record. Cannot be used with GeoPeoximity.
	Ipfilter pulumi.IntPtrInput
	// If the requesting IP matches the IP filter, don't return a response
	IpfilterDrop pulumi.BoolPtrInput
	// The current mode for this record
	Mode SpfPropertiesModePtrInput
	// The name for the record
	Name pulumi.StringPtrInput
	// A description of the record. It must be 512 characters or less.
	Notes pulumi.StringPtrInput
	// Optional region for this record. Will default to 'default'.
	Region RecordCreateDetailsRegionPtrInput
	// Only used on POST or PATCH requests for ANAME records, used to specify whether the hostname should be looked up immediately. Will be null otherwise.
	SkipLookup pulumi.BoolPtrInput
	// How long DNS servers should cache the record for
	Ttl pulumi.IntPtrInput
	// The type of record
	Type SpfPropertiesTypePtrInput
	// Standard record mode
	Value ValueSpfValueItemPropertiesArrayInput
}

func (SpfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spfArgs)(nil)).Elem()
}

type SpfInput interface {
	pulumi.Input

	ToSpfOutput() SpfOutput
	ToSpfOutputWithContext(ctx context.Context) SpfOutput
}

func (*Spf) ElementType() reflect.Type {
	return reflect.TypeOf((**Spf)(nil)).Elem()
}

func (i *Spf) ToSpfOutput() SpfOutput {
	return i.ToSpfOutputWithContext(context.Background())
}

func (i *Spf) ToSpfOutputWithContext(ctx context.Context) SpfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpfOutput)
}

type SpfOutput struct{ *pulumi.OutputState }

func (SpfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Spf)(nil)).Elem()
}

func (o SpfOutput) ToSpfOutput() SpfOutput {
	return o
}

func (o SpfOutput) ToSpfOutputWithContext(ctx context.Context) SpfOutput {
	return o
}

// Contact lists to be notified if a failover happens in a failover mode.
func (o SpfOutput) Contacts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Spf) pulumi.IntArrayOutput { return v.Contacts }).(pulumi.IntArrayOutput)
}

func (o SpfOutput) Data() DataPropertiesPtrOutput {
	return o.ApplyT(func(v *Spf) DataPropertiesPtrOutput { return v.Data }).(DataPropertiesPtrOutput)
}

// Whether the record is enabled
func (o SpfOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Spf) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Disable the record if all hosts fail. If all hosts fail, another matching IP Filter, nearest Proximity or World (Default) record will be used instead.
func (o SpfOutput) GeoFailover() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Spf) pulumi.BoolPtrOutput { return v.GeoFailover }).(pulumi.BoolPtrOutput)
}

// The integer ID of a GeoProximity to use for this record. Cannot be used with IP Filter.
func (o SpfOutput) Geoproximity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Spf) pulumi.IntPtrOutput { return v.Geoproximity }).(pulumi.IntPtrOutput)
}

// The integer ID of an IP Filter to use for this record. Cannot be used with GeoPeoximity.
func (o SpfOutput) Ipfilter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Spf) pulumi.IntPtrOutput { return v.Ipfilter }).(pulumi.IntPtrOutput)
}

// If the requesting IP matches the IP filter, don't return a response
func (o SpfOutput) IpfilterDrop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Spf) pulumi.BoolPtrOutput { return v.IpfilterDrop }).(pulumi.BoolPtrOutput)
}

// The current mode for this record
func (o SpfOutput) Mode() SpfPropertiesModePtrOutput {
	return o.ApplyT(func(v *Spf) SpfPropertiesModePtrOutput { return v.Mode }).(SpfPropertiesModePtrOutput)
}

// The name for the record
func (o SpfOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Spf) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// A description of the record. It must be 512 characters or less.
func (o SpfOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Spf) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

// Optional region for this record. Will default to 'default'.
func (o SpfOutput) Region() RecordCreateDetailsRegionPtrOutput {
	return o.ApplyT(func(v *Spf) RecordCreateDetailsRegionPtrOutput { return v.Region }).(RecordCreateDetailsRegionPtrOutput)
}

// Only used on POST or PATCH requests for ANAME records, used to specify whether the hostname should be looked up immediately. Will be null otherwise.
func (o SpfOutput) SkipLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Spf) pulumi.BoolPtrOutput { return v.SkipLookup }).(pulumi.BoolPtrOutput)
}

// How long DNS servers should cache the record for
func (o SpfOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Spf) pulumi.IntPtrOutput { return v.Ttl }).(pulumi.IntPtrOutput)
}

// The type of record
func (o SpfOutput) Type() SpfPropertiesTypePtrOutput {
	return o.ApplyT(func(v *Spf) SpfPropertiesTypePtrOutput { return v.Type }).(SpfPropertiesTypePtrOutput)
}

// Standard record mode
func (o SpfOutput) Value() ValueSpfValueItemPropertiesArrayOutput {
	return o.ApplyT(func(v *Spf) ValueSpfValueItemPropertiesArrayOutput { return v.Value }).(ValueSpfValueItemPropertiesArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpfInput)(nil)).Elem(), &Spf{})
	pulumi.RegisterOutputType(SpfOutput{})
}
