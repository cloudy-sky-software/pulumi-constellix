// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domains

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-constellix/sdk/go/constellix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Domain struct {
	pulumi.CustomResourceState

	// Contactlists to be notified if the domain is updated
	Contacts pulumi.IntArrayOutput   `pulumi:"contacts"`
	Data     DataPropertiesPtrOutput `pulumi:"data"`
	// Is the domain enabled
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Is GeoIP functionality enabled for the domain
	Geoip pulumi.BoolPtrOutput `pulumi:"geoip"`
	// Is Global Traffic Director enabled for the domain
	Gtd pulumi.BoolPtrOutput `pulumi:"gtd"`
	// The name of the domain
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// A note for the domain
	Note pulumi.StringPtrOutput `pulumi:"note"`
	// The SOA details for the domain
	Soa SoaPropertiesPtrOutput `pulumi:"soa"`
	// The numeric IDs of tags you want to apply to this domain
	Tags pulumi.IntArrayOutput `pulumi:"tags"`
	// The template to use for creating this domain. It will be linked to this template so any changes made to the template will apply to this domain.
	Template pulumi.IntPtrOutput `pulumi:"template"`
	// The vanity nameserver to use for this domain.
	VanityNameserver pulumi.IntPtrOutput `pulumi:"vanityNameserver"`
}

// NewDomain registers a new resource with the given unique name, arguments, and options.
func NewDomain(ctx *pulumi.Context,
	name string, args *DomainArgs, opts ...pulumi.ResourceOption) (*Domain, error) {
	if args == nil {
		args = &DomainArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Domain
	err := ctx.RegisterResource("constellix:domains:Domain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomain gets an existing Domain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainState, opts ...pulumi.ResourceOption) (*Domain, error) {
	var resource Domain
	err := ctx.ReadResource("constellix:domains:Domain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Domain resources.
type domainState struct {
}

type DomainState struct {
}

func (DomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainState)(nil)).Elem()
}

type domainArgs struct {
	// Contactlists to be notified if the domain is updated
	Contacts []int `pulumi:"contacts"`
	// Is the domain enabled
	Enabled *bool `pulumi:"enabled"`
	// Is GeoIP functionality enabled for the domain
	Geoip *bool `pulumi:"geoip"`
	// Is Global Traffic Director enabled for the domain
	Gtd *bool `pulumi:"gtd"`
	// The name of the domain
	Name *string `pulumi:"name"`
	// A note for the domain
	Note *string `pulumi:"note"`
	// The SOA details for the domain
	Soa *SoaProperties `pulumi:"soa"`
	// The numeric IDs of tags you want to apply to this domain
	Tags []int `pulumi:"tags"`
	// The template to use for creating this domain. It will be linked to this template so any changes made to the template will apply to this domain.
	Template *int `pulumi:"template"`
	// The vanity nameserver to use for this domain.
	VanityNameserver *int `pulumi:"vanityNameserver"`
}

// The set of arguments for constructing a Domain resource.
type DomainArgs struct {
	// Contactlists to be notified if the domain is updated
	Contacts pulumi.IntArrayInput
	// Is the domain enabled
	Enabled pulumi.BoolPtrInput
	// Is GeoIP functionality enabled for the domain
	Geoip pulumi.BoolPtrInput
	// Is Global Traffic Director enabled for the domain
	Gtd pulumi.BoolPtrInput
	// The name of the domain
	Name pulumi.StringPtrInput
	// A note for the domain
	Note pulumi.StringPtrInput
	// The SOA details for the domain
	Soa SoaPropertiesPtrInput
	// The numeric IDs of tags you want to apply to this domain
	Tags pulumi.IntArrayInput
	// The template to use for creating this domain. It will be linked to this template so any changes made to the template will apply to this domain.
	Template pulumi.IntPtrInput
	// The vanity nameserver to use for this domain.
	VanityNameserver pulumi.IntPtrInput
}

func (DomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainArgs)(nil)).Elem()
}

type DomainInput interface {
	pulumi.Input

	ToDomainOutput() DomainOutput
	ToDomainOutputWithContext(ctx context.Context) DomainOutput
}

func (*Domain) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (i *Domain) ToDomainOutput() DomainOutput {
	return i.ToDomainOutputWithContext(context.Background())
}

func (i *Domain) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOutput)
}

type DomainOutput struct{ *pulumi.OutputState }

func (DomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (o DomainOutput) ToDomainOutput() DomainOutput {
	return o
}

func (o DomainOutput) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return o
}

// Contactlists to be notified if the domain is updated
func (o DomainOutput) Contacts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Domain) pulumi.IntArrayOutput { return v.Contacts }).(pulumi.IntArrayOutput)
}

func (o DomainOutput) Data() DataPropertiesPtrOutput {
	return o.ApplyT(func(v *Domain) DataPropertiesPtrOutput { return v.Data }).(DataPropertiesPtrOutput)
}

// Is the domain enabled
func (o DomainOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Is GeoIP functionality enabled for the domain
func (o DomainOutput) Geoip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.BoolPtrOutput { return v.Geoip }).(pulumi.BoolPtrOutput)
}

// Is Global Traffic Director enabled for the domain
func (o DomainOutput) Gtd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.BoolPtrOutput { return v.Gtd }).(pulumi.BoolPtrOutput)
}

// The name of the domain
func (o DomainOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// A note for the domain
func (o DomainOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringPtrOutput { return v.Note }).(pulumi.StringPtrOutput)
}

// The SOA details for the domain
func (o DomainOutput) Soa() SoaPropertiesPtrOutput {
	return o.ApplyT(func(v *Domain) SoaPropertiesPtrOutput { return v.Soa }).(SoaPropertiesPtrOutput)
}

// The numeric IDs of tags you want to apply to this domain
func (o DomainOutput) Tags() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Domain) pulumi.IntArrayOutput { return v.Tags }).(pulumi.IntArrayOutput)
}

// The template to use for creating this domain. It will be linked to this template so any changes made to the template will apply to this domain.
func (o DomainOutput) Template() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.IntPtrOutput { return v.Template }).(pulumi.IntPtrOutput)
}

// The vanity nameserver to use for this domain.
func (o DomainOutput) VanityNameserver() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.IntPtrOutput { return v.VanityNameserver }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInput)(nil)).Elem(), &Domain{})
	pulumi.RegisterOutputType(DomainOutput{})
}
