// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domains

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-constellix/sdk/go/constellix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupDomain(ctx *pulumi.Context, args *LookupDomainArgs, opts ...pulumi.InvokeOption) (*LookupDomainResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDomainResult
	err := ctx.Invoke("constellix:domains:getDomain", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDomainArgs struct {
	// The ID of the domain object
	Id string `pulumi:"id"`
}

type LookupDomainResult struct {
	Data *DomainType `pulumi:"data"`
}

func LookupDomainOutput(ctx *pulumi.Context, args LookupDomainOutputArgs, opts ...pulumi.InvokeOption) LookupDomainResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDomainResultOutput, error) {
			args := v.(LookupDomainArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupDomainResult
			secret, err := ctx.InvokePackageRaw("constellix:domains:getDomain", args, &rv, "", opts...)
			if err != nil {
				return LookupDomainResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupDomainResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupDomainResultOutput), nil
			}
			return output, nil
		}).(LookupDomainResultOutput)
}

type LookupDomainOutputArgs struct {
	// The ID of the domain object
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupDomainOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainArgs)(nil)).Elem()
}

type LookupDomainResultOutput struct{ *pulumi.OutputState }

func (LookupDomainResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainResult)(nil)).Elem()
}

func (o LookupDomainResultOutput) ToLookupDomainResultOutput() LookupDomainResultOutput {
	return o
}

func (o LookupDomainResultOutput) ToLookupDomainResultOutputWithContext(ctx context.Context) LookupDomainResultOutput {
	return o
}

func (o LookupDomainResultOutput) Data() DomainTypePtrOutput {
	return o.ApplyT(func(v LookupDomainResult) *DomainType { return v.Data }).(DomainTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDomainResultOutput{})
}
