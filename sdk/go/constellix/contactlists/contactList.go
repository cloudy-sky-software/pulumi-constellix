// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package contactlists

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-constellix/sdk/go/constellix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Lists of email addresses used for notifications and messages about domains and records.
type ContactList struct {
	pulumi.CustomResourceState

	Data DataPropertiesPtrOutput `pulumi:"data"`
	// The emails in this list
	Emails pulumi.StringArrayOutput `pulumi:"emails"`
	// A name for this contact list
	Name pulumi.StringPtrOutput `pulumi:"name"`
}

// NewContactList registers a new resource with the given unique name, arguments, and options.
func NewContactList(ctx *pulumi.Context,
	name string, args *ContactListArgs, opts ...pulumi.ResourceOption) (*ContactList, error) {
	if args == nil {
		args = &ContactListArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContactList
	err := ctx.RegisterResource("constellix:contactlists:ContactList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContactList gets an existing ContactList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContactList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContactListState, opts ...pulumi.ResourceOption) (*ContactList, error) {
	var resource ContactList
	err := ctx.ReadResource("constellix:contactlists:ContactList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContactList resources.
type contactListState struct {
}

type ContactListState struct {
}

func (ContactListState) ElementType() reflect.Type {
	return reflect.TypeOf((*contactListState)(nil)).Elem()
}

type contactListArgs struct {
	// The emails in this list
	Emails []string `pulumi:"emails"`
	// A name for this contact list
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ContactList resource.
type ContactListArgs struct {
	// The emails in this list
	Emails pulumi.StringArrayInput
	// A name for this contact list
	Name pulumi.StringPtrInput
}

func (ContactListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contactListArgs)(nil)).Elem()
}

type ContactListInput interface {
	pulumi.Input

	ToContactListOutput() ContactListOutput
	ToContactListOutputWithContext(ctx context.Context) ContactListOutput
}

func (*ContactList) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactList)(nil)).Elem()
}

func (i *ContactList) ToContactListOutput() ContactListOutput {
	return i.ToContactListOutputWithContext(context.Background())
}

func (i *ContactList) ToContactListOutputWithContext(ctx context.Context) ContactListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactListOutput)
}

type ContactListOutput struct{ *pulumi.OutputState }

func (ContactListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactList)(nil)).Elem()
}

func (o ContactListOutput) ToContactListOutput() ContactListOutput {
	return o
}

func (o ContactListOutput) ToContactListOutputWithContext(ctx context.Context) ContactListOutput {
	return o
}

func (o ContactListOutput) Data() DataPropertiesPtrOutput {
	return o.ApplyT(func(v *ContactList) DataPropertiesPtrOutput { return v.Data }).(DataPropertiesPtrOutput)
}

// The emails in this list
func (o ContactListOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContactList) pulumi.StringArrayOutput { return v.Emails }).(pulumi.StringArrayOutput)
}

// A name for this contact list
func (o ContactListOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactList) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactListInput)(nil)).Elem(), &ContactList{})
	pulumi.RegisterOutputType(ContactListOutput{})
}
