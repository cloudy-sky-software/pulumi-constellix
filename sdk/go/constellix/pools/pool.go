// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pools

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-constellix/sdk/go/constellix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Pool struct {
	pulumi.CustomResourceState

	// Contact lists to be emailed when this pool changes
	Contacts pulumi.IntArrayOutput   `pulumi:"contacts"`
	Data     DataPropertiesPtrOutput `pulumi:"data"`
	// Whether the pool is enabled or not
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	Ito     PoolitoPtrOutput     `pulumi:"ito"`
	// The number of records that must be available for this pool to be used for failover. Between 0 and 64.
	MinimumFailover pulumi.IntPtrOutput `pulumi:"minimumFailover"`
	// A name for the pool
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The minimum number of entries from the pool to return when queried. Between 0 and 64.
	Return pulumi.IntPtrOutput `pulumi:"return"`
	// The type of pool, either A, AAAA or CNAME
	Type TypePtrOutput `pulumi:"type"`
	// The values for this pool
	Values ValuesItemPropertiesArrayOutput `pulumi:"values"`
}

// NewPool registers a new resource with the given unique name, arguments, and options.
func NewPool(ctx *pulumi.Context,
	name string, args *PoolArgs, opts ...pulumi.ResourceOption) (*Pool, error) {
	if args == nil {
		args = &PoolArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pool
	err := ctx.RegisterResource("constellix:pools:Pool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPool gets an existing Pool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PoolState, opts ...pulumi.ResourceOption) (*Pool, error) {
	var resource Pool
	err := ctx.ReadResource("constellix:pools:Pool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pool resources.
type poolState struct {
}

type PoolState struct {
}

func (PoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*poolState)(nil)).Elem()
}

type poolArgs struct {
	// Contact lists to be emailed when this pool changes
	Contacts []int `pulumi:"contacts"`
	// Whether the pool is enabled or not
	Enabled *bool    `pulumi:"enabled"`
	Ito     *Poolito `pulumi:"ito"`
	// The number of records that must be available for this pool to be used for failover. Between 0 and 64.
	MinimumFailover *int `pulumi:"minimumFailover"`
	// A name for the pool
	Name *string `pulumi:"name"`
	// The minimum number of entries from the pool to return when queried. Between 0 and 64.
	Return *int `pulumi:"return"`
	// The type of pool, either A, AAAA or CNAME
	Type *Type `pulumi:"type"`
	// The values for this pool
	Values []ValuesItemProperties `pulumi:"values"`
}

// The set of arguments for constructing a Pool resource.
type PoolArgs struct {
	// Contact lists to be emailed when this pool changes
	Contacts pulumi.IntArrayInput
	// Whether the pool is enabled or not
	Enabled pulumi.BoolPtrInput
	Ito     PoolitoPtrInput
	// The number of records that must be available for this pool to be used for failover. Between 0 and 64.
	MinimumFailover pulumi.IntPtrInput
	// A name for the pool
	Name pulumi.StringPtrInput
	// The minimum number of entries from the pool to return when queried. Between 0 and 64.
	Return pulumi.IntPtrInput
	// The type of pool, either A, AAAA or CNAME
	Type TypePtrInput
	// The values for this pool
	Values ValuesItemPropertiesArrayInput
}

func (PoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*poolArgs)(nil)).Elem()
}

type PoolInput interface {
	pulumi.Input

	ToPoolOutput() PoolOutput
	ToPoolOutputWithContext(ctx context.Context) PoolOutput
}

func (*Pool) ElementType() reflect.Type {
	return reflect.TypeOf((**Pool)(nil)).Elem()
}

func (i *Pool) ToPoolOutput() PoolOutput {
	return i.ToPoolOutputWithContext(context.Background())
}

func (i *Pool) ToPoolOutputWithContext(ctx context.Context) PoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolOutput)
}

type PoolOutput struct{ *pulumi.OutputState }

func (PoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pool)(nil)).Elem()
}

func (o PoolOutput) ToPoolOutput() PoolOutput {
	return o
}

func (o PoolOutput) ToPoolOutputWithContext(ctx context.Context) PoolOutput {
	return o
}

// Contact lists to be emailed when this pool changes
func (o PoolOutput) Contacts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Pool) pulumi.IntArrayOutput { return v.Contacts }).(pulumi.IntArrayOutput)
}

func (o PoolOutput) Data() DataPropertiesPtrOutput {
	return o.ApplyT(func(v *Pool) DataPropertiesPtrOutput { return v.Data }).(DataPropertiesPtrOutput)
}

// Whether the pool is enabled or not
func (o PoolOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o PoolOutput) Ito() PoolitoPtrOutput {
	return o.ApplyT(func(v *Pool) PoolitoPtrOutput { return v.Ito }).(PoolitoPtrOutput)
}

// The number of records that must be available for this pool to be used for failover. Between 0 and 64.
func (o PoolOutput) MinimumFailover() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.IntPtrOutput { return v.MinimumFailover }).(pulumi.IntPtrOutput)
}

// A name for the pool
func (o PoolOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The minimum number of entries from the pool to return when queried. Between 0 and 64.
func (o PoolOutput) Return() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.IntPtrOutput { return v.Return }).(pulumi.IntPtrOutput)
}

// The type of pool, either A, AAAA or CNAME
func (o PoolOutput) Type() TypePtrOutput {
	return o.ApplyT(func(v *Pool) TypePtrOutput { return v.Type }).(TypePtrOutput)
}

// The values for this pool
func (o PoolOutput) Values() ValuesItemPropertiesArrayOutput {
	return o.ApplyT(func(v *Pool) ValuesItemPropertiesArrayOutput { return v.Values }).(ValuesItemPropertiesArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PoolInput)(nil)).Elem(), &Pool{})
	pulumi.RegisterOutputType(PoolOutput{})
}
