// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pools

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-constellix/sdk/go/constellix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupPool(ctx *pulumi.Context, args *LookupPoolArgs, opts ...pulumi.InvokeOption) (*LookupPoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPoolResult
	err := ctx.Invoke("constellix:pools:getPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPoolArgs struct {
	// The ID of the pool
	Id string `pulumi:"id"`
	// The type of pool
	Type string `pulumi:"type"`
}

type LookupPoolResult struct {
	Data *PoolType `pulumi:"data"`
}

func LookupPoolOutput(ctx *pulumi.Context, args LookupPoolOutputArgs, opts ...pulumi.InvokeOption) LookupPoolResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPoolResultOutput, error) {
			args := v.(LookupPoolArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupPoolResult
			secret, err := ctx.InvokePackageRaw("constellix:pools:getPool", args, &rv, "", opts...)
			if err != nil {
				return LookupPoolResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupPoolResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupPoolResultOutput), nil
			}
			return output, nil
		}).(LookupPoolResultOutput)
}

type LookupPoolOutputArgs struct {
	// The ID of the pool
	Id pulumi.StringInput `pulumi:"id"`
	// The type of pool
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPoolArgs)(nil)).Elem()
}

type LookupPoolResultOutput struct{ *pulumi.OutputState }

func (LookupPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPoolResult)(nil)).Elem()
}

func (o LookupPoolResultOutput) ToLookupPoolResultOutput() LookupPoolResultOutput {
	return o
}

func (o LookupPoolResultOutput) ToLookupPoolResultOutputWithContext(ctx context.Context) LookupPoolResultOutput {
	return o
}

func (o LookupPoolResultOutput) Data() PoolTypePtrOutput {
	return o.ApplyT(func(v LookupPoolResult) *PoolType { return v.Data }).(PoolTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPoolResultOutput{})
}
