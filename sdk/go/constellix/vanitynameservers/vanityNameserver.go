// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vanitynameservers

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-constellix/sdk/go/constellix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A rebranded nameserver using your own domain name.
type VanityNameserver struct {
	pulumi.CustomResourceState

	Data DataPropertiesPtrOutput `pulumi:"data"`
	// Is this the default nameserver for domains in the account
	Default pulumi.BoolPtrOutput `pulumi:"default"`
	// A unique name for this vanity nameserver
	Name            pulumi.StringPtrOutput             `pulumi:"name"`
	NameserverGroup NameserverGroupPropertiesPtrOutput `pulumi:"nameserverGroup"`
	// The nameserver hostnames
	Nameservers pulumi.StringArrayOutput `pulumi:"nameservers"`
}

// NewVanityNameserver registers a new resource with the given unique name, arguments, and options.
func NewVanityNameserver(ctx *pulumi.Context,
	name string, args *VanityNameserverArgs, opts ...pulumi.ResourceOption) (*VanityNameserver, error) {
	if args == nil {
		args = &VanityNameserverArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VanityNameserver
	err := ctx.RegisterResource("constellix:vanitynameservers:VanityNameserver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVanityNameserver gets an existing VanityNameserver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVanityNameserver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VanityNameserverState, opts ...pulumi.ResourceOption) (*VanityNameserver, error) {
	var resource VanityNameserver
	err := ctx.ReadResource("constellix:vanitynameservers:VanityNameserver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VanityNameserver resources.
type vanityNameserverState struct {
}

type VanityNameserverState struct {
}

func (VanityNameserverState) ElementType() reflect.Type {
	return reflect.TypeOf((*vanityNameserverState)(nil)).Elem()
}

type vanityNameserverArgs struct {
	// Is this the default nameserver for domains in the account
	Default *bool `pulumi:"default"`
	// A unique name for this vanity nameserver
	Name            *string                    `pulumi:"name"`
	NameserverGroup *NameserverGroupProperties `pulumi:"nameserverGroup"`
	// The nameserver hostnames
	Nameservers []string `pulumi:"nameservers"`
}

// The set of arguments for constructing a VanityNameserver resource.
type VanityNameserverArgs struct {
	// Is this the default nameserver for domains in the account
	Default pulumi.BoolPtrInput
	// A unique name for this vanity nameserver
	Name            pulumi.StringPtrInput
	NameserverGroup NameserverGroupPropertiesPtrInput
	// The nameserver hostnames
	Nameservers pulumi.StringArrayInput
}

func (VanityNameserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vanityNameserverArgs)(nil)).Elem()
}

type VanityNameserverInput interface {
	pulumi.Input

	ToVanityNameserverOutput() VanityNameserverOutput
	ToVanityNameserverOutputWithContext(ctx context.Context) VanityNameserverOutput
}

func (*VanityNameserver) ElementType() reflect.Type {
	return reflect.TypeOf((**VanityNameserver)(nil)).Elem()
}

func (i *VanityNameserver) ToVanityNameserverOutput() VanityNameserverOutput {
	return i.ToVanityNameserverOutputWithContext(context.Background())
}

func (i *VanityNameserver) ToVanityNameserverOutputWithContext(ctx context.Context) VanityNameserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VanityNameserverOutput)
}

type VanityNameserverOutput struct{ *pulumi.OutputState }

func (VanityNameserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VanityNameserver)(nil)).Elem()
}

func (o VanityNameserverOutput) ToVanityNameserverOutput() VanityNameserverOutput {
	return o
}

func (o VanityNameserverOutput) ToVanityNameserverOutputWithContext(ctx context.Context) VanityNameserverOutput {
	return o
}

func (o VanityNameserverOutput) Data() DataPropertiesPtrOutput {
	return o.ApplyT(func(v *VanityNameserver) DataPropertiesPtrOutput { return v.Data }).(DataPropertiesPtrOutput)
}

// Is this the default nameserver for domains in the account
func (o VanityNameserverOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VanityNameserver) pulumi.BoolPtrOutput { return v.Default }).(pulumi.BoolPtrOutput)
}

// A unique name for this vanity nameserver
func (o VanityNameserverOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VanityNameserver) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o VanityNameserverOutput) NameserverGroup() NameserverGroupPropertiesPtrOutput {
	return o.ApplyT(func(v *VanityNameserver) NameserverGroupPropertiesPtrOutput { return v.NameserverGroup }).(NameserverGroupPropertiesPtrOutput)
}

// The nameserver hostnames
func (o VanityNameserverOutput) Nameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VanityNameserver) pulumi.StringArrayOutput { return v.Nameservers }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VanityNameserverInput)(nil)).Elem(), &VanityNameserver{})
	pulumi.RegisterOutputType(VanityNameserverOutput{})
}
