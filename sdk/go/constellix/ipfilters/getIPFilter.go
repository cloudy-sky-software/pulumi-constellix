// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipfilters

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-constellix/sdk/go/constellix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupIPFilter(ctx *pulumi.Context, args *LookupIPFilterArgs, opts ...pulumi.InvokeOption) (*LookupIPFilterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIPFilterResult
	err := ctx.Invoke("constellix:ipfilters:getIPFilter", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupIPFilterArgs struct {
	// The ID of the IP Filter
	Id string `pulumi:"id"`
}

type LookupIPFilterResult struct {
	Data *IpfilterType `pulumi:"data"`
}

func LookupIPFilterOutput(ctx *pulumi.Context, args LookupIPFilterOutputArgs, opts ...pulumi.InvokeOption) LookupIPFilterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIPFilterResultOutput, error) {
			args := v.(LookupIPFilterArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupIPFilterResult
			secret, err := ctx.InvokePackageRaw("constellix:ipfilters:getIPFilter", args, &rv, "", opts...)
			if err != nil {
				return LookupIPFilterResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupIPFilterResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupIPFilterResultOutput), nil
			}
			return output, nil
		}).(LookupIPFilterResultOutput)
}

type LookupIPFilterOutputArgs struct {
	// The ID of the IP Filter
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupIPFilterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIPFilterArgs)(nil)).Elem()
}

type LookupIPFilterResultOutput struct{ *pulumi.OutputState }

func (LookupIPFilterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIPFilterResult)(nil)).Elem()
}

func (o LookupIPFilterResultOutput) ToLookupIPFilterResultOutput() LookupIPFilterResultOutput {
	return o
}

func (o LookupIPFilterResultOutput) ToLookupIPFilterResultOutputWithContext(ctx context.Context) LookupIPFilterResultOutput {
	return o
}

func (o LookupIPFilterResultOutput) Data() IpfilterTypePtrOutput {
	return o.ApplyT(func(v LookupIPFilterResult) *IpfilterType { return v.Data }).(IpfilterTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIPFilterResultOutput{})
}
