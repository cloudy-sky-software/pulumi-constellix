// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipfilters

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-constellix/sdk/go/constellix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IPFilter struct {
	pulumi.CustomResourceState

	// AS Numbers that this rule applies to. Values must be between 0 and 4,294,967,295
	Asn pulumi.IntArrayOutput `pulumi:"asn"`
	// A list of continents in this filter
	Continents ContinentsItemArrayOutput `pulumi:"continents"`
	// 2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
	Countries pulumi.StringArrayOutput `pulumi:"countries"`
	Data      DataPropertiesPtrOutput  `pulumi:"data"`
	// IPv4 addresses and CIDRs that this filter applies to
	Ipv4 pulumi.StringArrayOutput `pulumi:"ipv4"`
	// IPv6 addresses and CIDRs that this filter applies to
	Ipv6 pulumi.StringArrayOutput `pulumi:"ipv6"`
	// The name for this IP filter
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Combinations of Regions, Countries, Continents and optionally ASNs.
	Regions RegionsItemPropertiesArrayOutput `pulumi:"regions"`
	// Values should be multiples of 100. Upper limit is the quota assigned to the account.
	RulesLimit pulumi.IntPtrOutput `pulumi:"rulesLimit"`
}

// NewIPFilter registers a new resource with the given unique name, arguments, and options.
func NewIPFilter(ctx *pulumi.Context,
	name string, args *IPFilterArgs, opts ...pulumi.ResourceOption) (*IPFilter, error) {
	if args == nil {
		args = &IPFilterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IPFilter
	err := ctx.RegisterResource("constellix:ipfilters:IPFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPFilter gets an existing IPFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPFilterState, opts ...pulumi.ResourceOption) (*IPFilter, error) {
	var resource IPFilter
	err := ctx.ReadResource("constellix:ipfilters:IPFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPFilter resources.
type ipfilterState struct {
}

type IPFilterState struct {
}

func (IPFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipfilterState)(nil)).Elem()
}

type ipfilterArgs struct {
	// AS Numbers that this rule applies to. Values must be between 0 and 4,294,967,295
	Asn []int `pulumi:"asn"`
	// A list of continents in this filter
	Continents []ContinentsItem `pulumi:"continents"`
	// 2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
	Countries []string `pulumi:"countries"`
	// IPv4 addresses and CIDRs that this filter applies to
	Ipv4 []string `pulumi:"ipv4"`
	// IPv6 addresses and CIDRs that this filter applies to
	Ipv6 []string `pulumi:"ipv6"`
	// The name for this IP filter
	Name *string `pulumi:"name"`
	// Combinations of Regions, Countries, Continents and optionally ASNs.
	Regions []RegionsItemProperties `pulumi:"regions"`
	// Values should be multiples of 100. Upper limit is the quota assigned to the account.
	RulesLimit *int `pulumi:"rulesLimit"`
}

// The set of arguments for constructing a IPFilter resource.
type IPFilterArgs struct {
	// AS Numbers that this rule applies to. Values must be between 0 and 4,294,967,295
	Asn pulumi.IntArrayInput
	// A list of continents in this filter
	Continents ContinentsItemArrayInput
	// 2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
	Countries pulumi.StringArrayInput
	// IPv4 addresses and CIDRs that this filter applies to
	Ipv4 pulumi.StringArrayInput
	// IPv6 addresses and CIDRs that this filter applies to
	Ipv6 pulumi.StringArrayInput
	// The name for this IP filter
	Name pulumi.StringPtrInput
	// Combinations of Regions, Countries, Continents and optionally ASNs.
	Regions RegionsItemPropertiesArrayInput
	// Values should be multiples of 100. Upper limit is the quota assigned to the account.
	RulesLimit pulumi.IntPtrInput
}

func (IPFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipfilterArgs)(nil)).Elem()
}

type IPFilterInput interface {
	pulumi.Input

	ToIPFilterOutput() IPFilterOutput
	ToIPFilterOutputWithContext(ctx context.Context) IPFilterOutput
}

func (*IPFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**IPFilter)(nil)).Elem()
}

func (i *IPFilter) ToIPFilterOutput() IPFilterOutput {
	return i.ToIPFilterOutputWithContext(context.Background())
}

func (i *IPFilter) ToIPFilterOutputWithContext(ctx context.Context) IPFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPFilterOutput)
}

type IPFilterOutput struct{ *pulumi.OutputState }

func (IPFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPFilter)(nil)).Elem()
}

func (o IPFilterOutput) ToIPFilterOutput() IPFilterOutput {
	return o
}

func (o IPFilterOutput) ToIPFilterOutputWithContext(ctx context.Context) IPFilterOutput {
	return o
}

// AS Numbers that this rule applies to. Values must be between 0 and 4,294,967,295
func (o IPFilterOutput) Asn() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *IPFilter) pulumi.IntArrayOutput { return v.Asn }).(pulumi.IntArrayOutput)
}

// A list of continents in this filter
func (o IPFilterOutput) Continents() ContinentsItemArrayOutput {
	return o.ApplyT(func(v *IPFilter) ContinentsItemArrayOutput { return v.Continents }).(ContinentsItemArrayOutput)
}

// 2 digit ISO code for countries in this filter - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
func (o IPFilterOutput) Countries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IPFilter) pulumi.StringArrayOutput { return v.Countries }).(pulumi.StringArrayOutput)
}

func (o IPFilterOutput) Data() DataPropertiesPtrOutput {
	return o.ApplyT(func(v *IPFilter) DataPropertiesPtrOutput { return v.Data }).(DataPropertiesPtrOutput)
}

// IPv4 addresses and CIDRs that this filter applies to
func (o IPFilterOutput) Ipv4() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IPFilter) pulumi.StringArrayOutput { return v.Ipv4 }).(pulumi.StringArrayOutput)
}

// IPv6 addresses and CIDRs that this filter applies to
func (o IPFilterOutput) Ipv6() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IPFilter) pulumi.StringArrayOutput { return v.Ipv6 }).(pulumi.StringArrayOutput)
}

// The name for this IP filter
func (o IPFilterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPFilter) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Combinations of Regions, Countries, Continents and optionally ASNs.
func (o IPFilterOutput) Regions() RegionsItemPropertiesArrayOutput {
	return o.ApplyT(func(v *IPFilter) RegionsItemPropertiesArrayOutput { return v.Regions }).(RegionsItemPropertiesArrayOutput)
}

// Values should be multiples of 100. Upper limit is the quota assigned to the account.
func (o IPFilterOutput) RulesLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IPFilter) pulumi.IntPtrOutput { return v.RulesLimit }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPFilterInput)(nil)).Elem(), &IPFilter{})
	pulumi.RegisterOutputType(IPFilterOutput{})
}
