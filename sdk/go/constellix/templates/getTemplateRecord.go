// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package templates

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-constellix/sdk/go/constellix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupTemplateRecord(ctx *pulumi.Context, args *LookupTemplateRecordArgs, opts ...pulumi.InvokeOption) (*LookupTemplateRecordResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTemplateRecordResult
	err := ctx.Invoke("constellix:templates:getTemplateRecord", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTemplateRecordArgs struct {
	// The ID of the record
	Id string `pulumi:"id"`
	// The ID of the template object
	TemplateId string `pulumi:"templateId"`
}

type LookupTemplateRecordResult struct {
	// Links for the domain record
	Links    *TemplaterecordPropertiesLinksProperties `pulumi:"links"`
	Template *SimpleTemplate                          `pulumi:"template"`
}

func LookupTemplateRecordOutput(ctx *pulumi.Context, args LookupTemplateRecordOutputArgs, opts ...pulumi.InvokeOption) LookupTemplateRecordResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTemplateRecordResultOutput, error) {
			args := v.(LookupTemplateRecordArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupTemplateRecordResult
			secret, err := ctx.InvokePackageRaw("constellix:templates:getTemplateRecord", args, &rv, "", opts...)
			if err != nil {
				return LookupTemplateRecordResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupTemplateRecordResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupTemplateRecordResultOutput), nil
			}
			return output, nil
		}).(LookupTemplateRecordResultOutput)
}

type LookupTemplateRecordOutputArgs struct {
	// The ID of the record
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the template object
	TemplateId pulumi.StringInput `pulumi:"templateId"`
}

func (LookupTemplateRecordOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTemplateRecordArgs)(nil)).Elem()
}

type LookupTemplateRecordResultOutput struct{ *pulumi.OutputState }

func (LookupTemplateRecordResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTemplateRecordResult)(nil)).Elem()
}

func (o LookupTemplateRecordResultOutput) ToLookupTemplateRecordResultOutput() LookupTemplateRecordResultOutput {
	return o
}

func (o LookupTemplateRecordResultOutput) ToLookupTemplateRecordResultOutputWithContext(ctx context.Context) LookupTemplateRecordResultOutput {
	return o
}

// Links for the domain record
func (o LookupTemplateRecordResultOutput) Links() TemplaterecordPropertiesLinksPropertiesPtrOutput {
	return o.ApplyT(func(v LookupTemplateRecordResult) *TemplaterecordPropertiesLinksProperties { return v.Links }).(TemplaterecordPropertiesLinksPropertiesPtrOutput)
}

func (o LookupTemplateRecordResultOutput) Template() SimpleTemplatePtrOutput {
	return o.ApplyT(func(v LookupTemplateRecordResult) *SimpleTemplate { return v.Template }).(SimpleTemplatePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTemplateRecordResultOutput{})
}
