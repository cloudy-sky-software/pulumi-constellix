// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package templates

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-constellix/sdk/go/constellix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Cert struct {
	pulumi.CustomResourceState

	// Contact lists to be notified if a failover happens in a failover mode.
	Contacts pulumi.IntArrayOutput   `pulumi:"contacts"`
	Data     DataPropertiesPtrOutput `pulumi:"data"`
	// Whether the record is enabled
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Disable the record if all hosts fail. If all hosts fail, another matching IP Filter, nearest Proximity or World (Default) record will be used instead.
	GeoFailover pulumi.BoolPtrOutput `pulumi:"geoFailover"`
	// The integer ID of a GeoProximity to use for this record. Cannot be used with IP Filter.
	Geoproximity pulumi.IntPtrOutput `pulumi:"geoproximity"`
	// The integer ID of an IP Filter to use for this record. Cannot be used with GeoPeoximity.
	Ipfilter pulumi.IntPtrOutput `pulumi:"ipfilter"`
	// If the requesting IP matches the IP filter, don't return a response
	IpfilterDrop pulumi.BoolPtrOutput `pulumi:"ipfilterDrop"`
	// The current mode for this record
	Mode CertPropertiesModePtrOutput `pulumi:"mode"`
	// The name for the record
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// A description of the record. It must be 512 characters or less.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// Optional region for this record. Will default to 'default'.
	Region RecordCreateDetailsRegionPtrOutput `pulumi:"region"`
	// Only used on POST or PATCH requests for ANAME records, used to specify whether the hostname should be looked up immediately. Will be null otherwise.
	SkipLookup pulumi.BoolPtrOutput `pulumi:"skipLookup"`
	// How long DNS servers should cache the record for
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
	// The type of record
	Type CertPropertiesTypePtrOutput `pulumi:"type"`
	// Standard record mode
	Value ValueCertValueItemPropertiesArrayOutput `pulumi:"value"`
}

// NewCert registers a new resource with the given unique name, arguments, and options.
func NewCert(ctx *pulumi.Context,
	name string, args *CertArgs, opts ...pulumi.ResourceOption) (*Cert, error) {
	if args == nil {
		args = &CertArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cert
	err := ctx.RegisterResource("constellix:templates:Cert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCert gets an existing Cert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertState, opts ...pulumi.ResourceOption) (*Cert, error) {
	var resource Cert
	err := ctx.ReadResource("constellix:templates:Cert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cert resources.
type certState struct {
}

type CertState struct {
}

func (CertState) ElementType() reflect.Type {
	return reflect.TypeOf((*certState)(nil)).Elem()
}

type certArgs struct {
	// Contact lists to be notified if a failover happens in a failover mode.
	Contacts []int `pulumi:"contacts"`
	// Whether the record is enabled
	Enabled *bool `pulumi:"enabled"`
	// Disable the record if all hosts fail. If all hosts fail, another matching IP Filter, nearest Proximity or World (Default) record will be used instead.
	GeoFailover *bool `pulumi:"geoFailover"`
	// The integer ID of a GeoProximity to use for this record. Cannot be used with IP Filter.
	Geoproximity *int `pulumi:"geoproximity"`
	// The integer ID of an IP Filter to use for this record. Cannot be used with GeoPeoximity.
	Ipfilter *int `pulumi:"ipfilter"`
	// If the requesting IP matches the IP filter, don't return a response
	IpfilterDrop *bool `pulumi:"ipfilterDrop"`
	// The current mode for this record
	Mode *CertPropertiesMode `pulumi:"mode"`
	// The name for the record
	Name *string `pulumi:"name"`
	// A description of the record. It must be 512 characters or less.
	Notes *string `pulumi:"notes"`
	// Optional region for this record. Will default to 'default'.
	Region *RecordCreateDetailsRegion `pulumi:"region"`
	// Only used on POST or PATCH requests for ANAME records, used to specify whether the hostname should be looked up immediately. Will be null otherwise.
	SkipLookup *bool `pulumi:"skipLookup"`
	// The ID of the template object
	TemplateId *string `pulumi:"templateId"`
	// How long DNS servers should cache the record for
	Ttl *int `pulumi:"ttl"`
	// The type of record
	Type *CertPropertiesType `pulumi:"type"`
	// Standard record mode
	Value []ValueCertValueItemProperties `pulumi:"value"`
}

// The set of arguments for constructing a Cert resource.
type CertArgs struct {
	// Contact lists to be notified if a failover happens in a failover mode.
	Contacts pulumi.IntArrayInput
	// Whether the record is enabled
	Enabled pulumi.BoolPtrInput
	// Disable the record if all hosts fail. If all hosts fail, another matching IP Filter, nearest Proximity or World (Default) record will be used instead.
	GeoFailover pulumi.BoolPtrInput
	// The integer ID of a GeoProximity to use for this record. Cannot be used with IP Filter.
	Geoproximity pulumi.IntPtrInput
	// The integer ID of an IP Filter to use for this record. Cannot be used with GeoPeoximity.
	Ipfilter pulumi.IntPtrInput
	// If the requesting IP matches the IP filter, don't return a response
	IpfilterDrop pulumi.BoolPtrInput
	// The current mode for this record
	Mode CertPropertiesModePtrInput
	// The name for the record
	Name pulumi.StringPtrInput
	// A description of the record. It must be 512 characters or less.
	Notes pulumi.StringPtrInput
	// Optional region for this record. Will default to 'default'.
	Region RecordCreateDetailsRegionPtrInput
	// Only used on POST or PATCH requests for ANAME records, used to specify whether the hostname should be looked up immediately. Will be null otherwise.
	SkipLookup pulumi.BoolPtrInput
	// The ID of the template object
	TemplateId pulumi.StringPtrInput
	// How long DNS servers should cache the record for
	Ttl pulumi.IntPtrInput
	// The type of record
	Type CertPropertiesTypePtrInput
	// Standard record mode
	Value ValueCertValueItemPropertiesArrayInput
}

func (CertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certArgs)(nil)).Elem()
}

type CertInput interface {
	pulumi.Input

	ToCertOutput() CertOutput
	ToCertOutputWithContext(ctx context.Context) CertOutput
}

func (*Cert) ElementType() reflect.Type {
	return reflect.TypeOf((**Cert)(nil)).Elem()
}

func (i *Cert) ToCertOutput() CertOutput {
	return i.ToCertOutputWithContext(context.Background())
}

func (i *Cert) ToCertOutputWithContext(ctx context.Context) CertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertOutput)
}

type CertOutput struct{ *pulumi.OutputState }

func (CertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cert)(nil)).Elem()
}

func (o CertOutput) ToCertOutput() CertOutput {
	return o
}

func (o CertOutput) ToCertOutputWithContext(ctx context.Context) CertOutput {
	return o
}

// Contact lists to be notified if a failover happens in a failover mode.
func (o CertOutput) Contacts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Cert) pulumi.IntArrayOutput { return v.Contacts }).(pulumi.IntArrayOutput)
}

func (o CertOutput) Data() DataPropertiesPtrOutput {
	return o.ApplyT(func(v *Cert) DataPropertiesPtrOutput { return v.Data }).(DataPropertiesPtrOutput)
}

// Whether the record is enabled
func (o CertOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cert) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Disable the record if all hosts fail. If all hosts fail, another matching IP Filter, nearest Proximity or World (Default) record will be used instead.
func (o CertOutput) GeoFailover() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cert) pulumi.BoolPtrOutput { return v.GeoFailover }).(pulumi.BoolPtrOutput)
}

// The integer ID of a GeoProximity to use for this record. Cannot be used with IP Filter.
func (o CertOutput) Geoproximity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cert) pulumi.IntPtrOutput { return v.Geoproximity }).(pulumi.IntPtrOutput)
}

// The integer ID of an IP Filter to use for this record. Cannot be used with GeoPeoximity.
func (o CertOutput) Ipfilter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cert) pulumi.IntPtrOutput { return v.Ipfilter }).(pulumi.IntPtrOutput)
}

// If the requesting IP matches the IP filter, don't return a response
func (o CertOutput) IpfilterDrop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cert) pulumi.BoolPtrOutput { return v.IpfilterDrop }).(pulumi.BoolPtrOutput)
}

// The current mode for this record
func (o CertOutput) Mode() CertPropertiesModePtrOutput {
	return o.ApplyT(func(v *Cert) CertPropertiesModePtrOutput { return v.Mode }).(CertPropertiesModePtrOutput)
}

// The name for the record
func (o CertOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cert) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// A description of the record. It must be 512 characters or less.
func (o CertOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cert) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

// Optional region for this record. Will default to 'default'.
func (o CertOutput) Region() RecordCreateDetailsRegionPtrOutput {
	return o.ApplyT(func(v *Cert) RecordCreateDetailsRegionPtrOutput { return v.Region }).(RecordCreateDetailsRegionPtrOutput)
}

// Only used on POST or PATCH requests for ANAME records, used to specify whether the hostname should be looked up immediately. Will be null otherwise.
func (o CertOutput) SkipLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cert) pulumi.BoolPtrOutput { return v.SkipLookup }).(pulumi.BoolPtrOutput)
}

// How long DNS servers should cache the record for
func (o CertOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cert) pulumi.IntPtrOutput { return v.Ttl }).(pulumi.IntPtrOutput)
}

// The type of record
func (o CertOutput) Type() CertPropertiesTypePtrOutput {
	return o.ApplyT(func(v *Cert) CertPropertiesTypePtrOutput { return v.Type }).(CertPropertiesTypePtrOutput)
}

// Standard record mode
func (o CertOutput) Value() ValueCertValueItemPropertiesArrayOutput {
	return o.ApplyT(func(v *Cert) ValueCertValueItemPropertiesArrayOutput { return v.Value }).(ValueCertValueItemPropertiesArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertInput)(nil)).Elem(), &Cert{})
	pulumi.RegisterOutputType(CertOutput{})
}
