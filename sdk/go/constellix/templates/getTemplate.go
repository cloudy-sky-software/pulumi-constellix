// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package templates

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-constellix/sdk/go/constellix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupTemplate(ctx *pulumi.Context, args *LookupTemplateArgs, opts ...pulumi.InvokeOption) (*LookupTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTemplateResult
	err := ctx.Invoke("constellix:templates:getTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTemplateArgs struct {
	// The ID of the template object
	Id string `pulumi:"id"`
}

type LookupTemplateResult struct {
	// A domain template
	Data *TemplateType `pulumi:"data"`
}

func LookupTemplateOutput(ctx *pulumi.Context, args LookupTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTemplateResultOutput, error) {
			args := v.(LookupTemplateArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupTemplateResult
			secret, err := ctx.InvokePackageRaw("constellix:templates:getTemplate", args, &rv, "", opts...)
			if err != nil {
				return LookupTemplateResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupTemplateResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupTemplateResultOutput), nil
			}
			return output, nil
		}).(LookupTemplateResultOutput)
}

type LookupTemplateOutputArgs struct {
	// The ID of the template object
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTemplateArgs)(nil)).Elem()
}

type LookupTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTemplateResult)(nil)).Elem()
}

func (o LookupTemplateResultOutput) ToLookupTemplateResultOutput() LookupTemplateResultOutput {
	return o
}

func (o LookupTemplateResultOutput) ToLookupTemplateResultOutputWithContext(ctx context.Context) LookupTemplateResultOutput {
	return o
}

// A domain template
func (o LookupTemplateResultOutput) Data() TemplateTypePtrOutput {
	return o.ApplyT(func(v LookupTemplateResult) *TemplateType { return v.Data }).(TemplateTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTemplateResultOutput{})
}
