// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package templates

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-constellix/sdk/go/constellix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Template struct {
	pulumi.CustomResourceState

	Data DataPropertiesPtrOutput `pulumi:"data"`
	// Is GeoIP functionality enabled for the template
	Geoip pulumi.BoolPtrOutput `pulumi:"geoip"`
	// Is Global Traffic Director enabled for the template
	Gtd pulumi.BoolPtrOutput `pulumi:"gtd"`
	// The name of the template
	Name pulumi.StringPtrOutput `pulumi:"name"`
}

// NewTemplate registers a new resource with the given unique name, arguments, and options.
func NewTemplate(ctx *pulumi.Context,
	name string, args *TemplateArgs, opts ...pulumi.ResourceOption) (*Template, error) {
	if args == nil {
		args = &TemplateArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Template
	err := ctx.RegisterResource("constellix:templates:Template", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplate gets an existing Template resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateState, opts ...pulumi.ResourceOption) (*Template, error) {
	var resource Template
	err := ctx.ReadResource("constellix:templates:Template", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Template resources.
type templateState struct {
}

type TemplateState struct {
}

func (TemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateState)(nil)).Elem()
}

type templateArgs struct {
	// Is GeoIP functionality enabled for the template
	Geoip *bool `pulumi:"geoip"`
	// Is Global Traffic Director enabled for the template
	Gtd *bool `pulumi:"gtd"`
	// The name of the template
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Template resource.
type TemplateArgs struct {
	// Is GeoIP functionality enabled for the template
	Geoip pulumi.BoolPtrInput
	// Is Global Traffic Director enabled for the template
	Gtd pulumi.BoolPtrInput
	// The name of the template
	Name pulumi.StringPtrInput
}

func (TemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateArgs)(nil)).Elem()
}

type TemplateInput interface {
	pulumi.Input

	ToTemplateOutput() TemplateOutput
	ToTemplateOutputWithContext(ctx context.Context) TemplateOutput
}

func (*Template) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (i *Template) ToTemplateOutput() TemplateOutput {
	return i.ToTemplateOutputWithContext(context.Background())
}

func (i *Template) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateOutput)
}

type TemplateOutput struct{ *pulumi.OutputState }

func (TemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (o TemplateOutput) ToTemplateOutput() TemplateOutput {
	return o
}

func (o TemplateOutput) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return o
}

func (o TemplateOutput) Data() DataPropertiesPtrOutput {
	return o.ApplyT(func(v *Template) DataPropertiesPtrOutput { return v.Data }).(DataPropertiesPtrOutput)
}

// Is GeoIP functionality enabled for the template
func (o TemplateOutput) Geoip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.BoolPtrOutput { return v.Geoip }).(pulumi.BoolPtrOutput)
}

// Is Global Traffic Director enabled for the template
func (o TemplateOutput) Gtd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.BoolPtrOutput { return v.Gtd }).(pulumi.BoolPtrOutput)
}

// The name of the template
func (o TemplateOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateInput)(nil)).Elem(), &Template{})
	pulumi.RegisterOutputType(TemplateOutput{})
}
