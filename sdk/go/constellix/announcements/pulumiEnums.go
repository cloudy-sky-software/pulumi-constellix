// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package announcements

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The type of Announcement
type AnnouncementType string

const (
	AnnouncementTypeDashboardLinks = AnnouncementType("DashboardLinks")
)

type AnnouncementTypeOutput struct{ *pulumi.OutputState }

func (AnnouncementTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnouncementType)(nil)).Elem()
}

func (o AnnouncementTypeOutput) ToAnnouncementTypeOutput() AnnouncementTypeOutput {
	return o
}

func (o AnnouncementTypeOutput) ToAnnouncementTypeOutputWithContext(ctx context.Context) AnnouncementTypeOutput {
	return o
}

func (o AnnouncementTypeOutput) ToAnnouncementTypePtrOutput() AnnouncementTypePtrOutput {
	return o.ToAnnouncementTypePtrOutputWithContext(context.Background())
}

func (o AnnouncementTypeOutput) ToAnnouncementTypePtrOutputWithContext(ctx context.Context) AnnouncementTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnnouncementType) *AnnouncementType {
		return &v
	}).(AnnouncementTypePtrOutput)
}

func (o AnnouncementTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AnnouncementTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AnnouncementType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AnnouncementTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AnnouncementTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AnnouncementType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AnnouncementTypePtrOutput struct{ *pulumi.OutputState }

func (AnnouncementTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnouncementType)(nil)).Elem()
}

func (o AnnouncementTypePtrOutput) ToAnnouncementTypePtrOutput() AnnouncementTypePtrOutput {
	return o
}

func (o AnnouncementTypePtrOutput) ToAnnouncementTypePtrOutputWithContext(ctx context.Context) AnnouncementTypePtrOutput {
	return o
}

func (o AnnouncementTypePtrOutput) Elem() AnnouncementTypeOutput {
	return o.ApplyT(func(v *AnnouncementType) AnnouncementType {
		if v != nil {
			return *v
		}
		var ret AnnouncementType
		return ret
	}).(AnnouncementTypeOutput)
}

func (o AnnouncementTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AnnouncementTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AnnouncementType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AnnouncementTypeOutput{})
	pulumi.RegisterOutputType(AnnouncementTypePtrOutput{})
}
